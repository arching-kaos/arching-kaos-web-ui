/*! For license information please see stellar-sdk-minimal.min.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("StellarSdk",[],t):"object"==typeof exports?exports.StellarSdk=t():e.StellarSdk=t()}(self,(()=>(()=>{var e={"./node_modules/@stellar/js-xdr/dist/xdr.js":function(e){var t;t=()=>(()=>{var e={616:(e,t,r)=>{"use strict";r.d(t,{A:()=>o});var n=r(287);n.hp.alloc(1).subarray(0,1)instanceof n.hp||(n.hp.prototype.subarray=function(e,t){const r=Uint8Array.prototype.subarray.call(this,e,t);return Object.setPrototypeOf(r,n.hp.prototype),r});const o=n.hp},281:(e,t,r)=>{const n=r(164);e.exports=n},164:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Array:()=>D,Bool:()=>B,Double:()=>I,Enum:()=>z,Float:()=>C,Hyper:()=>A,Int:()=>_,LargeInt:()=>k,Opaque:()=>N,Option:()=>q,Quadruple:()=>R,Reference:()=>H,String:()=>U,Struct:()=>X,Union:()=>Q,UnsignedHyper:()=>O,UnsignedInt:()=>P,VarArray:()=>V,VarOpaque:()=>F,Void:()=>K,XdrReader:()=>u,XdrWriter:()=>d,config:()=>ne});class n extends TypeError{constructor(e){super(`XDR Write Error: ${e}`)}}class o extends TypeError{constructor(e){super(`XDR Read Error: ${e}`)}}class s extends TypeError{constructor(e){super(`XDR Type Definition Error: ${e}`)}}class i extends s{constructor(){super("method not implemented, it should be overloaded in the descendant class.")}}var a=r(616).A;class u{constructor(e){if(!a.isBuffer(e)){if(!(e instanceof Array||Array.isArray(e)||ArrayBuffer.isView(e)))throw new o(`source invalid: ${e}`);e=a.from(e)}this._buffer=e,this._length=e.length,this._index=0}_buffer;_length;_index;get eof(){return this._index===this._length}advance(e){const t=this._index;if(this._index+=e,this._length<this._index)throw new o("attempt to read outside the boundary of the buffer");const r=4-(e%4||4);if(r>0){for(let e=0;e<r;e++)if(0!==this._buffer[this._index+e])throw new o("invalid padding");this._index+=r}return t}rewind(){this._index=0}read(e){const t=this.advance(e);return this._buffer.subarray(t,t+e)}readInt32BE(){return this._buffer.readInt32BE(this.advance(4))}readUInt32BE(){return this._buffer.readUInt32BE(this.advance(4))}readBigInt64BE(){return this._buffer.readBigInt64BE(this.advance(8))}readBigUInt64BE(){return this._buffer.readBigUInt64BE(this.advance(8))}readFloatBE(){return this._buffer.readFloatBE(this.advance(4))}readDoubleBE(){return this._buffer.readDoubleBE(this.advance(8))}ensureInputConsumed(){if(this._index!==this._length)throw new o("invalid XDR contract typecast - source buffer not entirely consumed")}}var l=r(616).A;const c=8192;class d{constructor(e){"number"==typeof e?e=l.allocUnsafe(e):e instanceof l||(e=l.allocUnsafe(c)),this._buffer=e,this._length=e.length}_buffer;_length;_index=0;alloc(e){const t=this._index;return this._index+=e,this._length<this._index&&this.resize(this._index),t}resize(e){const t=Math.ceil(e/c)*c,r=l.allocUnsafe(t);this._buffer.copy(r,0,0,this._length),this._buffer=r,this._length=t}finalize(){return this._buffer.subarray(0,this._index)}toArray(){return[...this.finalize()]}write(e,t){if("string"==typeof e){const r=this.alloc(t);this._buffer.write(e,r,"utf8")}else{e instanceof l||(e=l.from(e));const r=this.alloc(t);e.copy(this._buffer,r,0,t)}const r=4-(t%4||4);if(r>0){const e=this.alloc(r);this._buffer.fill(0,e,this._index)}}writeInt32BE(e){const t=this.alloc(4);this._buffer.writeInt32BE(e,t)}writeUInt32BE(e){const t=this.alloc(4);this._buffer.writeUInt32BE(e,t)}writeBigInt64BE(e){const t=this.alloc(8);this._buffer.writeBigInt64BE(e,t)}writeBigUInt64BE(e){const t=this.alloc(8);this._buffer.writeBigUInt64BE(e,t)}writeFloatBE(e){const t=this.alloc(4);this._buffer.writeFloatBE(e,t)}writeDoubleBE(e){const t=this.alloc(8);this._buffer.writeDoubleBE(e,t)}static bufferChunkSize=c}var p=r(616).A;class f{toXDR(e="raw"){if(!this.write)return this.constructor.toXDR(this,e);const t=new d;return this.write(this,t),g(t.finalize(),e)}fromXDR(e,t="raw"){if(!this.read)return this.constructor.fromXDR(e,t);const r=new u(v(e,t)),n=this.read(r);return r.ensureInputConsumed(),n}validateXDR(e,t="raw"){try{return this.fromXDR(e,t),!0}catch(e){return!1}}static toXDR(e,t="raw"){const r=new d;return this.write(e,r),g(r.finalize(),t)}static fromXDR(e,t="raw"){const r=new u(v(e,t)),n=this.read(r);return r.ensureInputConsumed(),n}static validateXDR(e,t="raw"){try{return this.fromXDR(e,t),!0}catch(e){return!1}}}class h extends f{static read(e){throw new i}static write(e,t){throw new i}static isValid(e){return!1}}class y extends f{isValid(e){return!1}}class m extends TypeError{constructor(e){super(`Invalid format ${e}, must be one of "raw", "hex", "base64"`)}}function g(e,t){switch(t){case"raw":return e;case"hex":return e.toString("hex");case"base64":return e.toString("base64");default:throw new m(t)}}function v(e,t){switch(t){case"raw":return e;case"hex":return p.from(e,"hex");case"base64":return p.from(e,"base64");default:throw new m(t)}}function b(e,t){return null!=e&&(e instanceof t||w(e,t)&&"function"==typeof e.constructor.read&&"function"==typeof e.constructor.write&&w(e,"XdrType"))}function w(e,t){do{if(e.constructor.name===t)return!0}while(e=Object.getPrototypeOf(e));return!1}const S=2147483647;class _ extends h{static read(e){return e.readInt32BE()}static write(e,t){if("number"!=typeof e)throw new n("not a number");if((0|e)!==e)throw new n("invalid i32 value");t.writeInt32BE(e)}static isValid(e){return"number"==typeof e&&(0|e)===e&&e>=-2147483648&&e<=S}}function T(e,t,r){if("bigint"!=typeof e)throw new TypeError("Expected bigint 'value', got "+typeof e);const n=t/r;if(1===n)return[e];if(r<32||r>128||2!==n&&4!==n&&8!==n)throw new TypeError(`invalid bigint (${e}) and slice size (${t} -> ${r}) combination`);const o=BigInt(r),s=new Array(n);for(let t=0;t<n;t++)s[t]=BigInt.asIntN(r,e),e>>=o;return s}function E(e,t){if(t)return[0n,(1n<<BigInt(e))-1n];const r=1n<<BigInt(e-1);return[0n-r,r-1n]}_.MAX_VALUE=S,_.MIN_VALUE=2147483648;class k extends h{constructor(e){super(),this._value=function(e,t,r){e instanceof Array?e.length&&e[0]instanceof Array&&(e=e[0]):e=[e];const n=t/e.length;switch(n){case 32:case 64:case 128:case 256:break;default:throw new RangeError(`expected slices to fit in 32/64/128/256 bits, got ${e}`)}try{for(let t=0;t<e.length;t++)"bigint"!=typeof e[t]&&(e[t]=BigInt(e[t].valueOf()))}catch(t){throw new TypeError(`expected bigint-like values, got: ${e} (${t})`)}if(r&&1===e.length&&e[0]<0n)throw new RangeError(`expected a positive value, got: ${e}`);let o=BigInt.asUintN(n,e[0]);for(let t=1;t<e.length;t++)o|=BigInt.asUintN(n,e[t])<<BigInt(t*n);r||(o=BigInt.asIntN(t,o));const[s,i]=E(t,r);if(o>=s&&o<=i)return o;throw new TypeError(`bigint values [${e}] for ${function(e,t){return`${t?"u":"i"}${e}`}(t,r)} out of range [${s}, ${i}]: ${o}`)}(e,this.size,this.unsigned)}get unsigned(){throw new i}get size(){throw new i}slice(e){return T(this._value,this.size,e)}toString(){return this._value.toString()}toJSON(){return{_value:this._value.toString()}}toBigInt(){return BigInt(this._value)}static read(e){const{size:t}=this.prototype;return 64===t?new this(e.readBigUInt64BE()):new this(...Array.from({length:t/64},(()=>e.readBigUInt64BE())).reverse())}static write(e,t){if(e instanceof this)e=e._value;else if("bigint"!=typeof e||e>this.MAX_VALUE||e<this.MIN_VALUE)throw new n(`${e} is not a ${this.name}`);const{unsigned:r,size:o}=this.prototype;if(64===o)r?t.writeBigUInt64BE(e):t.writeBigInt64BE(e);else for(const n of T(e,o,64).reverse())r?t.writeBigUInt64BE(n):t.writeBigInt64BE(n)}static isValid(e){return"bigint"==typeof e||e instanceof this}static fromString(e){return new this(e)}static MAX_VALUE=0n;static MIN_VALUE=0n;static defineIntBoundaries(){const[e,t]=E(this.prototype.size,this.prototype.unsigned);this.MIN_VALUE=e,this.MAX_VALUE=t}}class A extends k{constructor(...e){super(e)}get low(){return 0|Number(0xffffffffn&this._value)}get high(){return 0|Number(this._value>>32n)}get size(){return 64}get unsigned(){return!1}static fromBits(e,t){return new this(e,t)}}A.defineIntBoundaries();const x=4294967295;class P extends h{static read(e){return e.readUInt32BE()}static write(e,t){if("number"!=typeof e||!(e>=0&&e<=x)||e%1!=0)throw new n("invalid u32 value");t.writeUInt32BE(e)}static isValid(e){return"number"==typeof e&&e%1==0&&e>=0&&e<=x}}P.MAX_VALUE=x,P.MIN_VALUE=0;class O extends k{constructor(...e){super(e)}get low(){return 0|Number(0xffffffffn&this._value)}get high(){return 0|Number(this._value>>32n)}get size(){return 64}get unsigned(){return!0}static fromBits(e,t){return new this(e,t)}}O.defineIntBoundaries();class C extends h{static read(e){return e.readFloatBE()}static write(e,t){if("number"!=typeof e)throw new n("not a number");t.writeFloatBE(e)}static isValid(e){return"number"==typeof e}}class I extends h{static read(e){return e.readDoubleBE()}static write(e,t){if("number"!=typeof e)throw new n("not a number");t.writeDoubleBE(e)}static isValid(e){return"number"==typeof e}}class R extends h{static read(){throw new s("quadruple not supported")}static write(){throw new s("quadruple not supported")}static isValid(){return!1}}class B extends h{static read(e){const t=_.read(e);switch(t){case 0:return!1;case 1:return!0;default:throw new o(`got ${t} when trying to read a bool`)}}static write(e,t){const r=e?1:0;_.write(r,t)}static isValid(e){return"boolean"==typeof e}}var j=r(616).A;class U extends y{constructor(e=P.MAX_VALUE){super(),this._maxLength=e}read(e){const t=P.read(e);if(t>this._maxLength)throw new o(`saw ${t} length String, max allowed is ${this._maxLength}`);return e.read(t)}readString(e){return this.read(e).toString("utf8")}write(e,t){const r="string"==typeof e?j.byteLength(e,"utf8"):e.length;if(r>this._maxLength)throw new n(`got ${e.length} bytes, max allowed is ${this._maxLength}`);P.write(r,t),t.write(e,r)}isValid(e){return"string"==typeof e?j.byteLength(e,"utf8")<=this._maxLength:!!(e instanceof Array||j.isBuffer(e))&&e.length<=this._maxLength}}var L=r(616).A;class N extends y{constructor(e){super(),this._length=e}read(e){return e.read(this._length)}write(e,t){const{length:r}=e;if(r!==this._length)throw new n(`got ${e.length} bytes, expected ${this._length}`);t.write(e,r)}isValid(e){return L.isBuffer(e)&&e.length===this._length}}var M=r(616).A;class F extends y{constructor(e=P.MAX_VALUE){super(),this._maxLength=e}read(e){const t=P.read(e);if(t>this._maxLength)throw new o(`saw ${t} length VarOpaque, max allowed is ${this._maxLength}`);return e.read(t)}write(e,t){const{length:r}=e;if(e.length>this._maxLength)throw new n(`got ${e.length} bytes, max allowed is ${this._maxLength}`);P.write(r,t),t.write(e,r)}isValid(e){return M.isBuffer(e)&&e.length<=this._maxLength}}class D extends y{constructor(e,t){super(),this._childType=e,this._length=t}read(e){const t=new r.g.Array(this._length);for(let r=0;r<this._length;r++)t[r]=this._childType.read(e);return t}write(e,t){if(!r.g.Array.isArray(e))throw new n("value is not array");if(e.length!==this._length)throw new n(`got array of size ${e.length}, expected ${this._length}`);for(const r of e)this._childType.write(r,t)}isValid(e){if(!(e instanceof r.g.Array)||e.length!==this._length)return!1;for(const t of e)if(!this._childType.isValid(t))return!1;return!0}}class V extends y{constructor(e,t=P.MAX_VALUE){super(),this._childType=e,this._maxLength=t}read(e){const t=P.read(e);if(t>this._maxLength)throw new o(`saw ${t} length VarArray, max allowed is ${this._maxLength}`);const r=new Array(t);for(let n=0;n<t;n++)r[n]=this._childType.read(e);return r}write(e,t){if(!(e instanceof Array))throw new n("value is not array");if(e.length>this._maxLength)throw new n(`got array of size ${e.length}, max allowed is ${this._maxLength}`);P.write(e.length,t);for(const r of e)this._childType.write(r,t)}isValid(e){if(!(e instanceof Array)||e.length>this._maxLength)return!1;for(const t of e)if(!this._childType.isValid(t))return!1;return!0}}class q extends h{constructor(e){super(),this._childType=e}read(e){if(B.read(e))return this._childType.read(e)}write(e,t){const r=null!=e;B.write(r,t),r&&this._childType.write(e,t)}isValid(e){return null==e||this._childType.isValid(e)}}class K extends h{static read(){}static write(e){if(void 0!==e)throw new n("trying to write value to a void slot")}static isValid(e){return void 0===e}}class z extends h{constructor(e,t){super(),this.name=e,this.value=t}static read(e){const t=_.read(e),r=this._byValue[t];if(void 0===r)throw new o(`unknown ${this.enumName} member for value ${t}`);return r}static write(e,t){if(!this.isValid(e))throw new n(`${e} has enum name ${e?.enumName}, not ${this.enumName}: ${JSON.stringify(e)}`);_.write(e.value,t)}static isValid(e){return e?.constructor?.enumName===this.enumName||b(e,this)}static members(){return this._members}static values(){return Object.values(this._members)}static fromName(e){const t=this._members[e];if(!t)throw new TypeError(`${e} is not a member of ${this.enumName}`);return t}static fromValue(e){const t=this._byValue[e];if(void 0===t)throw new TypeError(`${e} is not a value of any member of ${this.enumName}`);return t}static create(e,t,r){const n=class extends z{};n.enumName=t,e.results[t]=n,n._members={},n._byValue={};for(const[e,t]of Object.entries(r)){const r=new n(e,t);n._members[e]=r,n._byValue[t]=r,n[e]=()=>r}return n}}class H extends h{resolve(){throw new s('"resolve" method should be implemented in the descendant class')}}class X extends y{constructor(e){super(),this._attributes=e||{}}static read(e){const t={};for(const[r,n]of this._fields)t[r]=n.read(e);return new this(t)}static write(e,t){if(!this.isValid(e))throw new n(`${e} has struct name ${e?.constructor?.structName}, not ${this.structName}: ${JSON.stringify(e)}`);for(const[r,n]of this._fields){const o=e._attributes[r];n.write(o,t)}}static isValid(e){return e?.constructor?.structName===this.structName||b(e,this)}static create(e,t,r){const n=class extends X{};n.structName=t,e.results[t]=n;const o=new Array(r.length);for(let t=0;t<r.length;t++){const s=r[t],i=s[0];let a=s[1];a instanceof H&&(a=a.resolve(e)),o[t]=[i,a],n.prototype[i]=$(i)}return n._fields=o,n}}function $(e){return function(t){return void 0!==t&&(this._attributes[e]=t),this._attributes[e]}}class Q extends y{constructor(e,t){super(),this.set(e,t)}set(e,t){"string"==typeof e&&(e=this.constructor._switchOn.fromName(e)),this._switch=e;const r=this.constructor.armForSwitch(this._switch);this._arm=r,this._armType=r===K?K:this.constructor._arms[r],this._value=t}get(e=this._arm){if(this._arm!==K&&this._arm!==e)throw new TypeError(`${e} not set`);return this._value}switch(){return this._switch}arm(){return this._arm}armType(){return this._armType}value(){return this._value}static armForSwitch(e){const t=this._switches.get(e);if(void 0!==t)return t;if(this._defaultArm)return this._defaultArm;throw new TypeError(`Bad union switch: ${e}`)}static armTypeForArm(e){return e===K?K:this._arms[e]}static read(e){const t=this._switchOn.read(e),r=this.armForSwitch(t),n=r===K?K:this._arms[r];let o;return o=void 0!==n?n.read(e):r.read(e),new this(t,o)}static write(e,t){if(!this.isValid(e))throw new n(`${e} has union name ${e?.unionName}, not ${this.unionName}: ${JSON.stringify(e)}`);this._switchOn.write(e.switch(),t),e.armType().write(e.value(),t)}static isValid(e){return e?.constructor?.unionName===this.unionName||b(e,this)}static create(e,t,r){const n=class extends Q{};n.unionName=t,e.results[t]=n,r.switchOn instanceof H?n._switchOn=r.switchOn.resolve(e):n._switchOn=r.switchOn,n._switches=new Map,n._arms={};let o=r.defaultArm;o instanceof H&&(o=o.resolve(e)),n._defaultArm=o;for(const[e,t]of r.switches){const r="string"==typeof e?n._switchOn.fromName(e):e;n._switches.set(r,t)}if(void 0!==n._switchOn.values)for(const e of n._switchOn.values())n[e.name]=function(t){return new n(e,t)},n.prototype[e.name]=function(t){return this.set(e,t)};if(r.arms)for(const[t,o]of Object.entries(r.arms))n._arms[t]=o instanceof H?o.resolve(e):o,o!==K&&(n.prototype[t]=function(){return this.get(t)});return n}}class W extends H{constructor(e){super(),this.name=e}resolve(e){return e.definitions[this.name].resolve(e)}}class G extends H{constructor(e,t,r=!1){super(),this.childReference=e,this.length=t,this.variable=r}resolve(e){let t=this.childReference,r=this.length;return t instanceof H&&(t=t.resolve(e)),r instanceof H&&(r=r.resolve(e)),this.variable?new V(t,r):new D(t,r)}}class Y extends H{constructor(e){super(),this.childReference=e,this.name=e.name}resolve(e){let t=this.childReference;return t instanceof H&&(t=t.resolve(e)),new q(t)}}class J extends H{constructor(e,t){super(),this.sizedType=e,this.length=t}resolve(e){let t=this.length;return t instanceof H&&(t=t.resolve(e)),new this.sizedType(t)}}class Z{constructor(e,t,r){this.constructor=e,this.name=t,this.config=r}resolve(e){return this.name in e.results?e.results[this.name]:this.constructor(e,this.name,this.config)}}function ee(e,t,r){return r instanceof H&&(r=r.resolve(e)),e.results[t]=r,r}function te(e,t,r){return e.results[t]=r,r}class re{constructor(e){this._destination=e,this._definitions={}}enum(e,t){const r=new Z(z.create,e,t);this.define(e,r)}struct(e,t){const r=new Z(X.create,e,t);this.define(e,r)}union(e,t){const r=new Z(Q.create,e,t);this.define(e,r)}typedef(e,t){const r=new Z(ee,e,t);this.define(e,r)}const(e,t){const r=new Z(te,e,t);this.define(e,r)}void(){return K}bool(){return B}int(){return _}hyper(){return A}uint(){return P}uhyper(){return O}float(){return C}double(){return I}quadruple(){return R}string(e){return new J(U,e)}opaque(e){return new J(N,e)}varOpaque(e){return new J(F,e)}array(e,t){return new G(e,t)}varArray(e,t){return new G(e,t,!0)}option(e){return new Y(e)}define(e,t){if(void 0!==this._destination[e])throw new s(`${e} is already defined`);this._definitions[e]=t}lookup(e){return new W(e)}resolve(){for(const e of Object.values(this._definitions))e.resolve({definitions:this._definitions,results:this._destination})}}function ne(e,t={}){if(e){const r=new re(t);e(r),r.resolve()}return t}},526:(e,t)=>{"use strict";t.byteLength=function(e){var t=a(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,s=a(e),i=s[0],u=s[1],l=new o(function(e,t,r){return 3*(t+r)/4-r}(0,i,u)),c=0,d=u>0?i-4:i;for(r=0;r<d;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],l[c++]=t>>16&255,l[c++]=t>>8&255,l[c++]=255&t;return 2===u&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,l[c++]=255&t),1===u&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,l[c++]=t>>8&255,l[c++]=255&t),l},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,s=[],i=16383,a=0,l=n-o;a<l;a+=i)s.push(u(e,a,a+i>l?l:a+i));return 1===o?(t=e[n-1],s.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],s.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),s.join("")};for(var r=[],n=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0;i<64;++i)r[i]=s[i],n[s.charCodeAt(i)]=i;function a(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function u(e,t,n){for(var o,s,i=[],a=t;a<n;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),i.push(r[(s=o)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return i.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},287:(e,t,r)=>{"use strict";const n=r(526),o=r(251),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.hp=u,t.IS=50;const i=2147483647;function a(e){if(e>i)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,u.prototype),t}function u(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return d(e)}return l(e,t,r)}function l(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!u.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|y(e,t);let n=a(r);const o=n.write(e,t);return o!==r&&(n=n.slice(0,o)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(W(e,Uint8Array)){const t=new Uint8Array(e);return f(t.buffer,t.byteOffset,t.byteLength)}return p(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(W(e,ArrayBuffer)||e&&W(e.buffer,ArrayBuffer))return f(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(W(e,SharedArrayBuffer)||e&&W(e.buffer,SharedArrayBuffer)))return f(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return u.from(n,t,r);const o=function(e){if(u.isBuffer(e)){const t=0|h(e.length),r=a(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||G(e.length)?a(0):p(e):"Buffer"===e.type&&Array.isArray(e.data)?p(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return u.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function d(e){return c(e),a(e<0?0:0|h(e))}function p(e){const t=e.length<0?0:0|h(e.length),r=a(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function f(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,u.prototype),n}function h(e){if(e>=i)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i.toString(16)+" bytes");return 0|e}function y(e,t){if(u.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||W(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let o=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return X(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return $(e).length;default:if(o)return n?-1:X(e).length;t=(""+t).toLowerCase(),o=!0}}function m(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return C(this,t,r);case"utf8":case"utf-8":return A(this,t,r);case"ascii":return P(this,t,r);case"latin1":case"binary":return O(this,t,r);case"base64":return k(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function v(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),G(r=+r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:b(e,t,r,n,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):b(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function b(e,t,r,n,o){let s,i=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;i=2,a/=2,u/=2,r/=2}function l(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o){let n=-1;for(s=r;s<a;s++)if(l(e,s)===l(t,-1===n?0:s-n)){if(-1===n&&(n=s),s-n+1===u)return n*i}else-1!==n&&(s-=s-n),n=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){let r=!0;for(let n=0;n<u;n++)if(l(e,s+n)!==l(t,n)){r=!1;break}if(r)return s}return-1}function w(e,t,r,n){r=Number(r)||0;const o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;const s=t.length;let i;for(n>s/2&&(n=s/2),i=0;i<n;++i){const n=parseInt(t.substr(2*i,2),16);if(G(n))return i;e[r+i]=n}return i}function S(e,t,r,n){return Q(X(t,e.length-r),e,r,n)}function _(e,t,r,n){return Q(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function T(e,t,r,n){return Q($(t),e,r,n)}function E(e,t,r,n){return Q(function(e,t){let r,n,o;const s=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)r=e.charCodeAt(i),n=r>>8,o=r%256,s.push(o),s.push(n);return s}(t,e.length-r),e,r,n)}function k(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function A(e,t,r){r=Math.min(e.length,r);const n=[];let o=t;for(;o<r;){const t=e[o];let s=null,i=t>239?4:t>223?3:t>191?2:1;if(o+i<=r){let r,n,a,u;switch(i){case 1:t<128&&(s=t);break;case 2:r=e[o+1],128==(192&r)&&(u=(31&t)<<6|63&r,u>127&&(s=u));break;case 3:r=e[o+1],n=e[o+2],128==(192&r)&&128==(192&n)&&(u=(15&t)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(s=u));break;case 4:r=e[o+1],n=e[o+2],a=e[o+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(u=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,u>65535&&u<1114112&&(s=u))}}null===s?(s=65533,i=1):s>65535&&(s-=65536,n.push(s>>>10&1023|55296),s=56320|1023&s),n.push(s),o+=i}return function(e){const t=e.length;if(t<=x)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=x));return r}(n)}u.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(e,t,r){return l(e,t,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(e,t,r){return function(e,t,r){return c(e),e<=0?a(e):void 0!==t?"string"==typeof r?a(e).fill(t,r):a(e).fill(t):a(e)}(e,t,r)},u.allocUnsafe=function(e){return d(e)},u.allocUnsafeSlow=function(e){return d(e)},u.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==u.prototype},u.compare=function(e,t){if(W(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),W(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let o=0,s=Math.min(r,n);o<s;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=u.allocUnsafe(t);let o=0;for(r=0;r<e.length;++r){let t=e[r];if(W(t,Uint8Array))o+t.length>n.length?(u.isBuffer(t)||(t=u.from(t)),t.copy(n,o)):Uint8Array.prototype.set.call(n,t,o);else{if(!u.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,o)}o+=t.length}return n},u.byteLength=y,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)g(this,t,t+1);return this},u.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},u.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},u.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?A(this,0,e):m.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){let e="";const r=t.IS;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},s&&(u.prototype[s]=u.prototype.inspect),u.prototype.compare=function(e,t,r,n,o){if(W(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;let s=(o>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0);const a=Math.min(s,i),l=this.slice(n,o),c=e.slice(t,r);for(let e=0;e<a;++e)if(l[e]!==c[e]){s=l[e],i=c[e];break}return s<i?-1:i<s?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return v(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return v(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let s=!1;for(;;)switch(n){case"hex":return w(this,e,t,r);case"utf8":case"utf-8":return S(this,e,t,r);case"ascii":case"latin1":case"binary":return _(this,e,t,r);case"base64":return T(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const x=4096;function P(e,t,r){let n="";r=Math.min(e.length,r);for(let o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function O(e,t,r){let n="";r=Math.min(e.length,r);for(let o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function C(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let o="";for(let n=t;n<r;++n)o+=Y[e[n]];return o}function I(e,t,r){const n=e.slice(t,r);let o="";for(let e=0;e<n.length-1;e+=2)o+=String.fromCharCode(n[e]+256*n[e+1]);return o}function R(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function B(e,t,r,n,o,s){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<s)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function j(e,t,r,n,o){q(t,n,o,e,r,7);let s=Number(t&BigInt(4294967295));e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,r}function U(e,t,r,n,o){q(t,n,o,e,r,7);let s=Number(t&BigInt(4294967295));e[r+7]=s,s>>=8,e[r+6]=s,s>>=8,e[r+5]=s,s>>=8,e[r+4]=s;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=i,i>>=8,e[r+2]=i,i>>=8,e[r+1]=i,i>>=8,e[r]=i,r+8}function L(e,t,r,n,o,s){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function N(e,t,r,n,s){return t=+t,r>>>=0,s||L(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function M(e,t,r,n,s){return t=+t,r>>>=0,s||L(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=this[e],o=1,s=0;for(;++s<t&&(o*=256);)n+=this[e+s]*o;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=this[e+--t],o=1;for(;t>0&&(o*=256);)n+=this[e+--t]*o;return n},u.prototype.readUint8=u.prototype.readUInt8=function(e,t){return e>>>=0,t||R(e,1,this.length),this[e]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(e,t){return e>>>=0,t||R(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(e,t){return e>>>=0,t||R(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(e,t){return e>>>=0,t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(e,t){return e>>>=0,t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readBigUInt64LE=J((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,o=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(o)<<BigInt(32))})),u.prototype.readBigUInt64BE=J((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],o=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(o)})),u.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=this[e],o=1,s=0;for(;++s<t&&(o*=256);)n+=this[e+s]*o;return o*=128,n>=o&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=t,o=1,s=this[e+--n];for(;n>0&&(o*=256);)s+=this[e+--n]*o;return o*=128,s>=o&&(s-=Math.pow(2,8*t)),s},u.prototype.readInt8=function(e,t){return e>>>=0,t||R(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){e>>>=0,t||R(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){e>>>=0,t||R(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return e>>>=0,t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return e>>>=0,t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readBigInt64LE=J((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),u.prototype.readBigInt64BE=J((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),u.prototype.readFloatLE=function(e,t){return e>>>=0,t||R(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return e>>>=0,t||R(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return e>>>=0,t||R(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return e>>>=0,t||R(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||B(this,e,t,r,Math.pow(2,8*r)-1,0);let o=1,s=0;for(this[t]=255&e;++s<r&&(o*=256);)this[t+s]=e/o&255;return t+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||B(this,e,t,r,Math.pow(2,8*r)-1,0);let o=r-1,s=1;for(this[t+o]=255&e;--o>=0&&(s*=256);)this[t+o]=e/s&255;return t+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,1,255,0),this[t]=255&e,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigUInt64LE=J((function(e,t=0){return j(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=J((function(e,t=0){return U(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);B(this,e,t,r,n-1,-n)}let o=0,s=1,i=0;for(this[t]=255&e;++o<r&&(s*=256);)e<0&&0===i&&0!==this[t+o-1]&&(i=1),this[t+o]=(e/s|0)-i&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);B(this,e,t,r,n-1,-n)}let o=r-1,s=1,i=0;for(this[t+o]=255&e;--o>=0&&(s*=256);)e<0&&0===i&&0!==this[t+o+1]&&(i=1),this[t+o]=(e/s|0)-i&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigInt64LE=J((function(e,t=0){return j(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=J((function(e,t=0){return U(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(e,t,r){return N(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return N(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return M(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return M(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(!u.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const o=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),o},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{const s=u.isBuffer(e)?e:u.from(e,n),i=s.length;if(0===i)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<r-t;++o)this[o+t]=s[o%i]}return this};const F={};function D(e,t,r){F[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function V(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function q(e,t,r,n,o,s){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let o;throw o=s>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(s+1)}${n}`:`>= -(2${n} ** ${8*(s+1)-1}${n}) and < 2 ** ${8*(s+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new F.ERR_OUT_OF_RANGE("value",o,e)}!function(e,t,r){K(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||z(t,e.length-(r+1))}(n,o,s)}function K(e,t){if("number"!=typeof e)throw new F.ERR_INVALID_ARG_TYPE(t,"number",e)}function z(e,t,r){if(Math.floor(e)!==e)throw K(e,r),new F.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new F.ERR_BUFFER_OUT_OF_BOUNDS;throw new F.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}D("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),D("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),D("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,o=r;return Number.isInteger(r)&&Math.abs(r)>2**32?o=V(String(r)):"bigint"==typeof r&&(o=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(o=V(o)),o+="n"),n+=` It must be ${t}. Received ${o}`,n}),RangeError);const H=/[^+/0-9A-Za-z-_]/g;function X(e,t){let r;t=t||1/0;const n=e.length;let o=null;const s=[];for(let i=0;i<n;++i){if(r=e.charCodeAt(i),r>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(i+1===n){(t-=3)>-1&&s.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&s.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&s.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;s.push(r)}else if(r<2048){if((t-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function $(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(H,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Q(e,t,r,n){let o;for(o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}function W(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function G(e){return e!=e}const Y=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let o=0;o<16;++o)t[n+o]=e[r]+e[o]}return t}();function J(e){return"undefined"==typeof BigInt?Z:e}function Z(){throw new Error("BigInt not supported")}},251:(e,t)=>{t.read=function(e,t,r,n,o){var s,i,a=8*o-n-1,u=(1<<a)-1,l=u>>1,c=-7,d=r?o-1:0,p=r?-1:1,f=e[t+d];for(d+=p,s=f&(1<<-c)-1,f>>=-c,c+=a;c>0;s=256*s+e[t+d],d+=p,c-=8);for(i=s&(1<<-c)-1,s>>=-c,c+=n;c>0;i=256*i+e[t+d],d+=p,c-=8);if(0===s)s=1-l;else{if(s===u)return i?NaN:1/0*(f?-1:1);i+=Math.pow(2,n),s-=l}return(f?-1:1)*i*Math.pow(2,s-n)},t.write=function(e,t,r,n,o,s){var i,a,u,l=8*s-o-1,c=(1<<l)-1,d=c>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:s-1,h=n?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,i=c):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+d>=1?p/u:p*Math.pow(2,1-d))*u>=2&&(i++,u/=2),i+d>=c?(a=0,i=c):i+d>=1?(a=(t*u-1)*Math.pow(2,o),i+=d):(a=t*Math.pow(2,d-1)*Math.pow(2,o),i=0));o>=8;e[r+f]=255&a,f+=h,a/=256,o-=8);for(i=i<<o|a,l+=o;l>0;e[r+f]=255&i,f+=h,i/=256,l-=8);e[r+f-h]|=128*y}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,r),s.exports}return r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(281)})(),e.exports=t()},"./node_modules/@stellar/stellar-base/lib/account.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Account=void 0;var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/util/bignumber.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/strkey.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,u(n.key),n)}}function u(e){var t=function(e,t){if("object"!=i(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==i(t)?t:t+""}t.Account=function(){return function(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(t,r){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),s.StrKey.isValidMed25519PublicKey(t))throw new Error("accountId is an M-address; use MuxedAccount instead");if(!s.StrKey.isValidEd25519PublicKey(t))throw new Error("accountId is invalid");if("string"!=typeof r)throw new Error("sequence must be of type string");this._accountId=t,this.sequence=new o.default(r)}),[{key:"accountId",value:function(){return this._accountId}},{key:"sequenceNumber",value:function(){return this.sequence.toString()}},{key:"incrementSequenceNumber",value:function(){this.sequence=this.sequence.plus(1)}}])}()},"./node_modules/@stellar/stellar-base/lib/address.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Address=void 0;var n,o=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),s=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n};function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,u(n.key),n)}}function u(e){var t=function(e,t){if("object"!=i(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==i(t)?t:t+""}t.Address=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o.StrKey.isValidEd25519PublicKey(t))this._type="account",this._key=o.StrKey.decodeEd25519PublicKey(t);else{if(!o.StrKey.isValidContract(t))throw new Error("Unsupported address type: ".concat(t));this._type="contract",this._key=o.StrKey.decodeContract(t)}}return function(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(e,[{key:"toString",value:function(){switch(this._type){case"account":return o.StrKey.encodeEd25519PublicKey(this._key);case"contract":return o.StrKey.encodeContract(this._key);default:throw new Error("Unsupported address type")}}},{key:"toScVal",value:function(){return s.default.ScVal.scvAddress(this.toScAddress())}},{key:"toScAddress",value:function(){switch(this._type){case"account":return s.default.ScAddress.scAddressTypeAccount(s.default.PublicKey.publicKeyTypeEd25519(this._key));case"contract":return s.default.ScAddress.scAddressTypeContract(this._key);default:throw new Error("Unsupported address type")}}},{key:"toBuffer",value:function(){return this._key}}],[{key:"fromString",value:function(t){return new e(t)}},{key:"account",value:function(t){return new e(o.StrKey.encodeEd25519PublicKey(t))}},{key:"contract",value:function(t){return new e(o.StrKey.encodeContract(t))}},{key:"fromScVal",value:function(t){return e.fromScAddress(t.address())}},{key:"fromScAddress",value:function(t){switch(t.switch()){case s.default.ScAddressType.scAddressTypeAccount():return e.account(t.accountId().ed25519());case s.default.ScAddressType.scAddressTypeContract():return e.contract(t.contractId());default:throw new Error("Unsupported address type")}}}])}()},"./node_modules/@stellar/stellar-base/lib/asset.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.Asset=void 0;var o,s=r("./node_modules/@stellar/stellar-base/lib/util/util.js"),i=(o=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&o.__esModule?o:{default:o},a=r("./node_modules/@stellar/stellar-base/lib/keypair.js"),u=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),l=r("./node_modules/@stellar/stellar-base/lib/hashing.js");function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,p(n.key),n)}}function p(e){var t=function(e,t){if("object"!=c(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=c(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==c(t)?t:t+""}t.Asset=function(){function e(t,r){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!/^[a-zA-Z0-9]{1,12}$/.test(t))throw new Error("Asset code is invalid (maximum alphanumeric, 12 characters at max)");if("xlm"!==String(t).toLowerCase()&&!r)throw new Error("Issuer cannot be null");if(r&&!u.StrKey.isValidEd25519PublicKey(r))throw new Error("Issuer is invalid");"xlm"===String(t).toLowerCase()?this.code="XLM":this.code=t,this.issuer=r}return function(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(e,[{key:"toXDRObject",value:function(){return this._toXDRObject(i.default.Asset)}},{key:"toChangeTrustXDRObject",value:function(){return this._toXDRObject(i.default.ChangeTrustAsset)}},{key:"toTrustLineXDRObject",value:function(){return this._toXDRObject(i.default.TrustLineAsset)}},{key:"contractId",value:function(e){var t=(0,l.hash)(n.from(e)),r=i.default.HashIdPreimage.envelopeTypeContractId(new i.default.HashIdPreimageContractId({networkId:t,contractIdPreimage:i.default.ContractIdPreimage.contractIdPreimageFromAsset(this.toXDRObject())}));return u.StrKey.encodeContract((0,l.hash)(r.toXDR()))}},{key:"_toXDRObject",value:function(){var e,t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i.default.Asset;if(this.isNative())return r.assetTypeNative();this.code.length<=4?(e=i.default.AlphaNum4,t="assetTypeCreditAlphanum4"):(e=i.default.AlphaNum12,t="assetTypeCreditAlphanum12");var n=this.code.length<=4?4:12;return new r(t,new e({assetCode:this.code.padEnd(n,"\0"),issuer:a.Keypair.fromPublicKey(this.issuer).xdrAccountId()}))}},{key:"getCode",value:function(){if(void 0!==this.code)return String(this.code)}},{key:"getIssuer",value:function(){if(void 0!==this.issuer)return String(this.issuer)}},{key:"getAssetType",value:function(){switch(this.getRawAssetType().value){case i.default.AssetType.assetTypeNative().value:return"native";case i.default.AssetType.assetTypeCreditAlphanum4().value:return"credit_alphanum4";case i.default.AssetType.assetTypeCreditAlphanum12().value:return"credit_alphanum12";default:return"unknown"}}},{key:"getRawAssetType",value:function(){return this.isNative()?i.default.AssetType.assetTypeNative():this.code.length<=4?i.default.AssetType.assetTypeCreditAlphanum4():i.default.AssetType.assetTypeCreditAlphanum12()}},{key:"isNative",value:function(){return!this.issuer}},{key:"equals",value:function(e){return this.code===e.getCode()&&this.issuer===e.getIssuer()}},{key:"toString",value:function(){return this.isNative()?"native":"".concat(this.getCode(),":").concat(this.getIssuer())}}],[{key:"native",value:function(){return new e("XLM")}},{key:"fromOperation",value:function(e){var t,r;switch(e.switch()){case i.default.AssetType.assetTypeNative():return this.native();case i.default.AssetType.assetTypeCreditAlphanum4():t=e.alphaNum4();case i.default.AssetType.assetTypeCreditAlphanum12():return t=t||e.alphaNum12(),r=u.StrKey.encodeEd25519PublicKey(t.issuer().ed25519()),new this((0,s.trimEnd)(t.assetCode(),"\0"),r);default:throw new Error("Invalid asset type: ".concat(e.switch().name))}}},{key:"compare",value:function(t,r){if(!(t&&t instanceof e))throw new Error("assetA is invalid");if(!(r&&r instanceof e))throw new Error("assetB is invalid");if(t.equals(r))return 0;var n=t.getRawAssetType().value,o=r.getRawAssetType().value;if(n!==o)return n<o?-1:1;var s=f(t.getCode(),r.getCode());return 0!==s?s:f(t.getIssuer(),r.getIssuer())}}])}();function f(e,t){return n.compare(n.from(e,"ascii"),n.from(t,"ascii"))}},"./node_modules/@stellar/stellar-base/lib/auth.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.authorizeEntry=y,t.authorizeInvocation=function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:u.Networks.FUTURENET,a=i.Keypair.random().rawPublicKey(),l=new s.default.Int64((p=a,p.subarray(0,8).reduce((function(e,t){return e<<8|t}),0))),d=n||e.publicKey();var p;if(!d)throw new Error("authorizeInvocation requires publicKey parameter");return y(new s.default.SorobanAuthorizationEntry({rootInvocation:r,credentials:s.default.SorobanCredentials.sorobanCredentialsAddress(new s.default.SorobanAddressCredentials({address:new c.Address(d).toScAddress(),nonce:l,signatureExpirationLedger:0,signature:s.default.ScVal.scvVec([])}))}),e,t,o)};var o,s=(o=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&o.__esModule?o:{default:o},i=r("./node_modules/@stellar/stellar-base/lib/keypair.js"),a=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),u=r("./node_modules/@stellar/stellar-base/lib/network.js"),l=r("./node_modules/@stellar/stellar-base/lib/hashing.js"),c=r("./node_modules/@stellar/stellar-base/lib/address.js"),d=r("./node_modules/@stellar/stellar-base/lib/scval.js");function p(e){return p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p(e)}function f(){f=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},s="function"==typeof Symbol?Symbol:{},i=s.iterator||"@@iterator",a=s.asyncIterator||"@@asyncIterator",u=s.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function c(e,t,r,n){var s=t&&t.prototype instanceof b?t:b,i=Object.create(s.prototype),a=new R(n||[]);return o(i,"_invoke",{value:P(e,r,a)}),i}function d(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=c;var h="suspendedStart",y="suspendedYield",m="executing",g="completed",v={};function b(){}function w(){}function S(){}var _={};l(_,i,(function(){return this}));var T=Object.getPrototypeOf,E=T&&T(T(B([])));E&&E!==r&&n.call(E,i)&&(_=E);var k=S.prototype=b.prototype=Object.create(_);function A(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function r(o,s,i,a){var u=d(e[o],e,s);if("throw"!==u.type){var l=u.arg,c=l.value;return c&&"object"==p(c)&&n.call(c,"__await")?t.resolve(c.__await).then((function(e){r("next",e,i,a)}),(function(e){r("throw",e,i,a)})):t.resolve(c).then((function(e){l.value=e,i(l)}),(function(e){return r("throw",e,i,a)}))}a(u.arg)}var s;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return s=s?s.then(o,o):o()}})}function P(t,r,n){var o=h;return function(s,i){if(o===m)throw Error("Generator is already running");if(o===g){if("throw"===s)throw i;return{value:e,done:!0}}for(n.method=s,n.arg=i;;){var a=n.delegate;if(a){var u=O(a,n);if(u){if(u===v)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=m;var l=d(t,r,n);if("normal"===l.type){if(o=n.done?g:y,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=g,n.method="throw",n.arg=l.arg)}}}function O(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,O(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),v;var s=d(o,t.iterator,r.arg);if("throw"===s.type)return r.method="throw",r.arg=s.arg,r.delegate=null,v;var i=s.arg;return i?i.done?(r[t.resultName]=i.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,v):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function I(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function R(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function B(t){if(t||""===t){var r=t[i];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,s=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return s.next=s}}throw new TypeError(p(t)+" is not iterable")}return w.prototype=S,o(k,"constructor",{value:S,configurable:!0}),o(S,"constructor",{value:w,configurable:!0}),w.displayName=l(S,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===w||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,S):(e.__proto__=S,l(e,u,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},A(x.prototype),l(x.prototype,a,(function(){return this})),t.AsyncIterator=x,t.async=function(e,r,n,o,s){void 0===s&&(s=Promise);var i=new x(c(e,r,n,o),s);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},A(k),l(k,u,"Generator"),l(k,i,(function(){return this})),l(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=B,R.prototype={constructor:R,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(I),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return a.type="throw",a.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var s=this.tryEntries.length-1;s>=0;--s){var i=this.tryEntries[s],a=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=n.call(i,"catchLoc"),l=n.call(i,"finallyLoc");if(u&&l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!l)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var s=o;break}}s&&("break"===e||"continue"===e)&&s.tryLoc<=t&&t<=s.finallyLoc&&(s=null);var i=s?s.completion:{};return i.type=e,i.arg=t,s?(this.method="next",this.next=s.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),I(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;I(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:B(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),v}},t}function h(e,t,r,n,o,s,i){try{var a=e[s](i),u=a.value}catch(e){return void r(e)}a.done?t(u):Promise.resolve(u).then(n,o)}function y(e,t,r){return m.apply(this,arguments)}function m(){var e;return e=f().mark((function e(t,r,o){var p,h,y,m,g,v,b,w,S,_=arguments;return f().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(p=_.length>3&&void 0!==_[3]?_[3]:u.Networks.FUTURENET,t.credentials().switch().value===s.default.SorobanCredentialsType.sorobanCredentialsAddress().value){e.next=3;break}return e.abrupt("return",t);case 3:if(h=s.default.SorobanAuthorizationEntry.fromXDR(t.toXDR()),(y=h.credentials().address()).signatureExpirationLedger(o),m=(0,l.hash)(n.from(p)),g=s.default.HashIdPreimage.envelopeTypeSorobanAuthorization(new s.default.HashIdPreimageSorobanAuthorization({networkId:m,nonce:y.nonce(),invocation:h.rootInvocation(),signatureExpirationLedger:y.signatureExpirationLedger()})),v=(0,l.hash)(g.toXDR()),"function"!=typeof r){e.next=18;break}return e.t0=n,e.next=13,r(g);case 13:e.t1=e.sent,b=e.t0.from.call(e.t0,e.t1),w=c.Address.fromScAddress(y.address()).toString(),e.next=20;break;case 18:b=n.from(r.sign(v)),w=r.publicKey();case 20:if(i.Keypair.fromPublicKey(w).verify(v,b)){e.next=22;break}throw new Error("signature doesn't match payload");case 22:return S=(0,d.nativeToScVal)({public_key:a.StrKey.decodeEd25519PublicKey(w),signature:b},{type:{public_key:["symbol",null],signature:["symbol",null]}}),y.signature(s.default.ScVal.scvVec([S])),e.abrupt("return",h);case 25:case"end":return e.stop()}}),e)})),m=function(){var t=this,r=arguments;return new Promise((function(n,o){var s=e.apply(t,r);function i(e){h(s,n,o,i,a,"next",e)}function a(e){h(s,n,o,i,a,"throw",e)}i(void 0)}))},m.apply(this,arguments)}},"./node_modules/@stellar/stellar-base/lib/claimant.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Claimant=void 0;var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/keypair.js"),i=r("./node_modules/@stellar/stellar-base/lib/strkey.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,l(n.key),n)}}function l(e){var t=function(e,t){if("object"!=a(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==a(t)?t:t+""}t.Claimant=function(){return function(e,t,r){return t&&u(e.prototype,t),r&&u(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(t,r){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t&&!i.StrKey.isValidEd25519PublicKey(t))throw new Error("Destination is invalid");if(this._destination=t,r){if(!(r instanceof o.default.ClaimPredicate))throw new Error("Predicate should be an xdr.ClaimPredicate");this._predicate=r}else this._predicate=o.default.ClaimPredicate.claimPredicateUnconditional()}),[{key:"toXDRObject",value:function(){var e=new o.default.ClaimantV0({destination:s.Keypair.fromPublicKey(this._destination).xdrAccountId(),predicate:this._predicate});return o.default.Claimant.claimantTypeV0(e)}},{key:"destination",get:function(){return this._destination},set:function(e){throw new Error("Claimant is immutable")}},{key:"predicate",get:function(){return this._predicate},set:function(e){throw new Error("Claimant is immutable")}}],[{key:"predicateUnconditional",value:function(){return o.default.ClaimPredicate.claimPredicateUnconditional()}},{key:"predicateAnd",value:function(e,t){if(!(e instanceof o.default.ClaimPredicate))throw new Error("left Predicate should be an xdr.ClaimPredicate");if(!(t instanceof o.default.ClaimPredicate))throw new Error("right Predicate should be an xdr.ClaimPredicate");return o.default.ClaimPredicate.claimPredicateAnd([e,t])}},{key:"predicateOr",value:function(e,t){if(!(e instanceof o.default.ClaimPredicate))throw new Error("left Predicate should be an xdr.ClaimPredicate");if(!(t instanceof o.default.ClaimPredicate))throw new Error("right Predicate should be an xdr.ClaimPredicate");return o.default.ClaimPredicate.claimPredicateOr([e,t])}},{key:"predicateNot",value:function(e){if(!(e instanceof o.default.ClaimPredicate))throw new Error("right Predicate should be an xdr.ClaimPredicate");return o.default.ClaimPredicate.claimPredicateNot(e)}},{key:"predicateBeforeAbsoluteTime",value:function(e){return o.default.ClaimPredicate.claimPredicateBeforeAbsoluteTime(o.default.Int64.fromString(e))}},{key:"predicateBeforeRelativeTime",value:function(e){return o.default.ClaimPredicate.claimPredicateBeforeRelativeTime(o.default.Int64.fromString(e))}},{key:"fromXDR",value:function(e){var t;if(e.switch()===o.default.ClaimantType.claimantTypeV0())return t=e.v0(),new this(i.StrKey.encodeEd25519PublicKey(t.destination().ed25519()),t.predicate());throw new Error("Invalid claimant type: ".concat(e.switch().name))}}])}()},"./node_modules/@stellar/stellar-base/lib/contract.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Contract=void 0;var n,o=r("./node_modules/@stellar/stellar-base/lib/address.js"),s=r("./node_modules/@stellar/stellar-base/lib/operation.js"),i=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},a=r("./node_modules/@stellar/stellar-base/lib/strkey.js");function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,c(n.key),n)}}function c(e){var t=function(e,t){if("object"!=u(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==u(t)?t:t+""}t.Contract=function(){return function(e,t,r){return t&&l(e.prototype,t),r&&l(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);try{this._id=a.StrKey.decodeContract(t)}catch(e){throw new Error("Invalid contract ID: ".concat(t))}}),[{key:"contractId",value:function(){return a.StrKey.encodeContract(this._id)}},{key:"toString",value:function(){return this.contractId()}},{key:"address",value:function(){return o.Address.contract(this._id)}},{key:"call",value:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return s.Operation.invokeContractFunction({contract:this.address().toString(),function:e,args:r})}},{key:"getFootprint",value:function(){return i.default.LedgerKey.contractData(new i.default.LedgerKeyContractData({contract:this.address().toScAddress(),key:i.default.ScVal.scvLedgerKeyContractInstance(),durability:i.default.ContractDataDurability.persistent()}))}}])}()},"./node_modules/@stellar/stellar-base/lib/events.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.humanizeEvents=function(e){return e.map((function(e){return e.inSuccessfulContractCall?l(e.event()):l(e)}))};var n=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),o=r("./node_modules/@stellar/stellar-base/lib/scval.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){u(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=s(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=s(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==s(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e){return a(a({},"function"==typeof e.contractId&&null!=e.contractId()&&{contractId:n.StrKey.encodeContract(e.contractId())}),{},{type:e.type().name,topics:e.body().value().topics().map((function(e){return(0,o.scValToNative)(e)})),data:(0,o.scValToNative)(e.body().value().data())})}},"./node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.FeeBumpTransaction=void 0;var s,i=(s=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&s.__esModule?s:{default:s},a=r("./node_modules/@stellar/stellar-base/lib/hashing.js"),u=r("./node_modules/@stellar/stellar-base/lib/transaction.js"),l=r("./node_modules/@stellar/stellar-base/lib/transaction_base.js"),c=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js");function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,p(n.key),n)}}function p(e){var t=function(e,t){if("object"!=o(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==o(t)?t:t+""}function f(e,t,r){return t=y(t),function(e,t){if(t&&("object"==o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,h()?Reflect.construct(t,r||[],y(e).constructor):t.apply(e,r))}function h(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(h=function(){return!!e})()}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}function m(e,t){return m=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},m(e,t)}t.FeeBumpTransaction=function(e){function t(e,r){var o;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),"string"==typeof e){var s=n.from(e,"base64");e=i.default.TransactionEnvelope.fromXDR(s)}var a=e.switch();if(a!==i.default.EnvelopeType.envelopeTypeTxFeeBump())throw new Error("Invalid TransactionEnvelope: expected an envelopeTypeTxFeeBump but received an ".concat(a.name,"."));var l=e.value(),d=l.tx(),p=d.fee().toString();o=f(this,t,[d,(l.signatures()||[]).slice(),p,r]);var h=i.default.TransactionEnvelope.envelopeTypeTx(d.innerTx().v1());return o._feeSource=(0,c.encodeMuxedAccountToAddress)(o.tx.feeSource()),o._innerTransaction=new u.Transaction(h,r),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&m(e,t)}(t,e),function(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(t,[{key:"innerTransaction",get:function(){return this._innerTransaction}},{key:"operations",get:function(){return this._innerTransaction.operations}},{key:"feeSource",get:function(){return this._feeSource}},{key:"signatureBase",value:function(){var e=new i.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTxFeeBump(this.tx);return new i.default.TransactionSignaturePayload({networkId:i.default.Hash.fromXDR((0,a.hash)(this.networkPassphrase)),taggedTransaction:e}).toXDR()}},{key:"toEnvelope",value:function(){var e=new i.default.FeeBumpTransactionEnvelope({tx:i.default.FeeBumpTransaction.fromXDR(this.tx.toXDR()),signatures:this.signatures.slice()});return new i.default.TransactionEnvelope.envelopeTypeTxFeeBump(e)}}])}(l.TransactionBase)},"./node_modules/@stellar/stellar-base/lib/generated/curr_generated.js":(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function o(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(o=function(e){return e?r:t})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var s=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=n(e)&&"function"!=typeof e)return{default:e};var r=o(t);if(r&&r.has(e))return r.get(e);var s={__proto__:null},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in e)if("default"!==a&&{}.hasOwnProperty.call(e,a)){var u=i?Object.getOwnPropertyDescriptor(e,a):null;u&&(u.get||u.set)?Object.defineProperty(s,a,u):s[a]=e[a]}return s.default=e,r&&r.set(e,s),s}(r("./node_modules/@stellar/js-xdr/dist/xdr.js")).config((function(e){var t=1024;e.typedef("Value",e.varOpaque()),e.struct("ScpBallot",[["counter",e.lookup("Uint32")],["value",e.lookup("Value")]]),e.enum("ScpStatementType",{scpStPrepare:0,scpStConfirm:1,scpStExternalize:2,scpStNominate:3}),e.struct("ScpNomination",[["quorumSetHash",e.lookup("Hash")],["votes",e.varArray(e.lookup("Value"),2147483647)],["accepted",e.varArray(e.lookup("Value"),2147483647)]]),e.struct("ScpStatementPrepare",[["quorumSetHash",e.lookup("Hash")],["ballot",e.lookup("ScpBallot")],["prepared",e.option(e.lookup("ScpBallot"))],["preparedPrime",e.option(e.lookup("ScpBallot"))],["nC",e.lookup("Uint32")],["nH",e.lookup("Uint32")]]),e.struct("ScpStatementConfirm",[["ballot",e.lookup("ScpBallot")],["nPrepared",e.lookup("Uint32")],["nCommit",e.lookup("Uint32")],["nH",e.lookup("Uint32")],["quorumSetHash",e.lookup("Hash")]]),e.struct("ScpStatementExternalize",[["commit",e.lookup("ScpBallot")],["nH",e.lookup("Uint32")],["commitQuorumSetHash",e.lookup("Hash")]]),e.union("ScpStatementPledges",{switchOn:e.lookup("ScpStatementType"),switchName:"type",switches:[["scpStPrepare","prepare"],["scpStConfirm","confirm"],["scpStExternalize","externalize"],["scpStNominate","nominate"]],arms:{prepare:e.lookup("ScpStatementPrepare"),confirm:e.lookup("ScpStatementConfirm"),externalize:e.lookup("ScpStatementExternalize"),nominate:e.lookup("ScpNomination")}}),e.struct("ScpStatement",[["nodeId",e.lookup("NodeId")],["slotIndex",e.lookup("Uint64")],["pledges",e.lookup("ScpStatementPledges")]]),e.struct("ScpEnvelope",[["statement",e.lookup("ScpStatement")],["signature",e.lookup("Signature")]]),e.struct("ScpQuorumSet",[["threshold",e.lookup("Uint32")],["validators",e.varArray(e.lookup("NodeId"),2147483647)],["innerSets",e.varArray(e.lookup("ScpQuorumSet"),2147483647)]]),e.typedef("Thresholds",e.opaque(4)),e.typedef("String32",e.string(32)),e.typedef("String64",e.string(64)),e.typedef("SequenceNumber",e.lookup("Int64")),e.typedef("DataValue",e.varOpaque(64)),e.typedef("PoolId",e.lookup("Hash")),e.typedef("AssetCode4",e.opaque(4)),e.typedef("AssetCode12",e.opaque(12)),e.enum("AssetType",{assetTypeNative:0,assetTypeCreditAlphanum4:1,assetTypeCreditAlphanum12:2,assetTypePoolShare:3}),e.union("AssetCode",{switchOn:e.lookup("AssetType"),switchName:"type",switches:[["assetTypeCreditAlphanum4","assetCode4"],["assetTypeCreditAlphanum12","assetCode12"]],arms:{assetCode4:e.lookup("AssetCode4"),assetCode12:e.lookup("AssetCode12")}}),e.struct("AlphaNum4",[["assetCode",e.lookup("AssetCode4")],["issuer",e.lookup("AccountId")]]),e.struct("AlphaNum12",[["assetCode",e.lookup("AssetCode12")],["issuer",e.lookup("AccountId")]]),e.union("Asset",{switchOn:e.lookup("AssetType"),switchName:"type",switches:[["assetTypeNative",e.void()],["assetTypeCreditAlphanum4","alphaNum4"],["assetTypeCreditAlphanum12","alphaNum12"]],arms:{alphaNum4:e.lookup("AlphaNum4"),alphaNum12:e.lookup("AlphaNum12")}}),e.struct("Price",[["n",e.lookup("Int32")],["d",e.lookup("Int32")]]),e.struct("Liabilities",[["buying",e.lookup("Int64")],["selling",e.lookup("Int64")]]),e.enum("ThresholdIndices",{thresholdMasterWeight:0,thresholdLow:1,thresholdMed:2,thresholdHigh:3}),e.enum("LedgerEntryType",{account:0,trustline:1,offer:2,data:3,claimableBalance:4,liquidityPool:5,contractData:6,contractCode:7,configSetting:8,ttl:9}),e.struct("Signer",[["key",e.lookup("SignerKey")],["weight",e.lookup("Uint32")]]),e.enum("AccountFlags",{authRequiredFlag:1,authRevocableFlag:2,authImmutableFlag:4,authClawbackEnabledFlag:8}),e.const("MASK_ACCOUNT_FLAGS",7),e.const("MASK_ACCOUNT_FLAGS_V17",15),e.const("MAX_SIGNERS",20),e.typedef("SponsorshipDescriptor",e.option(e.lookup("AccountId"))),e.struct("AccountEntryExtensionV3",[["ext",e.lookup("ExtensionPoint")],["seqLedger",e.lookup("Uint32")],["seqTime",e.lookup("TimePoint")]]),e.union("AccountEntryExtensionV2Ext",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[3,"v3"]],arms:{v3:e.lookup("AccountEntryExtensionV3")}}),e.struct("AccountEntryExtensionV2",[["numSponsored",e.lookup("Uint32")],["numSponsoring",e.lookup("Uint32")],["signerSponsoringIDs",e.varArray(e.lookup("SponsorshipDescriptor"),e.lookup("MAX_SIGNERS"))],["ext",e.lookup("AccountEntryExtensionV2Ext")]]),e.union("AccountEntryExtensionV1Ext",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[2,"v2"]],arms:{v2:e.lookup("AccountEntryExtensionV2")}}),e.struct("AccountEntryExtensionV1",[["liabilities",e.lookup("Liabilities")],["ext",e.lookup("AccountEntryExtensionV1Ext")]]),e.union("AccountEntryExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"v1"]],arms:{v1:e.lookup("AccountEntryExtensionV1")}}),e.struct("AccountEntry",[["accountId",e.lookup("AccountId")],["balance",e.lookup("Int64")],["seqNum",e.lookup("SequenceNumber")],["numSubEntries",e.lookup("Uint32")],["inflationDest",e.option(e.lookup("AccountId"))],["flags",e.lookup("Uint32")],["homeDomain",e.lookup("String32")],["thresholds",e.lookup("Thresholds")],["signers",e.varArray(e.lookup("Signer"),e.lookup("MAX_SIGNERS"))],["ext",e.lookup("AccountEntryExt")]]),e.enum("TrustLineFlags",{authorizedFlag:1,authorizedToMaintainLiabilitiesFlag:2,trustlineClawbackEnabledFlag:4}),e.const("MASK_TRUSTLINE_FLAGS",1),e.const("MASK_TRUSTLINE_FLAGS_V13",3),e.const("MASK_TRUSTLINE_FLAGS_V17",7),e.enum("LiquidityPoolType",{liquidityPoolConstantProduct:0}),e.union("TrustLineAsset",{switchOn:e.lookup("AssetType"),switchName:"type",switches:[["assetTypeNative",e.void()],["assetTypeCreditAlphanum4","alphaNum4"],["assetTypeCreditAlphanum12","alphaNum12"],["assetTypePoolShare","liquidityPoolId"]],arms:{alphaNum4:e.lookup("AlphaNum4"),alphaNum12:e.lookup("AlphaNum12"),liquidityPoolId:e.lookup("PoolId")}}),e.union("TrustLineEntryExtensionV2Ext",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("TrustLineEntryExtensionV2",[["liquidityPoolUseCount",e.lookup("Int32")],["ext",e.lookup("TrustLineEntryExtensionV2Ext")]]),e.union("TrustLineEntryV1Ext",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[2,"v2"]],arms:{v2:e.lookup("TrustLineEntryExtensionV2")}}),e.struct("TrustLineEntryV1",[["liabilities",e.lookup("Liabilities")],["ext",e.lookup("TrustLineEntryV1Ext")]]),e.union("TrustLineEntryExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"v1"]],arms:{v1:e.lookup("TrustLineEntryV1")}}),e.struct("TrustLineEntry",[["accountId",e.lookup("AccountId")],["asset",e.lookup("TrustLineAsset")],["balance",e.lookup("Int64")],["limit",e.lookup("Int64")],["flags",e.lookup("Uint32")],["ext",e.lookup("TrustLineEntryExt")]]),e.enum("OfferEntryFlags",{passiveFlag:1}),e.const("MASK_OFFERENTRY_FLAGS",1),e.union("OfferEntryExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("OfferEntry",[["sellerId",e.lookup("AccountId")],["offerId",e.lookup("Int64")],["selling",e.lookup("Asset")],["buying",e.lookup("Asset")],["amount",e.lookup("Int64")],["price",e.lookup("Price")],["flags",e.lookup("Uint32")],["ext",e.lookup("OfferEntryExt")]]),e.union("DataEntryExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("DataEntry",[["accountId",e.lookup("AccountId")],["dataName",e.lookup("String64")],["dataValue",e.lookup("DataValue")],["ext",e.lookup("DataEntryExt")]]),e.enum("ClaimPredicateType",{claimPredicateUnconditional:0,claimPredicateAnd:1,claimPredicateOr:2,claimPredicateNot:3,claimPredicateBeforeAbsoluteTime:4,claimPredicateBeforeRelativeTime:5}),e.union("ClaimPredicate",{switchOn:e.lookup("ClaimPredicateType"),switchName:"type",switches:[["claimPredicateUnconditional",e.void()],["claimPredicateAnd","andPredicates"],["claimPredicateOr","orPredicates"],["claimPredicateNot","notPredicate"],["claimPredicateBeforeAbsoluteTime","absBefore"],["claimPredicateBeforeRelativeTime","relBefore"]],arms:{andPredicates:e.varArray(e.lookup("ClaimPredicate"),2),orPredicates:e.varArray(e.lookup("ClaimPredicate"),2),notPredicate:e.option(e.lookup("ClaimPredicate")),absBefore:e.lookup("Int64"),relBefore:e.lookup("Int64")}}),e.enum("ClaimantType",{claimantTypeV0:0}),e.struct("ClaimantV0",[["destination",e.lookup("AccountId")],["predicate",e.lookup("ClaimPredicate")]]),e.union("Claimant",{switchOn:e.lookup("ClaimantType"),switchName:"type",switches:[["claimantTypeV0","v0"]],arms:{v0:e.lookup("ClaimantV0")}}),e.enum("ClaimableBalanceIdType",{claimableBalanceIdTypeV0:0}),e.union("ClaimableBalanceId",{switchOn:e.lookup("ClaimableBalanceIdType"),switchName:"type",switches:[["claimableBalanceIdTypeV0","v0"]],arms:{v0:e.lookup("Hash")}}),e.enum("ClaimableBalanceFlags",{claimableBalanceClawbackEnabledFlag:1}),e.const("MASK_CLAIMABLE_BALANCE_FLAGS",1),e.union("ClaimableBalanceEntryExtensionV1Ext",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("ClaimableBalanceEntryExtensionV1",[["ext",e.lookup("ClaimableBalanceEntryExtensionV1Ext")],["flags",e.lookup("Uint32")]]),e.union("ClaimableBalanceEntryExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"v1"]],arms:{v1:e.lookup("ClaimableBalanceEntryExtensionV1")}}),e.struct("ClaimableBalanceEntry",[["balanceId",e.lookup("ClaimableBalanceId")],["claimants",e.varArray(e.lookup("Claimant"),10)],["asset",e.lookup("Asset")],["amount",e.lookup("Int64")],["ext",e.lookup("ClaimableBalanceEntryExt")]]),e.struct("LiquidityPoolConstantProductParameters",[["assetA",e.lookup("Asset")],["assetB",e.lookup("Asset")],["fee",e.lookup("Int32")]]),e.struct("LiquidityPoolEntryConstantProduct",[["params",e.lookup("LiquidityPoolConstantProductParameters")],["reserveA",e.lookup("Int64")],["reserveB",e.lookup("Int64")],["totalPoolShares",e.lookup("Int64")],["poolSharesTrustLineCount",e.lookup("Int64")]]),e.union("LiquidityPoolEntryBody",{switchOn:e.lookup("LiquidityPoolType"),switchName:"type",switches:[["liquidityPoolConstantProduct","constantProduct"]],arms:{constantProduct:e.lookup("LiquidityPoolEntryConstantProduct")}}),e.struct("LiquidityPoolEntry",[["liquidityPoolId",e.lookup("PoolId")],["body",e.lookup("LiquidityPoolEntryBody")]]),e.enum("ContractDataDurability",{temporary:0,persistent:1}),e.struct("ContractDataEntry",[["ext",e.lookup("ExtensionPoint")],["contract",e.lookup("ScAddress")],["key",e.lookup("ScVal")],["durability",e.lookup("ContractDataDurability")],["val",e.lookup("ScVal")]]),e.struct("ContractCodeCostInputs",[["ext",e.lookup("ExtensionPoint")],["nInstructions",e.lookup("Uint32")],["nFunctions",e.lookup("Uint32")],["nGlobals",e.lookup("Uint32")],["nTableEntries",e.lookup("Uint32")],["nTypes",e.lookup("Uint32")],["nDataSegments",e.lookup("Uint32")],["nElemSegments",e.lookup("Uint32")],["nImports",e.lookup("Uint32")],["nExports",e.lookup("Uint32")],["nDataSegmentBytes",e.lookup("Uint32")]]),e.struct("ContractCodeEntryV1",[["ext",e.lookup("ExtensionPoint")],["costInputs",e.lookup("ContractCodeCostInputs")]]),e.union("ContractCodeEntryExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"v1"]],arms:{v1:e.lookup("ContractCodeEntryV1")}}),e.struct("ContractCodeEntry",[["ext",e.lookup("ContractCodeEntryExt")],["hash",e.lookup("Hash")],["code",e.varOpaque()]]),e.struct("TtlEntry",[["keyHash",e.lookup("Hash")],["liveUntilLedgerSeq",e.lookup("Uint32")]]),e.union("LedgerEntryExtensionV1Ext",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("LedgerEntryExtensionV1",[["sponsoringId",e.lookup("SponsorshipDescriptor")],["ext",e.lookup("LedgerEntryExtensionV1Ext")]]),e.union("LedgerEntryData",{switchOn:e.lookup("LedgerEntryType"),switchName:"type",switches:[["account","account"],["trustline","trustLine"],["offer","offer"],["data","data"],["claimableBalance","claimableBalance"],["liquidityPool","liquidityPool"],["contractData","contractData"],["contractCode","contractCode"],["configSetting","configSetting"],["ttl","ttl"]],arms:{account:e.lookup("AccountEntry"),trustLine:e.lookup("TrustLineEntry"),offer:e.lookup("OfferEntry"),data:e.lookup("DataEntry"),claimableBalance:e.lookup("ClaimableBalanceEntry"),liquidityPool:e.lookup("LiquidityPoolEntry"),contractData:e.lookup("ContractDataEntry"),contractCode:e.lookup("ContractCodeEntry"),configSetting:e.lookup("ConfigSettingEntry"),ttl:e.lookup("TtlEntry")}}),e.union("LedgerEntryExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"v1"]],arms:{v1:e.lookup("LedgerEntryExtensionV1")}}),e.struct("LedgerEntry",[["lastModifiedLedgerSeq",e.lookup("Uint32")],["data",e.lookup("LedgerEntryData")],["ext",e.lookup("LedgerEntryExt")]]),e.struct("LedgerKeyAccount",[["accountId",e.lookup("AccountId")]]),e.struct("LedgerKeyTrustLine",[["accountId",e.lookup("AccountId")],["asset",e.lookup("TrustLineAsset")]]),e.struct("LedgerKeyOffer",[["sellerId",e.lookup("AccountId")],["offerId",e.lookup("Int64")]]),e.struct("LedgerKeyData",[["accountId",e.lookup("AccountId")],["dataName",e.lookup("String64")]]),e.struct("LedgerKeyClaimableBalance",[["balanceId",e.lookup("ClaimableBalanceId")]]),e.struct("LedgerKeyLiquidityPool",[["liquidityPoolId",e.lookup("PoolId")]]),e.struct("LedgerKeyContractData",[["contract",e.lookup("ScAddress")],["key",e.lookup("ScVal")],["durability",e.lookup("ContractDataDurability")]]),e.struct("LedgerKeyContractCode",[["hash",e.lookup("Hash")]]),e.struct("LedgerKeyConfigSetting",[["configSettingId",e.lookup("ConfigSettingId")]]),e.struct("LedgerKeyTtl",[["keyHash",e.lookup("Hash")]]),e.union("LedgerKey",{switchOn:e.lookup("LedgerEntryType"),switchName:"type",switches:[["account","account"],["trustline","trustLine"],["offer","offer"],["data","data"],["claimableBalance","claimableBalance"],["liquidityPool","liquidityPool"],["contractData","contractData"],["contractCode","contractCode"],["configSetting","configSetting"],["ttl","ttl"]],arms:{account:e.lookup("LedgerKeyAccount"),trustLine:e.lookup("LedgerKeyTrustLine"),offer:e.lookup("LedgerKeyOffer"),data:e.lookup("LedgerKeyData"),claimableBalance:e.lookup("LedgerKeyClaimableBalance"),liquidityPool:e.lookup("LedgerKeyLiquidityPool"),contractData:e.lookup("LedgerKeyContractData"),contractCode:e.lookup("LedgerKeyContractCode"),configSetting:e.lookup("LedgerKeyConfigSetting"),ttl:e.lookup("LedgerKeyTtl")}}),e.enum("EnvelopeType",{envelopeTypeTxV0:0,envelopeTypeScp:1,envelopeTypeTx:2,envelopeTypeAuth:3,envelopeTypeScpvalue:4,envelopeTypeTxFeeBump:5,envelopeTypeOpId:6,envelopeTypePoolRevokeOpId:7,envelopeTypeContractId:8,envelopeTypeSorobanAuthorization:9}),e.enum("BucketListType",{live:0,hotArchive:1,coldArchive:2}),e.enum("BucketEntryType",{metaentry:-1,liveentry:0,deadentry:1,initentry:2}),e.enum("HotArchiveBucketEntryType",{hotArchiveMetaentry:-1,hotArchiveArchived:0,hotArchiveLive:1,hotArchiveDeleted:2}),e.enum("ColdArchiveBucketEntryType",{coldArchiveMetaentry:-1,coldArchiveArchivedLeaf:0,coldArchiveDeletedLeaf:1,coldArchiveBoundaryLeaf:2,coldArchiveHash:3}),e.union("BucketMetadataExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"bucketListType"]],arms:{bucketListType:e.lookup("BucketListType")}}),e.struct("BucketMetadata",[["ledgerVersion",e.lookup("Uint32")],["ext",e.lookup("BucketMetadataExt")]]),e.union("BucketEntry",{switchOn:e.lookup("BucketEntryType"),switchName:"type",switches:[["liveentry","liveEntry"],["initentry","liveEntry"],["deadentry","deadEntry"],["metaentry","metaEntry"]],arms:{liveEntry:e.lookup("LedgerEntry"),deadEntry:e.lookup("LedgerKey"),metaEntry:e.lookup("BucketMetadata")}}),e.union("HotArchiveBucketEntry",{switchOn:e.lookup("HotArchiveBucketEntryType"),switchName:"type",switches:[["hotArchiveArchived","archivedEntry"],["hotArchiveLive","key"],["hotArchiveDeleted","key"],["hotArchiveMetaentry","metaEntry"]],arms:{archivedEntry:e.lookup("LedgerEntry"),key:e.lookup("LedgerKey"),metaEntry:e.lookup("BucketMetadata")}}),e.struct("ColdArchiveArchivedLeaf",[["index",e.lookup("Uint32")],["archivedEntry",e.lookup("LedgerEntry")]]),e.struct("ColdArchiveDeletedLeaf",[["index",e.lookup("Uint32")],["deletedKey",e.lookup("LedgerKey")]]),e.struct("ColdArchiveBoundaryLeaf",[["index",e.lookup("Uint32")],["isLowerBound",e.bool()]]),e.struct("ColdArchiveHashEntry",[["index",e.lookup("Uint32")],["level",e.lookup("Uint32")],["hash",e.lookup("Hash")]]),e.union("ColdArchiveBucketEntry",{switchOn:e.lookup("ColdArchiveBucketEntryType"),switchName:"type",switches:[["coldArchiveMetaentry","metaEntry"],["coldArchiveArchivedLeaf","archivedLeaf"],["coldArchiveDeletedLeaf","deletedLeaf"],["coldArchiveBoundaryLeaf","boundaryLeaf"],["coldArchiveHash","hashEntry"]],arms:{metaEntry:e.lookup("BucketMetadata"),archivedLeaf:e.lookup("ColdArchiveArchivedLeaf"),deletedLeaf:e.lookup("ColdArchiveDeletedLeaf"),boundaryLeaf:e.lookup("ColdArchiveBoundaryLeaf"),hashEntry:e.lookup("ColdArchiveHashEntry")}}),e.typedef("UpgradeType",e.varOpaque(128)),e.enum("StellarValueType",{stellarValueBasic:0,stellarValueSigned:1}),e.struct("LedgerCloseValueSignature",[["nodeId",e.lookup("NodeId")],["signature",e.lookup("Signature")]]),e.union("StellarValueExt",{switchOn:e.lookup("StellarValueType"),switchName:"v",switches:[["stellarValueBasic",e.void()],["stellarValueSigned","lcValueSignature"]],arms:{lcValueSignature:e.lookup("LedgerCloseValueSignature")}}),e.struct("StellarValue",[["txSetHash",e.lookup("Hash")],["closeTime",e.lookup("TimePoint")],["upgrades",e.varArray(e.lookup("UpgradeType"),6)],["ext",e.lookup("StellarValueExt")]]),e.const("MASK_LEDGER_HEADER_FLAGS",7),e.enum("LedgerHeaderFlags",{disableLiquidityPoolTradingFlag:1,disableLiquidityPoolDepositFlag:2,disableLiquidityPoolWithdrawalFlag:4}),e.union("LedgerHeaderExtensionV1Ext",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("LedgerHeaderExtensionV1",[["flags",e.lookup("Uint32")],["ext",e.lookup("LedgerHeaderExtensionV1Ext")]]),e.union("LedgerHeaderExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"v1"]],arms:{v1:e.lookup("LedgerHeaderExtensionV1")}}),e.struct("LedgerHeader",[["ledgerVersion",e.lookup("Uint32")],["previousLedgerHash",e.lookup("Hash")],["scpValue",e.lookup("StellarValue")],["txSetResultHash",e.lookup("Hash")],["bucketListHash",e.lookup("Hash")],["ledgerSeq",e.lookup("Uint32")],["totalCoins",e.lookup("Int64")],["feePool",e.lookup("Int64")],["inflationSeq",e.lookup("Uint32")],["idPool",e.lookup("Uint64")],["baseFee",e.lookup("Uint32")],["baseReserve",e.lookup("Uint32")],["maxTxSetSize",e.lookup("Uint32")],["skipList",e.array(e.lookup("Hash"),4)],["ext",e.lookup("LedgerHeaderExt")]]),e.enum("LedgerUpgradeType",{ledgerUpgradeVersion:1,ledgerUpgradeBaseFee:2,ledgerUpgradeMaxTxSetSize:3,ledgerUpgradeBaseReserve:4,ledgerUpgradeFlags:5,ledgerUpgradeConfig:6,ledgerUpgradeMaxSorobanTxSetSize:7}),e.struct("ConfigUpgradeSetKey",[["contractId",e.lookup("Hash")],["contentHash",e.lookup("Hash")]]),e.union("LedgerUpgrade",{switchOn:e.lookup("LedgerUpgradeType"),switchName:"type",switches:[["ledgerUpgradeVersion","newLedgerVersion"],["ledgerUpgradeBaseFee","newBaseFee"],["ledgerUpgradeMaxTxSetSize","newMaxTxSetSize"],["ledgerUpgradeBaseReserve","newBaseReserve"],["ledgerUpgradeFlags","newFlags"],["ledgerUpgradeConfig","newConfig"],["ledgerUpgradeMaxSorobanTxSetSize","newMaxSorobanTxSetSize"]],arms:{newLedgerVersion:e.lookup("Uint32"),newBaseFee:e.lookup("Uint32"),newMaxTxSetSize:e.lookup("Uint32"),newBaseReserve:e.lookup("Uint32"),newFlags:e.lookup("Uint32"),newConfig:e.lookup("ConfigUpgradeSetKey"),newMaxSorobanTxSetSize:e.lookup("Uint32")}}),e.struct("ConfigUpgradeSet",[["updatedEntry",e.varArray(e.lookup("ConfigSettingEntry"),2147483647)]]),e.enum("TxSetComponentType",{txsetCompTxsMaybeDiscountedFee:0}),e.struct("TxSetComponentTxsMaybeDiscountedFee",[["baseFee",e.option(e.lookup("Int64"))],["txes",e.varArray(e.lookup("TransactionEnvelope"),2147483647)]]),e.union("TxSetComponent",{switchOn:e.lookup("TxSetComponentType"),switchName:"type",switches:[["txsetCompTxsMaybeDiscountedFee","txsMaybeDiscountedFee"]],arms:{txsMaybeDiscountedFee:e.lookup("TxSetComponentTxsMaybeDiscountedFee")}}),e.union("TransactionPhase",{switchOn:e.int(),switchName:"v",switches:[[0,"v0Components"]],arms:{v0Components:e.varArray(e.lookup("TxSetComponent"),2147483647)}}),e.struct("TransactionSet",[["previousLedgerHash",e.lookup("Hash")],["txes",e.varArray(e.lookup("TransactionEnvelope"),2147483647)]]),e.struct("TransactionSetV1",[["previousLedgerHash",e.lookup("Hash")],["phases",e.varArray(e.lookup("TransactionPhase"),2147483647)]]),e.union("GeneralizedTransactionSet",{switchOn:e.int(),switchName:"v",switches:[[1,"v1TxSet"]],arms:{v1TxSet:e.lookup("TransactionSetV1")}}),e.struct("TransactionResultPair",[["transactionHash",e.lookup("Hash")],["result",e.lookup("TransactionResult")]]),e.struct("TransactionResultSet",[["results",e.varArray(e.lookup("TransactionResultPair"),2147483647)]]),e.union("TransactionHistoryEntryExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"generalizedTxSet"]],arms:{generalizedTxSet:e.lookup("GeneralizedTransactionSet")}}),e.struct("TransactionHistoryEntry",[["ledgerSeq",e.lookup("Uint32")],["txSet",e.lookup("TransactionSet")],["ext",e.lookup("TransactionHistoryEntryExt")]]),e.union("TransactionHistoryResultEntryExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("TransactionHistoryResultEntry",[["ledgerSeq",e.lookup("Uint32")],["txResultSet",e.lookup("TransactionResultSet")],["ext",e.lookup("TransactionHistoryResultEntryExt")]]),e.union("LedgerHeaderHistoryEntryExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("LedgerHeaderHistoryEntry",[["hash",e.lookup("Hash")],["header",e.lookup("LedgerHeader")],["ext",e.lookup("LedgerHeaderHistoryEntryExt")]]),e.struct("LedgerScpMessages",[["ledgerSeq",e.lookup("Uint32")],["messages",e.varArray(e.lookup("ScpEnvelope"),2147483647)]]),e.struct("ScpHistoryEntryV0",[["quorumSets",e.varArray(e.lookup("ScpQuorumSet"),2147483647)],["ledgerMessages",e.lookup("LedgerScpMessages")]]),e.union("ScpHistoryEntry",{switchOn:e.int(),switchName:"v",switches:[[0,"v0"]],arms:{v0:e.lookup("ScpHistoryEntryV0")}}),e.enum("LedgerEntryChangeType",{ledgerEntryCreated:0,ledgerEntryUpdated:1,ledgerEntryRemoved:2,ledgerEntryState:3}),e.union("LedgerEntryChange",{switchOn:e.lookup("LedgerEntryChangeType"),switchName:"type",switches:[["ledgerEntryCreated","created"],["ledgerEntryUpdated","updated"],["ledgerEntryRemoved","removed"],["ledgerEntryState","state"]],arms:{created:e.lookup("LedgerEntry"),updated:e.lookup("LedgerEntry"),removed:e.lookup("LedgerKey"),state:e.lookup("LedgerEntry")}}),e.typedef("LedgerEntryChanges",e.varArray(e.lookup("LedgerEntryChange"),2147483647)),e.struct("OperationMeta",[["changes",e.lookup("LedgerEntryChanges")]]),e.struct("TransactionMetaV1",[["txChanges",e.lookup("LedgerEntryChanges")],["operations",e.varArray(e.lookup("OperationMeta"),2147483647)]]),e.struct("TransactionMetaV2",[["txChangesBefore",e.lookup("LedgerEntryChanges")],["operations",e.varArray(e.lookup("OperationMeta"),2147483647)],["txChangesAfter",e.lookup("LedgerEntryChanges")]]),e.enum("ContractEventType",{system:0,contract:1,diagnostic:2}),e.struct("ContractEventV0",[["topics",e.varArray(e.lookup("ScVal"),2147483647)],["data",e.lookup("ScVal")]]),e.union("ContractEventBody",{switchOn:e.int(),switchName:"v",switches:[[0,"v0"]],arms:{v0:e.lookup("ContractEventV0")}}),e.struct("ContractEvent",[["ext",e.lookup("ExtensionPoint")],["contractId",e.option(e.lookup("Hash"))],["type",e.lookup("ContractEventType")],["body",e.lookup("ContractEventBody")]]),e.struct("DiagnosticEvent",[["inSuccessfulContractCall",e.bool()],["event",e.lookup("ContractEvent")]]),e.typedef("DiagnosticEvents",e.varArray(e.lookup("DiagnosticEvent"),2147483647)),e.struct("SorobanTransactionMetaExtV1",[["ext",e.lookup("ExtensionPoint")],["totalNonRefundableResourceFeeCharged",e.lookup("Int64")],["totalRefundableResourceFeeCharged",e.lookup("Int64")],["rentFeeCharged",e.lookup("Int64")]]),e.union("SorobanTransactionMetaExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"v1"]],arms:{v1:e.lookup("SorobanTransactionMetaExtV1")}}),e.struct("SorobanTransactionMeta",[["ext",e.lookup("SorobanTransactionMetaExt")],["events",e.varArray(e.lookup("ContractEvent"),2147483647)],["returnValue",e.lookup("ScVal")],["diagnosticEvents",e.varArray(e.lookup("DiagnosticEvent"),2147483647)]]),e.struct("TransactionMetaV3",[["ext",e.lookup("ExtensionPoint")],["txChangesBefore",e.lookup("LedgerEntryChanges")],["operations",e.varArray(e.lookup("OperationMeta"),2147483647)],["txChangesAfter",e.lookup("LedgerEntryChanges")],["sorobanMeta",e.option(e.lookup("SorobanTransactionMeta"))]]),e.struct("InvokeHostFunctionSuccessPreImage",[["returnValue",e.lookup("ScVal")],["events",e.varArray(e.lookup("ContractEvent"),2147483647)]]),e.union("TransactionMeta",{switchOn:e.int(),switchName:"v",switches:[[0,"operations"],[1,"v1"],[2,"v2"],[3,"v3"]],arms:{operations:e.varArray(e.lookup("OperationMeta"),2147483647),v1:e.lookup("TransactionMetaV1"),v2:e.lookup("TransactionMetaV2"),v3:e.lookup("TransactionMetaV3")}}),e.struct("TransactionResultMeta",[["result",e.lookup("TransactionResultPair")],["feeProcessing",e.lookup("LedgerEntryChanges")],["txApplyProcessing",e.lookup("TransactionMeta")]]),e.struct("UpgradeEntryMeta",[["upgrade",e.lookup("LedgerUpgrade")],["changes",e.lookup("LedgerEntryChanges")]]),e.struct("LedgerCloseMetaV0",[["ledgerHeader",e.lookup("LedgerHeaderHistoryEntry")],["txSet",e.lookup("TransactionSet")],["txProcessing",e.varArray(e.lookup("TransactionResultMeta"),2147483647)],["upgradesProcessing",e.varArray(e.lookup("UpgradeEntryMeta"),2147483647)],["scpInfo",e.varArray(e.lookup("ScpHistoryEntry"),2147483647)]]),e.struct("LedgerCloseMetaExtV1",[["ext",e.lookup("ExtensionPoint")],["sorobanFeeWrite1Kb",e.lookup("Int64")]]),e.union("LedgerCloseMetaExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"v1"]],arms:{v1:e.lookup("LedgerCloseMetaExtV1")}}),e.struct("LedgerCloseMetaV1",[["ext",e.lookup("LedgerCloseMetaExt")],["ledgerHeader",e.lookup("LedgerHeaderHistoryEntry")],["txSet",e.lookup("GeneralizedTransactionSet")],["txProcessing",e.varArray(e.lookup("TransactionResultMeta"),2147483647)],["upgradesProcessing",e.varArray(e.lookup("UpgradeEntryMeta"),2147483647)],["scpInfo",e.varArray(e.lookup("ScpHistoryEntry"),2147483647)],["totalByteSizeOfBucketList",e.lookup("Uint64")],["evictedTemporaryLedgerKeys",e.varArray(e.lookup("LedgerKey"),2147483647)],["evictedPersistentLedgerEntries",e.varArray(e.lookup("LedgerEntry"),2147483647)]]),e.union("LedgerCloseMeta",{switchOn:e.int(),switchName:"v",switches:[[0,"v0"],[1,"v1"]],arms:{v0:e.lookup("LedgerCloseMetaV0"),v1:e.lookup("LedgerCloseMetaV1")}}),e.enum("ErrorCode",{errMisc:0,errData:1,errConf:2,errAuth:3,errLoad:4}),e.struct("Error",[["code",e.lookup("ErrorCode")],["msg",e.string(100)]]),e.struct("SendMore",[["numMessages",e.lookup("Uint32")]]),e.struct("SendMoreExtended",[["numMessages",e.lookup("Uint32")],["numBytes",e.lookup("Uint32")]]),e.struct("AuthCert",[["pubkey",e.lookup("Curve25519Public")],["expiration",e.lookup("Uint64")],["sig",e.lookup("Signature")]]),e.struct("Hello",[["ledgerVersion",e.lookup("Uint32")],["overlayVersion",e.lookup("Uint32")],["overlayMinVersion",e.lookup("Uint32")],["networkId",e.lookup("Hash")],["versionStr",e.string(100)],["listeningPort",e.int()],["peerId",e.lookup("NodeId")],["cert",e.lookup("AuthCert")],["nonce",e.lookup("Uint256")]]),e.const("AUTH_MSG_FLAG_FLOW_CONTROL_BYTES_REQUESTED",200),e.struct("Auth",[["flags",e.int()]]),e.enum("IpAddrType",{iPv4:0,iPv6:1}),e.union("PeerAddressIp",{switchOn:e.lookup("IpAddrType"),switchName:"type",switches:[["iPv4","ipv4"],["iPv6","ipv6"]],arms:{ipv4:e.opaque(4),ipv6:e.opaque(16)}}),e.struct("PeerAddress",[["ip",e.lookup("PeerAddressIp")],["port",e.lookup("Uint32")],["numFailures",e.lookup("Uint32")]]),e.enum("MessageType",{errorMsg:0,auth:2,dontHave:3,getPeers:4,peers:5,getTxSet:6,txSet:7,generalizedTxSet:17,transaction:8,getScpQuorumset:9,scpQuorumset:10,scpMessage:11,getScpState:12,hello:13,surveyRequest:14,surveyResponse:15,sendMore:16,sendMoreExtended:20,floodAdvert:18,floodDemand:19,timeSlicedSurveyRequest:21,timeSlicedSurveyResponse:22,timeSlicedSurveyStartCollecting:23,timeSlicedSurveyStopCollecting:24}),e.struct("DontHave",[["type",e.lookup("MessageType")],["reqHash",e.lookup("Uint256")]]),e.enum("SurveyMessageCommandType",{surveyTopology:0,timeSlicedSurveyTopology:1}),e.enum("SurveyMessageResponseType",{surveyTopologyResponseV0:0,surveyTopologyResponseV1:1,surveyTopologyResponseV2:2}),e.struct("TimeSlicedSurveyStartCollectingMessage",[["surveyorId",e.lookup("NodeId")],["nonce",e.lookup("Uint32")],["ledgerNum",e.lookup("Uint32")]]),e.struct("SignedTimeSlicedSurveyStartCollectingMessage",[["signature",e.lookup("Signature")],["startCollecting",e.lookup("TimeSlicedSurveyStartCollectingMessage")]]),e.struct("TimeSlicedSurveyStopCollectingMessage",[["surveyorId",e.lookup("NodeId")],["nonce",e.lookup("Uint32")],["ledgerNum",e.lookup("Uint32")]]),e.struct("SignedTimeSlicedSurveyStopCollectingMessage",[["signature",e.lookup("Signature")],["stopCollecting",e.lookup("TimeSlicedSurveyStopCollectingMessage")]]),e.struct("SurveyRequestMessage",[["surveyorPeerId",e.lookup("NodeId")],["surveyedPeerId",e.lookup("NodeId")],["ledgerNum",e.lookup("Uint32")],["encryptionKey",e.lookup("Curve25519Public")],["commandType",e.lookup("SurveyMessageCommandType")]]),e.struct("TimeSlicedSurveyRequestMessage",[["request",e.lookup("SurveyRequestMessage")],["nonce",e.lookup("Uint32")],["inboundPeersIndex",e.lookup("Uint32")],["outboundPeersIndex",e.lookup("Uint32")]]),e.struct("SignedSurveyRequestMessage",[["requestSignature",e.lookup("Signature")],["request",e.lookup("SurveyRequestMessage")]]),e.struct("SignedTimeSlicedSurveyRequestMessage",[["requestSignature",e.lookup("Signature")],["request",e.lookup("TimeSlicedSurveyRequestMessage")]]),e.typedef("EncryptedBody",e.varOpaque(64e3)),e.struct("SurveyResponseMessage",[["surveyorPeerId",e.lookup("NodeId")],["surveyedPeerId",e.lookup("NodeId")],["ledgerNum",e.lookup("Uint32")],["commandType",e.lookup("SurveyMessageCommandType")],["encryptedBody",e.lookup("EncryptedBody")]]),e.struct("TimeSlicedSurveyResponseMessage",[["response",e.lookup("SurveyResponseMessage")],["nonce",e.lookup("Uint32")]]),e.struct("SignedSurveyResponseMessage",[["responseSignature",e.lookup("Signature")],["response",e.lookup("SurveyResponseMessage")]]),e.struct("SignedTimeSlicedSurveyResponseMessage",[["responseSignature",e.lookup("Signature")],["response",e.lookup("TimeSlicedSurveyResponseMessage")]]),e.struct("PeerStats",[["id",e.lookup("NodeId")],["versionStr",e.string(100)],["messagesRead",e.lookup("Uint64")],["messagesWritten",e.lookup("Uint64")],["bytesRead",e.lookup("Uint64")],["bytesWritten",e.lookup("Uint64")],["secondsConnected",e.lookup("Uint64")],["uniqueFloodBytesRecv",e.lookup("Uint64")],["duplicateFloodBytesRecv",e.lookup("Uint64")],["uniqueFetchBytesRecv",e.lookup("Uint64")],["duplicateFetchBytesRecv",e.lookup("Uint64")],["uniqueFloodMessageRecv",e.lookup("Uint64")],["duplicateFloodMessageRecv",e.lookup("Uint64")],["uniqueFetchMessageRecv",e.lookup("Uint64")],["duplicateFetchMessageRecv",e.lookup("Uint64")]]),e.typedef("PeerStatList",e.varArray(e.lookup("PeerStats"),25)),e.struct("TimeSlicedNodeData",[["addedAuthenticatedPeers",e.lookup("Uint32")],["droppedAuthenticatedPeers",e.lookup("Uint32")],["totalInboundPeerCount",e.lookup("Uint32")],["totalOutboundPeerCount",e.lookup("Uint32")],["p75ScpFirstToSelfLatencyMs",e.lookup("Uint32")],["p75ScpSelfToOtherLatencyMs",e.lookup("Uint32")],["lostSyncCount",e.lookup("Uint32")],["isValidator",e.bool()],["maxInboundPeerCount",e.lookup("Uint32")],["maxOutboundPeerCount",e.lookup("Uint32")]]),e.struct("TimeSlicedPeerData",[["peerStats",e.lookup("PeerStats")],["averageLatencyMs",e.lookup("Uint32")]]),e.typedef("TimeSlicedPeerDataList",e.varArray(e.lookup("TimeSlicedPeerData"),25)),e.struct("TopologyResponseBodyV0",[["inboundPeers",e.lookup("PeerStatList")],["outboundPeers",e.lookup("PeerStatList")],["totalInboundPeerCount",e.lookup("Uint32")],["totalOutboundPeerCount",e.lookup("Uint32")]]),e.struct("TopologyResponseBodyV1",[["inboundPeers",e.lookup("PeerStatList")],["outboundPeers",e.lookup("PeerStatList")],["totalInboundPeerCount",e.lookup("Uint32")],["totalOutboundPeerCount",e.lookup("Uint32")],["maxInboundPeerCount",e.lookup("Uint32")],["maxOutboundPeerCount",e.lookup("Uint32")]]),e.struct("TopologyResponseBodyV2",[["inboundPeers",e.lookup("TimeSlicedPeerDataList")],["outboundPeers",e.lookup("TimeSlicedPeerDataList")],["nodeData",e.lookup("TimeSlicedNodeData")]]),e.union("SurveyResponseBody",{switchOn:e.lookup("SurveyMessageResponseType"),switchName:"type",switches:[["surveyTopologyResponseV0","topologyResponseBodyV0"],["surveyTopologyResponseV1","topologyResponseBodyV1"],["surveyTopologyResponseV2","topologyResponseBodyV2"]],arms:{topologyResponseBodyV0:e.lookup("TopologyResponseBodyV0"),topologyResponseBodyV1:e.lookup("TopologyResponseBodyV1"),topologyResponseBodyV2:e.lookup("TopologyResponseBodyV2")}}),e.const("TX_ADVERT_VECTOR_MAX_SIZE",1e3),e.typedef("TxAdvertVector",e.varArray(e.lookup("Hash"),e.lookup("TX_ADVERT_VECTOR_MAX_SIZE"))),e.struct("FloodAdvert",[["txHashes",e.lookup("TxAdvertVector")]]),e.const("TX_DEMAND_VECTOR_MAX_SIZE",1e3),e.typedef("TxDemandVector",e.varArray(e.lookup("Hash"),e.lookup("TX_DEMAND_VECTOR_MAX_SIZE"))),e.struct("FloodDemand",[["txHashes",e.lookup("TxDemandVector")]]),e.union("StellarMessage",{switchOn:e.lookup("MessageType"),switchName:"type",switches:[["errorMsg","error"],["hello","hello"],["auth","auth"],["dontHave","dontHave"],["getPeers",e.void()],["peers","peers"],["getTxSet","txSetHash"],["txSet","txSet"],["generalizedTxSet","generalizedTxSet"],["transaction","transaction"],["surveyRequest","signedSurveyRequestMessage"],["surveyResponse","signedSurveyResponseMessage"],["timeSlicedSurveyRequest","signedTimeSlicedSurveyRequestMessage"],["timeSlicedSurveyResponse","signedTimeSlicedSurveyResponseMessage"],["timeSlicedSurveyStartCollecting","signedTimeSlicedSurveyStartCollectingMessage"],["timeSlicedSurveyStopCollecting","signedTimeSlicedSurveyStopCollectingMessage"],["getScpQuorumset","qSetHash"],["scpQuorumset","qSet"],["scpMessage","envelope"],["getScpState","getScpLedgerSeq"],["sendMore","sendMoreMessage"],["sendMoreExtended","sendMoreExtendedMessage"],["floodAdvert","floodAdvert"],["floodDemand","floodDemand"]],arms:{error:e.lookup("Error"),hello:e.lookup("Hello"),auth:e.lookup("Auth"),dontHave:e.lookup("DontHave"),peers:e.varArray(e.lookup("PeerAddress"),100),txSetHash:e.lookup("Uint256"),txSet:e.lookup("TransactionSet"),generalizedTxSet:e.lookup("GeneralizedTransactionSet"),transaction:e.lookup("TransactionEnvelope"),signedSurveyRequestMessage:e.lookup("SignedSurveyRequestMessage"),signedSurveyResponseMessage:e.lookup("SignedSurveyResponseMessage"),signedTimeSlicedSurveyRequestMessage:e.lookup("SignedTimeSlicedSurveyRequestMessage"),signedTimeSlicedSurveyResponseMessage:e.lookup("SignedTimeSlicedSurveyResponseMessage"),signedTimeSlicedSurveyStartCollectingMessage:e.lookup("SignedTimeSlicedSurveyStartCollectingMessage"),signedTimeSlicedSurveyStopCollectingMessage:e.lookup("SignedTimeSlicedSurveyStopCollectingMessage"),qSetHash:e.lookup("Uint256"),qSet:e.lookup("ScpQuorumSet"),envelope:e.lookup("ScpEnvelope"),getScpLedgerSeq:e.lookup("Uint32"),sendMoreMessage:e.lookup("SendMore"),sendMoreExtendedMessage:e.lookup("SendMoreExtended"),floodAdvert:e.lookup("FloodAdvert"),floodDemand:e.lookup("FloodDemand")}}),e.struct("AuthenticatedMessageV0",[["sequence",e.lookup("Uint64")],["message",e.lookup("StellarMessage")],["mac",e.lookup("HmacSha256Mac")]]),e.union("AuthenticatedMessage",{switchOn:e.lookup("Uint32"),switchName:"v",switches:[[0,"v0"]],arms:{v0:e.lookup("AuthenticatedMessageV0")}}),e.const("MAX_OPS_PER_TX",100),e.union("LiquidityPoolParameters",{switchOn:e.lookup("LiquidityPoolType"),switchName:"type",switches:[["liquidityPoolConstantProduct","constantProduct"]],arms:{constantProduct:e.lookup("LiquidityPoolConstantProductParameters")}}),e.struct("MuxedAccountMed25519",[["id",e.lookup("Uint64")],["ed25519",e.lookup("Uint256")]]),e.union("MuxedAccount",{switchOn:e.lookup("CryptoKeyType"),switchName:"type",switches:[["keyTypeEd25519","ed25519"],["keyTypeMuxedEd25519","med25519"]],arms:{ed25519:e.lookup("Uint256"),med25519:e.lookup("MuxedAccountMed25519")}}),e.struct("DecoratedSignature",[["hint",e.lookup("SignatureHint")],["signature",e.lookup("Signature")]]),e.enum("OperationType",{createAccount:0,payment:1,pathPaymentStrictReceive:2,manageSellOffer:3,createPassiveSellOffer:4,setOptions:5,changeTrust:6,allowTrust:7,accountMerge:8,inflation:9,manageData:10,bumpSequence:11,manageBuyOffer:12,pathPaymentStrictSend:13,createClaimableBalance:14,claimClaimableBalance:15,beginSponsoringFutureReserves:16,endSponsoringFutureReserves:17,revokeSponsorship:18,clawback:19,clawbackClaimableBalance:20,setTrustLineFlags:21,liquidityPoolDeposit:22,liquidityPoolWithdraw:23,invokeHostFunction:24,extendFootprintTtl:25,restoreFootprint:26}),e.struct("CreateAccountOp",[["destination",e.lookup("AccountId")],["startingBalance",e.lookup("Int64")]]),e.struct("PaymentOp",[["destination",e.lookup("MuxedAccount")],["asset",e.lookup("Asset")],["amount",e.lookup("Int64")]]),e.struct("PathPaymentStrictReceiveOp",[["sendAsset",e.lookup("Asset")],["sendMax",e.lookup("Int64")],["destination",e.lookup("MuxedAccount")],["destAsset",e.lookup("Asset")],["destAmount",e.lookup("Int64")],["path",e.varArray(e.lookup("Asset"),5)]]),e.struct("PathPaymentStrictSendOp",[["sendAsset",e.lookup("Asset")],["sendAmount",e.lookup("Int64")],["destination",e.lookup("MuxedAccount")],["destAsset",e.lookup("Asset")],["destMin",e.lookup("Int64")],["path",e.varArray(e.lookup("Asset"),5)]]),e.struct("ManageSellOfferOp",[["selling",e.lookup("Asset")],["buying",e.lookup("Asset")],["amount",e.lookup("Int64")],["price",e.lookup("Price")],["offerId",e.lookup("Int64")]]),e.struct("ManageBuyOfferOp",[["selling",e.lookup("Asset")],["buying",e.lookup("Asset")],["buyAmount",e.lookup("Int64")],["price",e.lookup("Price")],["offerId",e.lookup("Int64")]]),e.struct("CreatePassiveSellOfferOp",[["selling",e.lookup("Asset")],["buying",e.lookup("Asset")],["amount",e.lookup("Int64")],["price",e.lookup("Price")]]),e.struct("SetOptionsOp",[["inflationDest",e.option(e.lookup("AccountId"))],["clearFlags",e.option(e.lookup("Uint32"))],["setFlags",e.option(e.lookup("Uint32"))],["masterWeight",e.option(e.lookup("Uint32"))],["lowThreshold",e.option(e.lookup("Uint32"))],["medThreshold",e.option(e.lookup("Uint32"))],["highThreshold",e.option(e.lookup("Uint32"))],["homeDomain",e.option(e.lookup("String32"))],["signer",e.option(e.lookup("Signer"))]]),e.union("ChangeTrustAsset",{switchOn:e.lookup("AssetType"),switchName:"type",switches:[["assetTypeNative",e.void()],["assetTypeCreditAlphanum4","alphaNum4"],["assetTypeCreditAlphanum12","alphaNum12"],["assetTypePoolShare","liquidityPool"]],arms:{alphaNum4:e.lookup("AlphaNum4"),alphaNum12:e.lookup("AlphaNum12"),liquidityPool:e.lookup("LiquidityPoolParameters")}}),e.struct("ChangeTrustOp",[["line",e.lookup("ChangeTrustAsset")],["limit",e.lookup("Int64")]]),e.struct("AllowTrustOp",[["trustor",e.lookup("AccountId")],["asset",e.lookup("AssetCode")],["authorize",e.lookup("Uint32")]]),e.struct("ManageDataOp",[["dataName",e.lookup("String64")],["dataValue",e.option(e.lookup("DataValue"))]]),e.struct("BumpSequenceOp",[["bumpTo",e.lookup("SequenceNumber")]]),e.struct("CreateClaimableBalanceOp",[["asset",e.lookup("Asset")],["amount",e.lookup("Int64")],["claimants",e.varArray(e.lookup("Claimant"),10)]]),e.struct("ClaimClaimableBalanceOp",[["balanceId",e.lookup("ClaimableBalanceId")]]),e.struct("BeginSponsoringFutureReservesOp",[["sponsoredId",e.lookup("AccountId")]]),e.enum("RevokeSponsorshipType",{revokeSponsorshipLedgerEntry:0,revokeSponsorshipSigner:1}),e.struct("RevokeSponsorshipOpSigner",[["accountId",e.lookup("AccountId")],["signerKey",e.lookup("SignerKey")]]),e.union("RevokeSponsorshipOp",{switchOn:e.lookup("RevokeSponsorshipType"),switchName:"type",switches:[["revokeSponsorshipLedgerEntry","ledgerKey"],["revokeSponsorshipSigner","signer"]],arms:{ledgerKey:e.lookup("LedgerKey"),signer:e.lookup("RevokeSponsorshipOpSigner")}}),e.struct("ClawbackOp",[["asset",e.lookup("Asset")],["from",e.lookup("MuxedAccount")],["amount",e.lookup("Int64")]]),e.struct("ClawbackClaimableBalanceOp",[["balanceId",e.lookup("ClaimableBalanceId")]]),e.struct("SetTrustLineFlagsOp",[["trustor",e.lookup("AccountId")],["asset",e.lookup("Asset")],["clearFlags",e.lookup("Uint32")],["setFlags",e.lookup("Uint32")]]),e.const("LIQUIDITY_POOL_FEE_V18",30),e.struct("LiquidityPoolDepositOp",[["liquidityPoolId",e.lookup("PoolId")],["maxAmountA",e.lookup("Int64")],["maxAmountB",e.lookup("Int64")],["minPrice",e.lookup("Price")],["maxPrice",e.lookup("Price")]]),e.struct("LiquidityPoolWithdrawOp",[["liquidityPoolId",e.lookup("PoolId")],["amount",e.lookup("Int64")],["minAmountA",e.lookup("Int64")],["minAmountB",e.lookup("Int64")]]),e.enum("HostFunctionType",{hostFunctionTypeInvokeContract:0,hostFunctionTypeCreateContract:1,hostFunctionTypeUploadContractWasm:2,hostFunctionTypeCreateContractV2:3}),e.enum("ContractIdPreimageType",{contractIdPreimageFromAddress:0,contractIdPreimageFromAsset:1}),e.struct("ContractIdPreimageFromAddress",[["address",e.lookup("ScAddress")],["salt",e.lookup("Uint256")]]),e.union("ContractIdPreimage",{switchOn:e.lookup("ContractIdPreimageType"),switchName:"type",switches:[["contractIdPreimageFromAddress","fromAddress"],["contractIdPreimageFromAsset","fromAsset"]],arms:{fromAddress:e.lookup("ContractIdPreimageFromAddress"),fromAsset:e.lookup("Asset")}}),e.struct("CreateContractArgs",[["contractIdPreimage",e.lookup("ContractIdPreimage")],["executable",e.lookup("ContractExecutable")]]),e.struct("CreateContractArgsV2",[["contractIdPreimage",e.lookup("ContractIdPreimage")],["executable",e.lookup("ContractExecutable")],["constructorArgs",e.varArray(e.lookup("ScVal"),2147483647)]]),e.struct("InvokeContractArgs",[["contractAddress",e.lookup("ScAddress")],["functionName",e.lookup("ScSymbol")],["args",e.varArray(e.lookup("ScVal"),2147483647)]]),e.union("HostFunction",{switchOn:e.lookup("HostFunctionType"),switchName:"type",switches:[["hostFunctionTypeInvokeContract","invokeContract"],["hostFunctionTypeCreateContract","createContract"],["hostFunctionTypeUploadContractWasm","wasm"],["hostFunctionTypeCreateContractV2","createContractV2"]],arms:{invokeContract:e.lookup("InvokeContractArgs"),createContract:e.lookup("CreateContractArgs"),wasm:e.varOpaque(),createContractV2:e.lookup("CreateContractArgsV2")}}),e.enum("SorobanAuthorizedFunctionType",{sorobanAuthorizedFunctionTypeContractFn:0,sorobanAuthorizedFunctionTypeCreateContractHostFn:1,sorobanAuthorizedFunctionTypeCreateContractV2HostFn:2}),e.union("SorobanAuthorizedFunction",{switchOn:e.lookup("SorobanAuthorizedFunctionType"),switchName:"type",switches:[["sorobanAuthorizedFunctionTypeContractFn","contractFn"],["sorobanAuthorizedFunctionTypeCreateContractHostFn","createContractHostFn"],["sorobanAuthorizedFunctionTypeCreateContractV2HostFn","createContractV2HostFn"]],arms:{contractFn:e.lookup("InvokeContractArgs"),createContractHostFn:e.lookup("CreateContractArgs"),createContractV2HostFn:e.lookup("CreateContractArgsV2")}}),e.struct("SorobanAuthorizedInvocation",[["function",e.lookup("SorobanAuthorizedFunction")],["subInvocations",e.varArray(e.lookup("SorobanAuthorizedInvocation"),2147483647)]]),e.struct("SorobanAddressCredentials",[["address",e.lookup("ScAddress")],["nonce",e.lookup("Int64")],["signatureExpirationLedger",e.lookup("Uint32")],["signature",e.lookup("ScVal")]]),e.enum("SorobanCredentialsType",{sorobanCredentialsSourceAccount:0,sorobanCredentialsAddress:1}),e.union("SorobanCredentials",{switchOn:e.lookup("SorobanCredentialsType"),switchName:"type",switches:[["sorobanCredentialsSourceAccount",e.void()],["sorobanCredentialsAddress","address"]],arms:{address:e.lookup("SorobanAddressCredentials")}}),e.struct("SorobanAuthorizationEntry",[["credentials",e.lookup("SorobanCredentials")],["rootInvocation",e.lookup("SorobanAuthorizedInvocation")]]),e.struct("InvokeHostFunctionOp",[["hostFunction",e.lookup("HostFunction")],["auth",e.varArray(e.lookup("SorobanAuthorizationEntry"),2147483647)]]),e.struct("ExtendFootprintTtlOp",[["ext",e.lookup("ExtensionPoint")],["extendTo",e.lookup("Uint32")]]),e.struct("RestoreFootprintOp",[["ext",e.lookup("ExtensionPoint")]]),e.union("OperationBody",{switchOn:e.lookup("OperationType"),switchName:"type",switches:[["createAccount","createAccountOp"],["payment","paymentOp"],["pathPaymentStrictReceive","pathPaymentStrictReceiveOp"],["manageSellOffer","manageSellOfferOp"],["createPassiveSellOffer","createPassiveSellOfferOp"],["setOptions","setOptionsOp"],["changeTrust","changeTrustOp"],["allowTrust","allowTrustOp"],["accountMerge","destination"],["inflation",e.void()],["manageData","manageDataOp"],["bumpSequence","bumpSequenceOp"],["manageBuyOffer","manageBuyOfferOp"],["pathPaymentStrictSend","pathPaymentStrictSendOp"],["createClaimableBalance","createClaimableBalanceOp"],["claimClaimableBalance","claimClaimableBalanceOp"],["beginSponsoringFutureReserves","beginSponsoringFutureReservesOp"],["endSponsoringFutureReserves",e.void()],["revokeSponsorship","revokeSponsorshipOp"],["clawback","clawbackOp"],["clawbackClaimableBalance","clawbackClaimableBalanceOp"],["setTrustLineFlags","setTrustLineFlagsOp"],["liquidityPoolDeposit","liquidityPoolDepositOp"],["liquidityPoolWithdraw","liquidityPoolWithdrawOp"],["invokeHostFunction","invokeHostFunctionOp"],["extendFootprintTtl","extendFootprintTtlOp"],["restoreFootprint","restoreFootprintOp"]],arms:{createAccountOp:e.lookup("CreateAccountOp"),paymentOp:e.lookup("PaymentOp"),pathPaymentStrictReceiveOp:e.lookup("PathPaymentStrictReceiveOp"),manageSellOfferOp:e.lookup("ManageSellOfferOp"),createPassiveSellOfferOp:e.lookup("CreatePassiveSellOfferOp"),setOptionsOp:e.lookup("SetOptionsOp"),changeTrustOp:e.lookup("ChangeTrustOp"),allowTrustOp:e.lookup("AllowTrustOp"),destination:e.lookup("MuxedAccount"),manageDataOp:e.lookup("ManageDataOp"),bumpSequenceOp:e.lookup("BumpSequenceOp"),manageBuyOfferOp:e.lookup("ManageBuyOfferOp"),pathPaymentStrictSendOp:e.lookup("PathPaymentStrictSendOp"),createClaimableBalanceOp:e.lookup("CreateClaimableBalanceOp"),claimClaimableBalanceOp:e.lookup("ClaimClaimableBalanceOp"),beginSponsoringFutureReservesOp:e.lookup("BeginSponsoringFutureReservesOp"),revokeSponsorshipOp:e.lookup("RevokeSponsorshipOp"),clawbackOp:e.lookup("ClawbackOp"),clawbackClaimableBalanceOp:e.lookup("ClawbackClaimableBalanceOp"),setTrustLineFlagsOp:e.lookup("SetTrustLineFlagsOp"),liquidityPoolDepositOp:e.lookup("LiquidityPoolDepositOp"),liquidityPoolWithdrawOp:e.lookup("LiquidityPoolWithdrawOp"),invokeHostFunctionOp:e.lookup("InvokeHostFunctionOp"),extendFootprintTtlOp:e.lookup("ExtendFootprintTtlOp"),restoreFootprintOp:e.lookup("RestoreFootprintOp")}}),e.struct("Operation",[["sourceAccount",e.option(e.lookup("MuxedAccount"))],["body",e.lookup("OperationBody")]]),e.struct("HashIdPreimageOperationId",[["sourceAccount",e.lookup("AccountId")],["seqNum",e.lookup("SequenceNumber")],["opNum",e.lookup("Uint32")]]),e.struct("HashIdPreimageRevokeId",[["sourceAccount",e.lookup("AccountId")],["seqNum",e.lookup("SequenceNumber")],["opNum",e.lookup("Uint32")],["liquidityPoolId",e.lookup("PoolId")],["asset",e.lookup("Asset")]]),e.struct("HashIdPreimageContractId",[["networkId",e.lookup("Hash")],["contractIdPreimage",e.lookup("ContractIdPreimage")]]),e.struct("HashIdPreimageSorobanAuthorization",[["networkId",e.lookup("Hash")],["nonce",e.lookup("Int64")],["signatureExpirationLedger",e.lookup("Uint32")],["invocation",e.lookup("SorobanAuthorizedInvocation")]]),e.union("HashIdPreimage",{switchOn:e.lookup("EnvelopeType"),switchName:"type",switches:[["envelopeTypeOpId","operationId"],["envelopeTypePoolRevokeOpId","revokeId"],["envelopeTypeContractId","contractId"],["envelopeTypeSorobanAuthorization","sorobanAuthorization"]],arms:{operationId:e.lookup("HashIdPreimageOperationId"),revokeId:e.lookup("HashIdPreimageRevokeId"),contractId:e.lookup("HashIdPreimageContractId"),sorobanAuthorization:e.lookup("HashIdPreimageSorobanAuthorization")}}),e.enum("MemoType",{memoNone:0,memoText:1,memoId:2,memoHash:3,memoReturn:4}),e.union("Memo",{switchOn:e.lookup("MemoType"),switchName:"type",switches:[["memoNone",e.void()],["memoText","text"],["memoId","id"],["memoHash","hash"],["memoReturn","retHash"]],arms:{text:e.string(28),id:e.lookup("Uint64"),hash:e.lookup("Hash"),retHash:e.lookup("Hash")}}),e.struct("TimeBounds",[["minTime",e.lookup("TimePoint")],["maxTime",e.lookup("TimePoint")]]),e.struct("LedgerBounds",[["minLedger",e.lookup("Uint32")],["maxLedger",e.lookup("Uint32")]]),e.struct("PreconditionsV2",[["timeBounds",e.option(e.lookup("TimeBounds"))],["ledgerBounds",e.option(e.lookup("LedgerBounds"))],["minSeqNum",e.option(e.lookup("SequenceNumber"))],["minSeqAge",e.lookup("Duration")],["minSeqLedgerGap",e.lookup("Uint32")],["extraSigners",e.varArray(e.lookup("SignerKey"),2)]]),e.enum("PreconditionType",{precondNone:0,precondTime:1,precondV2:2}),e.union("Preconditions",{switchOn:e.lookup("PreconditionType"),switchName:"type",switches:[["precondNone",e.void()],["precondTime","timeBounds"],["precondV2","v2"]],arms:{timeBounds:e.lookup("TimeBounds"),v2:e.lookup("PreconditionsV2")}}),e.struct("LedgerFootprint",[["readOnly",e.varArray(e.lookup("LedgerKey"),2147483647)],["readWrite",e.varArray(e.lookup("LedgerKey"),2147483647)]]),e.enum("ArchivalProofType",{existence:0,nonexistence:1}),e.struct("ArchivalProofNode",[["index",e.lookup("Uint32")],["hash",e.lookup("Hash")]]),e.typedef("ProofLevel",e.varArray(e.lookup("ArchivalProofNode"),2147483647)),e.struct("NonexistenceProofBody",[["entriesToProve",e.varArray(e.lookup("ColdArchiveBucketEntry"),2147483647)],["proofLevels",e.varArray(e.lookup("ProofLevel"),2147483647)]]),e.struct("ExistenceProofBody",[["keysToProve",e.varArray(e.lookup("LedgerKey"),2147483647)],["lowBoundEntries",e.varArray(e.lookup("ColdArchiveBucketEntry"),2147483647)],["highBoundEntries",e.varArray(e.lookup("ColdArchiveBucketEntry"),2147483647)],["proofLevels",e.varArray(e.lookup("ProofLevel"),2147483647)]]),e.union("ArchivalProofBody",{switchOn:e.lookup("ArchivalProofType"),switchName:"t",switches:[["existence","nonexistenceProof"],["nonexistence","existenceProof"]],arms:{nonexistenceProof:e.lookup("NonexistenceProofBody"),existenceProof:e.lookup("ExistenceProofBody")}}),e.struct("ArchivalProof",[["epoch",e.lookup("Uint32")],["body",e.lookup("ArchivalProofBody")]]),e.struct("SorobanResources",[["footprint",e.lookup("LedgerFootprint")],["instructions",e.lookup("Uint32")],["readBytes",e.lookup("Uint32")],["writeBytes",e.lookup("Uint32")]]),e.struct("SorobanTransactionData",[["ext",e.lookup("ExtensionPoint")],["resources",e.lookup("SorobanResources")],["resourceFee",e.lookup("Int64")]]),e.union("TransactionV0Ext",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("TransactionV0",[["sourceAccountEd25519",e.lookup("Uint256")],["fee",e.lookup("Uint32")],["seqNum",e.lookup("SequenceNumber")],["timeBounds",e.option(e.lookup("TimeBounds"))],["memo",e.lookup("Memo")],["operations",e.varArray(e.lookup("Operation"),e.lookup("MAX_OPS_PER_TX"))],["ext",e.lookup("TransactionV0Ext")]]),e.struct("TransactionV0Envelope",[["tx",e.lookup("TransactionV0")],["signatures",e.varArray(e.lookup("DecoratedSignature"),20)]]),e.union("TransactionExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()],[1,"sorobanData"]],arms:{sorobanData:e.lookup("SorobanTransactionData")}}),e.struct("Transaction",[["sourceAccount",e.lookup("MuxedAccount")],["fee",e.lookup("Uint32")],["seqNum",e.lookup("SequenceNumber")],["cond",e.lookup("Preconditions")],["memo",e.lookup("Memo")],["operations",e.varArray(e.lookup("Operation"),e.lookup("MAX_OPS_PER_TX"))],["ext",e.lookup("TransactionExt")]]),e.struct("TransactionV1Envelope",[["tx",e.lookup("Transaction")],["signatures",e.varArray(e.lookup("DecoratedSignature"),20)]]),e.union("FeeBumpTransactionInnerTx",{switchOn:e.lookup("EnvelopeType"),switchName:"type",switches:[["envelopeTypeTx","v1"]],arms:{v1:e.lookup("TransactionV1Envelope")}}),e.union("FeeBumpTransactionExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("FeeBumpTransaction",[["feeSource",e.lookup("MuxedAccount")],["fee",e.lookup("Int64")],["innerTx",e.lookup("FeeBumpTransactionInnerTx")],["ext",e.lookup("FeeBumpTransactionExt")]]),e.struct("FeeBumpTransactionEnvelope",[["tx",e.lookup("FeeBumpTransaction")],["signatures",e.varArray(e.lookup("DecoratedSignature"),20)]]),e.union("TransactionEnvelope",{switchOn:e.lookup("EnvelopeType"),switchName:"type",switches:[["envelopeTypeTxV0","v0"],["envelopeTypeTx","v1"],["envelopeTypeTxFeeBump","feeBump"]],arms:{v0:e.lookup("TransactionV0Envelope"),v1:e.lookup("TransactionV1Envelope"),feeBump:e.lookup("FeeBumpTransactionEnvelope")}}),e.union("TransactionSignaturePayloadTaggedTransaction",{switchOn:e.lookup("EnvelopeType"),switchName:"type",switches:[["envelopeTypeTx","tx"],["envelopeTypeTxFeeBump","feeBump"]],arms:{tx:e.lookup("Transaction"),feeBump:e.lookup("FeeBumpTransaction")}}),e.struct("TransactionSignaturePayload",[["networkId",e.lookup("Hash")],["taggedTransaction",e.lookup("TransactionSignaturePayloadTaggedTransaction")]]),e.enum("ClaimAtomType",{claimAtomTypeV0:0,claimAtomTypeOrderBook:1,claimAtomTypeLiquidityPool:2}),e.struct("ClaimOfferAtomV0",[["sellerEd25519",e.lookup("Uint256")],["offerId",e.lookup("Int64")],["assetSold",e.lookup("Asset")],["amountSold",e.lookup("Int64")],["assetBought",e.lookup("Asset")],["amountBought",e.lookup("Int64")]]),e.struct("ClaimOfferAtom",[["sellerId",e.lookup("AccountId")],["offerId",e.lookup("Int64")],["assetSold",e.lookup("Asset")],["amountSold",e.lookup("Int64")],["assetBought",e.lookup("Asset")],["amountBought",e.lookup("Int64")]]),e.struct("ClaimLiquidityAtom",[["liquidityPoolId",e.lookup("PoolId")],["assetSold",e.lookup("Asset")],["amountSold",e.lookup("Int64")],["assetBought",e.lookup("Asset")],["amountBought",e.lookup("Int64")]]),e.union("ClaimAtom",{switchOn:e.lookup("ClaimAtomType"),switchName:"type",switches:[["claimAtomTypeV0","v0"],["claimAtomTypeOrderBook","orderBook"],["claimAtomTypeLiquidityPool","liquidityPool"]],arms:{v0:e.lookup("ClaimOfferAtomV0"),orderBook:e.lookup("ClaimOfferAtom"),liquidityPool:e.lookup("ClaimLiquidityAtom")}}),e.enum("CreateAccountResultCode",{createAccountSuccess:0,createAccountMalformed:-1,createAccountUnderfunded:-2,createAccountLowReserve:-3,createAccountAlreadyExist:-4}),e.union("CreateAccountResult",{switchOn:e.lookup("CreateAccountResultCode"),switchName:"code",switches:[["createAccountSuccess",e.void()],["createAccountMalformed",e.void()],["createAccountUnderfunded",e.void()],["createAccountLowReserve",e.void()],["createAccountAlreadyExist",e.void()]],arms:{}}),e.enum("PaymentResultCode",{paymentSuccess:0,paymentMalformed:-1,paymentUnderfunded:-2,paymentSrcNoTrust:-3,paymentSrcNotAuthorized:-4,paymentNoDestination:-5,paymentNoTrust:-6,paymentNotAuthorized:-7,paymentLineFull:-8,paymentNoIssuer:-9}),e.union("PaymentResult",{switchOn:e.lookup("PaymentResultCode"),switchName:"code",switches:[["paymentSuccess",e.void()],["paymentMalformed",e.void()],["paymentUnderfunded",e.void()],["paymentSrcNoTrust",e.void()],["paymentSrcNotAuthorized",e.void()],["paymentNoDestination",e.void()],["paymentNoTrust",e.void()],["paymentNotAuthorized",e.void()],["paymentLineFull",e.void()],["paymentNoIssuer",e.void()]],arms:{}}),e.enum("PathPaymentStrictReceiveResultCode",{pathPaymentStrictReceiveSuccess:0,pathPaymentStrictReceiveMalformed:-1,pathPaymentStrictReceiveUnderfunded:-2,pathPaymentStrictReceiveSrcNoTrust:-3,pathPaymentStrictReceiveSrcNotAuthorized:-4,pathPaymentStrictReceiveNoDestination:-5,pathPaymentStrictReceiveNoTrust:-6,pathPaymentStrictReceiveNotAuthorized:-7,pathPaymentStrictReceiveLineFull:-8,pathPaymentStrictReceiveNoIssuer:-9,pathPaymentStrictReceiveTooFewOffers:-10,pathPaymentStrictReceiveOfferCrossSelf:-11,pathPaymentStrictReceiveOverSendmax:-12}),e.struct("SimplePaymentResult",[["destination",e.lookup("AccountId")],["asset",e.lookup("Asset")],["amount",e.lookup("Int64")]]),e.struct("PathPaymentStrictReceiveResultSuccess",[["offers",e.varArray(e.lookup("ClaimAtom"),2147483647)],["last",e.lookup("SimplePaymentResult")]]),e.union("PathPaymentStrictReceiveResult",{switchOn:e.lookup("PathPaymentStrictReceiveResultCode"),switchName:"code",switches:[["pathPaymentStrictReceiveSuccess","success"],["pathPaymentStrictReceiveMalformed",e.void()],["pathPaymentStrictReceiveUnderfunded",e.void()],["pathPaymentStrictReceiveSrcNoTrust",e.void()],["pathPaymentStrictReceiveSrcNotAuthorized",e.void()],["pathPaymentStrictReceiveNoDestination",e.void()],["pathPaymentStrictReceiveNoTrust",e.void()],["pathPaymentStrictReceiveNotAuthorized",e.void()],["pathPaymentStrictReceiveLineFull",e.void()],["pathPaymentStrictReceiveNoIssuer","noIssuer"],["pathPaymentStrictReceiveTooFewOffers",e.void()],["pathPaymentStrictReceiveOfferCrossSelf",e.void()],["pathPaymentStrictReceiveOverSendmax",e.void()]],arms:{success:e.lookup("PathPaymentStrictReceiveResultSuccess"),noIssuer:e.lookup("Asset")}}),e.enum("PathPaymentStrictSendResultCode",{pathPaymentStrictSendSuccess:0,pathPaymentStrictSendMalformed:-1,pathPaymentStrictSendUnderfunded:-2,pathPaymentStrictSendSrcNoTrust:-3,pathPaymentStrictSendSrcNotAuthorized:-4,pathPaymentStrictSendNoDestination:-5,pathPaymentStrictSendNoTrust:-6,pathPaymentStrictSendNotAuthorized:-7,pathPaymentStrictSendLineFull:-8,pathPaymentStrictSendNoIssuer:-9,pathPaymentStrictSendTooFewOffers:-10,pathPaymentStrictSendOfferCrossSelf:-11,pathPaymentStrictSendUnderDestmin:-12}),e.struct("PathPaymentStrictSendResultSuccess",[["offers",e.varArray(e.lookup("ClaimAtom"),2147483647)],["last",e.lookup("SimplePaymentResult")]]),e.union("PathPaymentStrictSendResult",{switchOn:e.lookup("PathPaymentStrictSendResultCode"),switchName:"code",switches:[["pathPaymentStrictSendSuccess","success"],["pathPaymentStrictSendMalformed",e.void()],["pathPaymentStrictSendUnderfunded",e.void()],["pathPaymentStrictSendSrcNoTrust",e.void()],["pathPaymentStrictSendSrcNotAuthorized",e.void()],["pathPaymentStrictSendNoDestination",e.void()],["pathPaymentStrictSendNoTrust",e.void()],["pathPaymentStrictSendNotAuthorized",e.void()],["pathPaymentStrictSendLineFull",e.void()],["pathPaymentStrictSendNoIssuer","noIssuer"],["pathPaymentStrictSendTooFewOffers",e.void()],["pathPaymentStrictSendOfferCrossSelf",e.void()],["pathPaymentStrictSendUnderDestmin",e.void()]],arms:{success:e.lookup("PathPaymentStrictSendResultSuccess"),noIssuer:e.lookup("Asset")}}),e.enum("ManageSellOfferResultCode",{manageSellOfferSuccess:0,manageSellOfferMalformed:-1,manageSellOfferSellNoTrust:-2,manageSellOfferBuyNoTrust:-3,manageSellOfferSellNotAuthorized:-4,manageSellOfferBuyNotAuthorized:-5,manageSellOfferLineFull:-6,manageSellOfferUnderfunded:-7,manageSellOfferCrossSelf:-8,manageSellOfferSellNoIssuer:-9,manageSellOfferBuyNoIssuer:-10,manageSellOfferNotFound:-11,manageSellOfferLowReserve:-12}),e.enum("ManageOfferEffect",{manageOfferCreated:0,manageOfferUpdated:1,manageOfferDeleted:2}),e.union("ManageOfferSuccessResultOffer",{switchOn:e.lookup("ManageOfferEffect"),switchName:"effect",switches:[["manageOfferCreated","offer"],["manageOfferUpdated","offer"],["manageOfferDeleted",e.void()]],arms:{offer:e.lookup("OfferEntry")}}),e.struct("ManageOfferSuccessResult",[["offersClaimed",e.varArray(e.lookup("ClaimAtom"),2147483647)],["offer",e.lookup("ManageOfferSuccessResultOffer")]]),e.union("ManageSellOfferResult",{switchOn:e.lookup("ManageSellOfferResultCode"),switchName:"code",switches:[["manageSellOfferSuccess","success"],["manageSellOfferMalformed",e.void()],["manageSellOfferSellNoTrust",e.void()],["manageSellOfferBuyNoTrust",e.void()],["manageSellOfferSellNotAuthorized",e.void()],["manageSellOfferBuyNotAuthorized",e.void()],["manageSellOfferLineFull",e.void()],["manageSellOfferUnderfunded",e.void()],["manageSellOfferCrossSelf",e.void()],["manageSellOfferSellNoIssuer",e.void()],["manageSellOfferBuyNoIssuer",e.void()],["manageSellOfferNotFound",e.void()],["manageSellOfferLowReserve",e.void()]],arms:{success:e.lookup("ManageOfferSuccessResult")}}),e.enum("ManageBuyOfferResultCode",{manageBuyOfferSuccess:0,manageBuyOfferMalformed:-1,manageBuyOfferSellNoTrust:-2,manageBuyOfferBuyNoTrust:-3,manageBuyOfferSellNotAuthorized:-4,manageBuyOfferBuyNotAuthorized:-5,manageBuyOfferLineFull:-6,manageBuyOfferUnderfunded:-7,manageBuyOfferCrossSelf:-8,manageBuyOfferSellNoIssuer:-9,manageBuyOfferBuyNoIssuer:-10,manageBuyOfferNotFound:-11,manageBuyOfferLowReserve:-12}),e.union("ManageBuyOfferResult",{switchOn:e.lookup("ManageBuyOfferResultCode"),switchName:"code",switches:[["manageBuyOfferSuccess","success"],["manageBuyOfferMalformed",e.void()],["manageBuyOfferSellNoTrust",e.void()],["manageBuyOfferBuyNoTrust",e.void()],["manageBuyOfferSellNotAuthorized",e.void()],["manageBuyOfferBuyNotAuthorized",e.void()],["manageBuyOfferLineFull",e.void()],["manageBuyOfferUnderfunded",e.void()],["manageBuyOfferCrossSelf",e.void()],["manageBuyOfferSellNoIssuer",e.void()],["manageBuyOfferBuyNoIssuer",e.void()],["manageBuyOfferNotFound",e.void()],["manageBuyOfferLowReserve",e.void()]],arms:{success:e.lookup("ManageOfferSuccessResult")}}),e.enum("SetOptionsResultCode",{setOptionsSuccess:0,setOptionsLowReserve:-1,setOptionsTooManySigners:-2,setOptionsBadFlags:-3,setOptionsInvalidInflation:-4,setOptionsCantChange:-5,setOptionsUnknownFlag:-6,setOptionsThresholdOutOfRange:-7,setOptionsBadSigner:-8,setOptionsInvalidHomeDomain:-9,setOptionsAuthRevocableRequired:-10}),e.union("SetOptionsResult",{switchOn:e.lookup("SetOptionsResultCode"),switchName:"code",switches:[["setOptionsSuccess",e.void()],["setOptionsLowReserve",e.void()],["setOptionsTooManySigners",e.void()],["setOptionsBadFlags",e.void()],["setOptionsInvalidInflation",e.void()],["setOptionsCantChange",e.void()],["setOptionsUnknownFlag",e.void()],["setOptionsThresholdOutOfRange",e.void()],["setOptionsBadSigner",e.void()],["setOptionsInvalidHomeDomain",e.void()],["setOptionsAuthRevocableRequired",e.void()]],arms:{}}),e.enum("ChangeTrustResultCode",{changeTrustSuccess:0,changeTrustMalformed:-1,changeTrustNoIssuer:-2,changeTrustInvalidLimit:-3,changeTrustLowReserve:-4,changeTrustSelfNotAllowed:-5,changeTrustTrustLineMissing:-6,changeTrustCannotDelete:-7,changeTrustNotAuthMaintainLiabilities:-8}),e.union("ChangeTrustResult",{switchOn:e.lookup("ChangeTrustResultCode"),switchName:"code",switches:[["changeTrustSuccess",e.void()],["changeTrustMalformed",e.void()],["changeTrustNoIssuer",e.void()],["changeTrustInvalidLimit",e.void()],["changeTrustLowReserve",e.void()],["changeTrustSelfNotAllowed",e.void()],["changeTrustTrustLineMissing",e.void()],["changeTrustCannotDelete",e.void()],["changeTrustNotAuthMaintainLiabilities",e.void()]],arms:{}}),e.enum("AllowTrustResultCode",{allowTrustSuccess:0,allowTrustMalformed:-1,allowTrustNoTrustLine:-2,allowTrustTrustNotRequired:-3,allowTrustCantRevoke:-4,allowTrustSelfNotAllowed:-5,allowTrustLowReserve:-6}),e.union("AllowTrustResult",{switchOn:e.lookup("AllowTrustResultCode"),switchName:"code",switches:[["allowTrustSuccess",e.void()],["allowTrustMalformed",e.void()],["allowTrustNoTrustLine",e.void()],["allowTrustTrustNotRequired",e.void()],["allowTrustCantRevoke",e.void()],["allowTrustSelfNotAllowed",e.void()],["allowTrustLowReserve",e.void()]],arms:{}}),e.enum("AccountMergeResultCode",{accountMergeSuccess:0,accountMergeMalformed:-1,accountMergeNoAccount:-2,accountMergeImmutableSet:-3,accountMergeHasSubEntries:-4,accountMergeSeqnumTooFar:-5,accountMergeDestFull:-6,accountMergeIsSponsor:-7}),e.union("AccountMergeResult",{switchOn:e.lookup("AccountMergeResultCode"),switchName:"code",switches:[["accountMergeSuccess","sourceAccountBalance"],["accountMergeMalformed",e.void()],["accountMergeNoAccount",e.void()],["accountMergeImmutableSet",e.void()],["accountMergeHasSubEntries",e.void()],["accountMergeSeqnumTooFar",e.void()],["accountMergeDestFull",e.void()],["accountMergeIsSponsor",e.void()]],arms:{sourceAccountBalance:e.lookup("Int64")}}),e.enum("InflationResultCode",{inflationSuccess:0,inflationNotTime:-1}),e.struct("InflationPayout",[["destination",e.lookup("AccountId")],["amount",e.lookup("Int64")]]),e.union("InflationResult",{switchOn:e.lookup("InflationResultCode"),switchName:"code",switches:[["inflationSuccess","payouts"],["inflationNotTime",e.void()]],arms:{payouts:e.varArray(e.lookup("InflationPayout"),2147483647)}}),e.enum("ManageDataResultCode",{manageDataSuccess:0,manageDataNotSupportedYet:-1,manageDataNameNotFound:-2,manageDataLowReserve:-3,manageDataInvalidName:-4}),e.union("ManageDataResult",{switchOn:e.lookup("ManageDataResultCode"),switchName:"code",switches:[["manageDataSuccess",e.void()],["manageDataNotSupportedYet",e.void()],["manageDataNameNotFound",e.void()],["manageDataLowReserve",e.void()],["manageDataInvalidName",e.void()]],arms:{}}),e.enum("BumpSequenceResultCode",{bumpSequenceSuccess:0,bumpSequenceBadSeq:-1}),e.union("BumpSequenceResult",{switchOn:e.lookup("BumpSequenceResultCode"),switchName:"code",switches:[["bumpSequenceSuccess",e.void()],["bumpSequenceBadSeq",e.void()]],arms:{}}),e.enum("CreateClaimableBalanceResultCode",{createClaimableBalanceSuccess:0,createClaimableBalanceMalformed:-1,createClaimableBalanceLowReserve:-2,createClaimableBalanceNoTrust:-3,createClaimableBalanceNotAuthorized:-4,createClaimableBalanceUnderfunded:-5}),e.union("CreateClaimableBalanceResult",{switchOn:e.lookup("CreateClaimableBalanceResultCode"),switchName:"code",switches:[["createClaimableBalanceSuccess","balanceId"],["createClaimableBalanceMalformed",e.void()],["createClaimableBalanceLowReserve",e.void()],["createClaimableBalanceNoTrust",e.void()],["createClaimableBalanceNotAuthorized",e.void()],["createClaimableBalanceUnderfunded",e.void()]],arms:{balanceId:e.lookup("ClaimableBalanceId")}}),e.enum("ClaimClaimableBalanceResultCode",{claimClaimableBalanceSuccess:0,claimClaimableBalanceDoesNotExist:-1,claimClaimableBalanceCannotClaim:-2,claimClaimableBalanceLineFull:-3,claimClaimableBalanceNoTrust:-4,claimClaimableBalanceNotAuthorized:-5}),e.union("ClaimClaimableBalanceResult",{switchOn:e.lookup("ClaimClaimableBalanceResultCode"),switchName:"code",switches:[["claimClaimableBalanceSuccess",e.void()],["claimClaimableBalanceDoesNotExist",e.void()],["claimClaimableBalanceCannotClaim",e.void()],["claimClaimableBalanceLineFull",e.void()],["claimClaimableBalanceNoTrust",e.void()],["claimClaimableBalanceNotAuthorized",e.void()]],arms:{}}),e.enum("BeginSponsoringFutureReservesResultCode",{beginSponsoringFutureReservesSuccess:0,beginSponsoringFutureReservesMalformed:-1,beginSponsoringFutureReservesAlreadySponsored:-2,beginSponsoringFutureReservesRecursive:-3}),e.union("BeginSponsoringFutureReservesResult",{switchOn:e.lookup("BeginSponsoringFutureReservesResultCode"),switchName:"code",switches:[["beginSponsoringFutureReservesSuccess",e.void()],["beginSponsoringFutureReservesMalformed",e.void()],["beginSponsoringFutureReservesAlreadySponsored",e.void()],["beginSponsoringFutureReservesRecursive",e.void()]],arms:{}}),e.enum("EndSponsoringFutureReservesResultCode",{endSponsoringFutureReservesSuccess:0,endSponsoringFutureReservesNotSponsored:-1}),e.union("EndSponsoringFutureReservesResult",{switchOn:e.lookup("EndSponsoringFutureReservesResultCode"),switchName:"code",switches:[["endSponsoringFutureReservesSuccess",e.void()],["endSponsoringFutureReservesNotSponsored",e.void()]],arms:{}}),e.enum("RevokeSponsorshipResultCode",{revokeSponsorshipSuccess:0,revokeSponsorshipDoesNotExist:-1,revokeSponsorshipNotSponsor:-2,revokeSponsorshipLowReserve:-3,revokeSponsorshipOnlyTransferable:-4,revokeSponsorshipMalformed:-5}),e.union("RevokeSponsorshipResult",{switchOn:e.lookup("RevokeSponsorshipResultCode"),switchName:"code",switches:[["revokeSponsorshipSuccess",e.void()],["revokeSponsorshipDoesNotExist",e.void()],["revokeSponsorshipNotSponsor",e.void()],["revokeSponsorshipLowReserve",e.void()],["revokeSponsorshipOnlyTransferable",e.void()],["revokeSponsorshipMalformed",e.void()]],arms:{}}),e.enum("ClawbackResultCode",{clawbackSuccess:0,clawbackMalformed:-1,clawbackNotClawbackEnabled:-2,clawbackNoTrust:-3,clawbackUnderfunded:-4}),e.union("ClawbackResult",{switchOn:e.lookup("ClawbackResultCode"),switchName:"code",switches:[["clawbackSuccess",e.void()],["clawbackMalformed",e.void()],["clawbackNotClawbackEnabled",e.void()],["clawbackNoTrust",e.void()],["clawbackUnderfunded",e.void()]],arms:{}}),e.enum("ClawbackClaimableBalanceResultCode",{clawbackClaimableBalanceSuccess:0,clawbackClaimableBalanceDoesNotExist:-1,clawbackClaimableBalanceNotIssuer:-2,clawbackClaimableBalanceNotClawbackEnabled:-3}),e.union("ClawbackClaimableBalanceResult",{switchOn:e.lookup("ClawbackClaimableBalanceResultCode"),switchName:"code",switches:[["clawbackClaimableBalanceSuccess",e.void()],["clawbackClaimableBalanceDoesNotExist",e.void()],["clawbackClaimableBalanceNotIssuer",e.void()],["clawbackClaimableBalanceNotClawbackEnabled",e.void()]],arms:{}}),e.enum("SetTrustLineFlagsResultCode",{setTrustLineFlagsSuccess:0,setTrustLineFlagsMalformed:-1,setTrustLineFlagsNoTrustLine:-2,setTrustLineFlagsCantRevoke:-3,setTrustLineFlagsInvalidState:-4,setTrustLineFlagsLowReserve:-5}),e.union("SetTrustLineFlagsResult",{switchOn:e.lookup("SetTrustLineFlagsResultCode"),switchName:"code",switches:[["setTrustLineFlagsSuccess",e.void()],["setTrustLineFlagsMalformed",e.void()],["setTrustLineFlagsNoTrustLine",e.void()],["setTrustLineFlagsCantRevoke",e.void()],["setTrustLineFlagsInvalidState",e.void()],["setTrustLineFlagsLowReserve",e.void()]],arms:{}}),e.enum("LiquidityPoolDepositResultCode",{liquidityPoolDepositSuccess:0,liquidityPoolDepositMalformed:-1,liquidityPoolDepositNoTrust:-2,liquidityPoolDepositNotAuthorized:-3,liquidityPoolDepositUnderfunded:-4,liquidityPoolDepositLineFull:-5,liquidityPoolDepositBadPrice:-6,liquidityPoolDepositPoolFull:-7}),e.union("LiquidityPoolDepositResult",{switchOn:e.lookup("LiquidityPoolDepositResultCode"),switchName:"code",switches:[["liquidityPoolDepositSuccess",e.void()],["liquidityPoolDepositMalformed",e.void()],["liquidityPoolDepositNoTrust",e.void()],["liquidityPoolDepositNotAuthorized",e.void()],["liquidityPoolDepositUnderfunded",e.void()],["liquidityPoolDepositLineFull",e.void()],["liquidityPoolDepositBadPrice",e.void()],["liquidityPoolDepositPoolFull",e.void()]],arms:{}}),e.enum("LiquidityPoolWithdrawResultCode",{liquidityPoolWithdrawSuccess:0,liquidityPoolWithdrawMalformed:-1,liquidityPoolWithdrawNoTrust:-2,liquidityPoolWithdrawUnderfunded:-3,liquidityPoolWithdrawLineFull:-4,liquidityPoolWithdrawUnderMinimum:-5}),e.union("LiquidityPoolWithdrawResult",{switchOn:e.lookup("LiquidityPoolWithdrawResultCode"),switchName:"code",switches:[["liquidityPoolWithdrawSuccess",e.void()],["liquidityPoolWithdrawMalformed",e.void()],["liquidityPoolWithdrawNoTrust",e.void()],["liquidityPoolWithdrawUnderfunded",e.void()],["liquidityPoolWithdrawLineFull",e.void()],["liquidityPoolWithdrawUnderMinimum",e.void()]],arms:{}}),e.enum("InvokeHostFunctionResultCode",{invokeHostFunctionSuccess:0,invokeHostFunctionMalformed:-1,invokeHostFunctionTrapped:-2,invokeHostFunctionResourceLimitExceeded:-3,invokeHostFunctionEntryArchived:-4,invokeHostFunctionInsufficientRefundableFee:-5}),e.union("InvokeHostFunctionResult",{switchOn:e.lookup("InvokeHostFunctionResultCode"),switchName:"code",switches:[["invokeHostFunctionSuccess","success"],["invokeHostFunctionMalformed",e.void()],["invokeHostFunctionTrapped",e.void()],["invokeHostFunctionResourceLimitExceeded",e.void()],["invokeHostFunctionEntryArchived",e.void()],["invokeHostFunctionInsufficientRefundableFee",e.void()]],arms:{success:e.lookup("Hash")}}),e.enum("ExtendFootprintTtlResultCode",{extendFootprintTtlSuccess:0,extendFootprintTtlMalformed:-1,extendFootprintTtlResourceLimitExceeded:-2,extendFootprintTtlInsufficientRefundableFee:-3}),e.union("ExtendFootprintTtlResult",{switchOn:e.lookup("ExtendFootprintTtlResultCode"),switchName:"code",switches:[["extendFootprintTtlSuccess",e.void()],["extendFootprintTtlMalformed",e.void()],["extendFootprintTtlResourceLimitExceeded",e.void()],["extendFootprintTtlInsufficientRefundableFee",e.void()]],arms:{}}),e.enum("RestoreFootprintResultCode",{restoreFootprintSuccess:0,restoreFootprintMalformed:-1,restoreFootprintResourceLimitExceeded:-2,restoreFootprintInsufficientRefundableFee:-3}),e.union("RestoreFootprintResult",{switchOn:e.lookup("RestoreFootprintResultCode"),switchName:"code",switches:[["restoreFootprintSuccess",e.void()],["restoreFootprintMalformed",e.void()],["restoreFootprintResourceLimitExceeded",e.void()],["restoreFootprintInsufficientRefundableFee",e.void()]],arms:{}}),e.enum("OperationResultCode",{opInner:0,opBadAuth:-1,opNoAccount:-2,opNotSupported:-3,opTooManySubentries:-4,opExceededWorkLimit:-5,opTooManySponsoring:-6}),e.union("OperationResultTr",{switchOn:e.lookup("OperationType"),switchName:"type",switches:[["createAccount","createAccountResult"],["payment","paymentResult"],["pathPaymentStrictReceive","pathPaymentStrictReceiveResult"],["manageSellOffer","manageSellOfferResult"],["createPassiveSellOffer","createPassiveSellOfferResult"],["setOptions","setOptionsResult"],["changeTrust","changeTrustResult"],["allowTrust","allowTrustResult"],["accountMerge","accountMergeResult"],["inflation","inflationResult"],["manageData","manageDataResult"],["bumpSequence","bumpSeqResult"],["manageBuyOffer","manageBuyOfferResult"],["pathPaymentStrictSend","pathPaymentStrictSendResult"],["createClaimableBalance","createClaimableBalanceResult"],["claimClaimableBalance","claimClaimableBalanceResult"],["beginSponsoringFutureReserves","beginSponsoringFutureReservesResult"],["endSponsoringFutureReserves","endSponsoringFutureReservesResult"],["revokeSponsorship","revokeSponsorshipResult"],["clawback","clawbackResult"],["clawbackClaimableBalance","clawbackClaimableBalanceResult"],["setTrustLineFlags","setTrustLineFlagsResult"],["liquidityPoolDeposit","liquidityPoolDepositResult"],["liquidityPoolWithdraw","liquidityPoolWithdrawResult"],["invokeHostFunction","invokeHostFunctionResult"],["extendFootprintTtl","extendFootprintTtlResult"],["restoreFootprint","restoreFootprintResult"]],arms:{createAccountResult:e.lookup("CreateAccountResult"),paymentResult:e.lookup("PaymentResult"),pathPaymentStrictReceiveResult:e.lookup("PathPaymentStrictReceiveResult"),manageSellOfferResult:e.lookup("ManageSellOfferResult"),createPassiveSellOfferResult:e.lookup("ManageSellOfferResult"),setOptionsResult:e.lookup("SetOptionsResult"),changeTrustResult:e.lookup("ChangeTrustResult"),allowTrustResult:e.lookup("AllowTrustResult"),accountMergeResult:e.lookup("AccountMergeResult"),inflationResult:e.lookup("InflationResult"),manageDataResult:e.lookup("ManageDataResult"),bumpSeqResult:e.lookup("BumpSequenceResult"),manageBuyOfferResult:e.lookup("ManageBuyOfferResult"),pathPaymentStrictSendResult:e.lookup("PathPaymentStrictSendResult"),createClaimableBalanceResult:e.lookup("CreateClaimableBalanceResult"),claimClaimableBalanceResult:e.lookup("ClaimClaimableBalanceResult"),beginSponsoringFutureReservesResult:e.lookup("BeginSponsoringFutureReservesResult"),endSponsoringFutureReservesResult:e.lookup("EndSponsoringFutureReservesResult"),revokeSponsorshipResult:e.lookup("RevokeSponsorshipResult"),clawbackResult:e.lookup("ClawbackResult"),clawbackClaimableBalanceResult:e.lookup("ClawbackClaimableBalanceResult"),setTrustLineFlagsResult:e.lookup("SetTrustLineFlagsResult"),liquidityPoolDepositResult:e.lookup("LiquidityPoolDepositResult"),liquidityPoolWithdrawResult:e.lookup("LiquidityPoolWithdrawResult"),invokeHostFunctionResult:e.lookup("InvokeHostFunctionResult"),extendFootprintTtlResult:e.lookup("ExtendFootprintTtlResult"),restoreFootprintResult:e.lookup("RestoreFootprintResult")}}),e.union("OperationResult",{switchOn:e.lookup("OperationResultCode"),switchName:"code",switches:[["opInner","tr"],["opBadAuth",e.void()],["opNoAccount",e.void()],["opNotSupported",e.void()],["opTooManySubentries",e.void()],["opExceededWorkLimit",e.void()],["opTooManySponsoring",e.void()]],arms:{tr:e.lookup("OperationResultTr")}}),e.enum("TransactionResultCode",{txFeeBumpInnerSuccess:1,txSuccess:0,txFailed:-1,txTooEarly:-2,txTooLate:-3,txMissingOperation:-4,txBadSeq:-5,txBadAuth:-6,txInsufficientBalance:-7,txNoAccount:-8,txInsufficientFee:-9,txBadAuthExtra:-10,txInternalError:-11,txNotSupported:-12,txFeeBumpInnerFailed:-13,txBadSponsorship:-14,txBadMinSeqAgeOrGap:-15,txMalformed:-16,txSorobanInvalid:-17}),e.union("InnerTransactionResultResult",{switchOn:e.lookup("TransactionResultCode"),switchName:"code",switches:[["txSuccess","results"],["txFailed","results"],["txTooEarly",e.void()],["txTooLate",e.void()],["txMissingOperation",e.void()],["txBadSeq",e.void()],["txBadAuth",e.void()],["txInsufficientBalance",e.void()],["txNoAccount",e.void()],["txInsufficientFee",e.void()],["txBadAuthExtra",e.void()],["txInternalError",e.void()],["txNotSupported",e.void()],["txBadSponsorship",e.void()],["txBadMinSeqAgeOrGap",e.void()],["txMalformed",e.void()],["txSorobanInvalid",e.void()]],arms:{results:e.varArray(e.lookup("OperationResult"),2147483647)}}),e.union("InnerTransactionResultExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("InnerTransactionResult",[["feeCharged",e.lookup("Int64")],["result",e.lookup("InnerTransactionResultResult")],["ext",e.lookup("InnerTransactionResultExt")]]),e.struct("InnerTransactionResultPair",[["transactionHash",e.lookup("Hash")],["result",e.lookup("InnerTransactionResult")]]),e.union("TransactionResultResult",{switchOn:e.lookup("TransactionResultCode"),switchName:"code",switches:[["txFeeBumpInnerSuccess","innerResultPair"],["txFeeBumpInnerFailed","innerResultPair"],["txSuccess","results"],["txFailed","results"],["txTooEarly",e.void()],["txTooLate",e.void()],["txMissingOperation",e.void()],["txBadSeq",e.void()],["txBadAuth",e.void()],["txInsufficientBalance",e.void()],["txNoAccount",e.void()],["txInsufficientFee",e.void()],["txBadAuthExtra",e.void()],["txInternalError",e.void()],["txNotSupported",e.void()],["txBadSponsorship",e.void()],["txBadMinSeqAgeOrGap",e.void()],["txMalformed",e.void()],["txSorobanInvalid",e.void()]],arms:{innerResultPair:e.lookup("InnerTransactionResultPair"),results:e.varArray(e.lookup("OperationResult"),2147483647)}}),e.union("TransactionResultExt",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.struct("TransactionResult",[["feeCharged",e.lookup("Int64")],["result",e.lookup("TransactionResultResult")],["ext",e.lookup("TransactionResultExt")]]),e.typedef("Hash",e.opaque(32)),e.typedef("Uint256",e.opaque(32)),e.typedef("Uint32",e.uint()),e.typedef("Int32",e.int()),e.typedef("Uint64",e.uhyper()),e.typedef("Int64",e.hyper()),e.typedef("TimePoint",e.lookup("Uint64")),e.typedef("Duration",e.lookup("Uint64")),e.union("ExtensionPoint",{switchOn:e.int(),switchName:"v",switches:[[0,e.void()]],arms:{}}),e.enum("CryptoKeyType",{keyTypeEd25519:0,keyTypePreAuthTx:1,keyTypeHashX:2,keyTypeEd25519SignedPayload:3,keyTypeMuxedEd25519:256}),e.enum("PublicKeyType",{publicKeyTypeEd25519:0}),e.enum("SignerKeyType",{signerKeyTypeEd25519:0,signerKeyTypePreAuthTx:1,signerKeyTypeHashX:2,signerKeyTypeEd25519SignedPayload:3}),e.union("PublicKey",{switchOn:e.lookup("PublicKeyType"),switchName:"type",switches:[["publicKeyTypeEd25519","ed25519"]],arms:{ed25519:e.lookup("Uint256")}}),e.struct("SignerKeyEd25519SignedPayload",[["ed25519",e.lookup("Uint256")],["payload",e.varOpaque(64)]]),e.union("SignerKey",{switchOn:e.lookup("SignerKeyType"),switchName:"type",switches:[["signerKeyTypeEd25519","ed25519"],["signerKeyTypePreAuthTx","preAuthTx"],["signerKeyTypeHashX","hashX"],["signerKeyTypeEd25519SignedPayload","ed25519SignedPayload"]],arms:{ed25519:e.lookup("Uint256"),preAuthTx:e.lookup("Uint256"),hashX:e.lookup("Uint256"),ed25519SignedPayload:e.lookup("SignerKeyEd25519SignedPayload")}}),e.typedef("Signature",e.varOpaque(64)),e.typedef("SignatureHint",e.opaque(4)),e.typedef("NodeId",e.lookup("PublicKey")),e.typedef("AccountId",e.lookup("PublicKey")),e.struct("Curve25519Secret",[["key",e.opaque(32)]]),e.struct("Curve25519Public",[["key",e.opaque(32)]]),e.struct("HmacSha256Key",[["key",e.opaque(32)]]),e.struct("HmacSha256Mac",[["mac",e.opaque(32)]]),e.struct("ShortHashSeed",[["seed",e.opaque(16)]]),e.enum("BinaryFuseFilterType",{binaryFuseFilter8Bit:0,binaryFuseFilter16Bit:1,binaryFuseFilter32Bit:2}),e.struct("SerializedBinaryFuseFilter",[["type",e.lookup("BinaryFuseFilterType")],["inputHashSeed",e.lookup("ShortHashSeed")],["filterSeed",e.lookup("ShortHashSeed")],["segmentLength",e.lookup("Uint32")],["segementLengthMask",e.lookup("Uint32")],["segmentCount",e.lookup("Uint32")],["segmentCountLength",e.lookup("Uint32")],["fingerprintLength",e.lookup("Uint32")],["fingerprints",e.varOpaque()]]),e.enum("ScValType",{scvBool:0,scvVoid:1,scvError:2,scvU32:3,scvI32:4,scvU64:5,scvI64:6,scvTimepoint:7,scvDuration:8,scvU128:9,scvI128:10,scvU256:11,scvI256:12,scvBytes:13,scvString:14,scvSymbol:15,scvVec:16,scvMap:17,scvAddress:18,scvContractInstance:19,scvLedgerKeyContractInstance:20,scvLedgerKeyNonce:21}),e.enum("ScErrorType",{sceContract:0,sceWasmVm:1,sceContext:2,sceStorage:3,sceObject:4,sceCrypto:5,sceEvents:6,sceBudget:7,sceValue:8,sceAuth:9}),e.enum("ScErrorCode",{scecArithDomain:0,scecIndexBounds:1,scecInvalidInput:2,scecMissingValue:3,scecExistingValue:4,scecExceededLimit:5,scecInvalidAction:6,scecInternalError:7,scecUnexpectedType:8,scecUnexpectedSize:9}),e.union("ScError",{switchOn:e.lookup("ScErrorType"),switchName:"type",switches:[["sceContract","contractCode"],["sceWasmVm","code"],["sceContext","code"],["sceStorage","code"],["sceObject","code"],["sceCrypto","code"],["sceEvents","code"],["sceBudget","code"],["sceValue","code"],["sceAuth","code"]],arms:{contractCode:e.lookup("Uint32"),code:e.lookup("ScErrorCode")}}),e.struct("UInt128Parts",[["hi",e.lookup("Uint64")],["lo",e.lookup("Uint64")]]),e.struct("Int128Parts",[["hi",e.lookup("Int64")],["lo",e.lookup("Uint64")]]),e.struct("UInt256Parts",[["hiHi",e.lookup("Uint64")],["hiLo",e.lookup("Uint64")],["loHi",e.lookup("Uint64")],["loLo",e.lookup("Uint64")]]),e.struct("Int256Parts",[["hiHi",e.lookup("Int64")],["hiLo",e.lookup("Uint64")],["loHi",e.lookup("Uint64")],["loLo",e.lookup("Uint64")]]),e.enum("ContractExecutableType",{contractExecutableWasm:0,contractExecutableStellarAsset:1}),e.union("ContractExecutable",{switchOn:e.lookup("ContractExecutableType"),switchName:"type",switches:[["contractExecutableWasm","wasmHash"],["contractExecutableStellarAsset",e.void()]],arms:{wasmHash:e.lookup("Hash")}}),e.enum("ScAddressType",{scAddressTypeAccount:0,scAddressTypeContract:1}),e.union("ScAddress",{switchOn:e.lookup("ScAddressType"),switchName:"type",switches:[["scAddressTypeAccount","accountId"],["scAddressTypeContract","contractId"]],arms:{accountId:e.lookup("AccountId"),contractId:e.lookup("Hash")}}),e.const("SCSYMBOL_LIMIT",32),e.typedef("ScVec",e.varArray(e.lookup("ScVal"),2147483647)),e.typedef("ScMap",e.varArray(e.lookup("ScMapEntry"),2147483647)),e.typedef("ScBytes",e.varOpaque()),e.typedef("ScString",e.string()),e.typedef("ScSymbol",e.string(32)),e.struct("ScNonceKey",[["nonce",e.lookup("Int64")]]),e.struct("ScContractInstance",[["executable",e.lookup("ContractExecutable")],["storage",e.option(e.lookup("ScMap"))]]),e.union("ScVal",{switchOn:e.lookup("ScValType"),switchName:"type",switches:[["scvBool","b"],["scvVoid",e.void()],["scvError","error"],["scvU32","u32"],["scvI32","i32"],["scvU64","u64"],["scvI64","i64"],["scvTimepoint","timepoint"],["scvDuration","duration"],["scvU128","u128"],["scvI128","i128"],["scvU256","u256"],["scvI256","i256"],["scvBytes","bytes"],["scvString","str"],["scvSymbol","sym"],["scvVec","vec"],["scvMap","map"],["scvAddress","address"],["scvLedgerKeyContractInstance",e.void()],["scvLedgerKeyNonce","nonceKey"],["scvContractInstance","instance"]],arms:{b:e.bool(),error:e.lookup("ScError"),u32:e.lookup("Uint32"),i32:e.lookup("Int32"),u64:e.lookup("Uint64"),i64:e.lookup("Int64"),timepoint:e.lookup("TimePoint"),duration:e.lookup("Duration"),u128:e.lookup("UInt128Parts"),i128:e.lookup("Int128Parts"),u256:e.lookup("UInt256Parts"),i256:e.lookup("Int256Parts"),bytes:e.lookup("ScBytes"),str:e.lookup("ScString"),sym:e.lookup("ScSymbol"),vec:e.option(e.lookup("ScVec")),map:e.option(e.lookup("ScMap")),address:e.lookup("ScAddress"),nonceKey:e.lookup("ScNonceKey"),instance:e.lookup("ScContractInstance")}}),e.struct("ScMapEntry",[["key",e.lookup("ScVal")],["val",e.lookup("ScVal")]]),e.enum("ScEnvMetaKind",{scEnvMetaKindInterfaceVersion:0}),e.struct("ScEnvMetaEntryInterfaceVersion",[["protocol",e.lookup("Uint32")],["preRelease",e.lookup("Uint32")]]),e.union("ScEnvMetaEntry",{switchOn:e.lookup("ScEnvMetaKind"),switchName:"kind",switches:[["scEnvMetaKindInterfaceVersion","interfaceVersion"]],arms:{interfaceVersion:e.lookup("ScEnvMetaEntryInterfaceVersion")}}),e.struct("ScMetaV0",[["key",e.string()],["val",e.string()]]),e.enum("ScMetaKind",{scMetaV0:0}),e.union("ScMetaEntry",{switchOn:e.lookup("ScMetaKind"),switchName:"kind",switches:[["scMetaV0","v0"]],arms:{v0:e.lookup("ScMetaV0")}}),e.const("SC_SPEC_DOC_LIMIT",1024),e.enum("ScSpecType",{scSpecTypeVal:0,scSpecTypeBool:1,scSpecTypeVoid:2,scSpecTypeError:3,scSpecTypeU32:4,scSpecTypeI32:5,scSpecTypeU64:6,scSpecTypeI64:7,scSpecTypeTimepoint:8,scSpecTypeDuration:9,scSpecTypeU128:10,scSpecTypeI128:11,scSpecTypeU256:12,scSpecTypeI256:13,scSpecTypeBytes:14,scSpecTypeString:16,scSpecTypeSymbol:17,scSpecTypeAddress:19,scSpecTypeOption:1e3,scSpecTypeResult:1001,scSpecTypeVec:1002,scSpecTypeMap:1004,scSpecTypeTuple:1005,scSpecTypeBytesN:1006,scSpecTypeUdt:2e3}),e.struct("ScSpecTypeOption",[["valueType",e.lookup("ScSpecTypeDef")]]),e.struct("ScSpecTypeResult",[["okType",e.lookup("ScSpecTypeDef")],["errorType",e.lookup("ScSpecTypeDef")]]),e.struct("ScSpecTypeVec",[["elementType",e.lookup("ScSpecTypeDef")]]),e.struct("ScSpecTypeMap",[["keyType",e.lookup("ScSpecTypeDef")],["valueType",e.lookup("ScSpecTypeDef")]]),e.struct("ScSpecTypeTuple",[["valueTypes",e.varArray(e.lookup("ScSpecTypeDef"),12)]]),e.struct("ScSpecTypeBytesN",[["n",e.lookup("Uint32")]]),e.struct("ScSpecTypeUdt",[["name",e.string(60)]]),e.union("ScSpecTypeDef",{switchOn:e.lookup("ScSpecType"),switchName:"type",switches:[["scSpecTypeVal",e.void()],["scSpecTypeBool",e.void()],["scSpecTypeVoid",e.void()],["scSpecTypeError",e.void()],["scSpecTypeU32",e.void()],["scSpecTypeI32",e.void()],["scSpecTypeU64",e.void()],["scSpecTypeI64",e.void()],["scSpecTypeTimepoint",e.void()],["scSpecTypeDuration",e.void()],["scSpecTypeU128",e.void()],["scSpecTypeI128",e.void()],["scSpecTypeU256",e.void()],["scSpecTypeI256",e.void()],["scSpecTypeBytes",e.void()],["scSpecTypeString",e.void()],["scSpecTypeSymbol",e.void()],["scSpecTypeAddress",e.void()],["scSpecTypeOption","option"],["scSpecTypeResult","result"],["scSpecTypeVec","vec"],["scSpecTypeMap","map"],["scSpecTypeTuple","tuple"],["scSpecTypeBytesN","bytesN"],["scSpecTypeUdt","udt"]],arms:{option:e.lookup("ScSpecTypeOption"),result:e.lookup("ScSpecTypeResult"),vec:e.lookup("ScSpecTypeVec"),map:e.lookup("ScSpecTypeMap"),tuple:e.lookup("ScSpecTypeTuple"),bytesN:e.lookup("ScSpecTypeBytesN"),udt:e.lookup("ScSpecTypeUdt")}}),e.struct("ScSpecUdtStructFieldV0",[["doc",e.string(t)],["name",e.string(30)],["type",e.lookup("ScSpecTypeDef")]]),e.struct("ScSpecUdtStructV0",[["doc",e.string(t)],["lib",e.string(80)],["name",e.string(60)],["fields",e.varArray(e.lookup("ScSpecUdtStructFieldV0"),40)]]),e.struct("ScSpecUdtUnionCaseVoidV0",[["doc",e.string(t)],["name",e.string(60)]]),e.struct("ScSpecUdtUnionCaseTupleV0",[["doc",e.string(t)],["name",e.string(60)],["type",e.varArray(e.lookup("ScSpecTypeDef"),12)]]),e.enum("ScSpecUdtUnionCaseV0Kind",{scSpecUdtUnionCaseVoidV0:0,scSpecUdtUnionCaseTupleV0:1}),e.union("ScSpecUdtUnionCaseV0",{switchOn:e.lookup("ScSpecUdtUnionCaseV0Kind"),switchName:"kind",switches:[["scSpecUdtUnionCaseVoidV0","voidCase"],["scSpecUdtUnionCaseTupleV0","tupleCase"]],arms:{voidCase:e.lookup("ScSpecUdtUnionCaseVoidV0"),tupleCase:e.lookup("ScSpecUdtUnionCaseTupleV0")}}),e.struct("ScSpecUdtUnionV0",[["doc",e.string(t)],["lib",e.string(80)],["name",e.string(60)],["cases",e.varArray(e.lookup("ScSpecUdtUnionCaseV0"),50)]]),e.struct("ScSpecUdtEnumCaseV0",[["doc",e.string(t)],["name",e.string(60)],["value",e.lookup("Uint32")]]),e.struct("ScSpecUdtEnumV0",[["doc",e.string(t)],["lib",e.string(80)],["name",e.string(60)],["cases",e.varArray(e.lookup("ScSpecUdtEnumCaseV0"),50)]]),e.struct("ScSpecUdtErrorEnumCaseV0",[["doc",e.string(t)],["name",e.string(60)],["value",e.lookup("Uint32")]]),e.struct("ScSpecUdtErrorEnumV0",[["doc",e.string(t)],["lib",e.string(80)],["name",e.string(60)],["cases",e.varArray(e.lookup("ScSpecUdtErrorEnumCaseV0"),50)]]),e.struct("ScSpecFunctionInputV0",[["doc",e.string(t)],["name",e.string(30)],["type",e.lookup("ScSpecTypeDef")]]),e.struct("ScSpecFunctionV0",[["doc",e.string(t)],["name",e.lookup("ScSymbol")],["inputs",e.varArray(e.lookup("ScSpecFunctionInputV0"),10)],["outputs",e.varArray(e.lookup("ScSpecTypeDef"),1)]]),e.enum("ScSpecEntryKind",{scSpecEntryFunctionV0:0,scSpecEntryUdtStructV0:1,scSpecEntryUdtUnionV0:2,scSpecEntryUdtEnumV0:3,scSpecEntryUdtErrorEnumV0:4}),e.union("ScSpecEntry",{switchOn:e.lookup("ScSpecEntryKind"),switchName:"kind",switches:[["scSpecEntryFunctionV0","functionV0"],["scSpecEntryUdtStructV0","udtStructV0"],["scSpecEntryUdtUnionV0","udtUnionV0"],["scSpecEntryUdtEnumV0","udtEnumV0"],["scSpecEntryUdtErrorEnumV0","udtErrorEnumV0"]],arms:{functionV0:e.lookup("ScSpecFunctionV0"),udtStructV0:e.lookup("ScSpecUdtStructV0"),udtUnionV0:e.lookup("ScSpecUdtUnionV0"),udtEnumV0:e.lookup("ScSpecUdtEnumV0"),udtErrorEnumV0:e.lookup("ScSpecUdtErrorEnumV0")}}),e.struct("ConfigSettingContractExecutionLanesV0",[["ledgerMaxTxCount",e.lookup("Uint32")]]),e.struct("ConfigSettingContractComputeV0",[["ledgerMaxInstructions",e.lookup("Int64")],["txMaxInstructions",e.lookup("Int64")],["feeRatePerInstructionsIncrement",e.lookup("Int64")],["txMemoryLimit",e.lookup("Uint32")]]),e.struct("ConfigSettingContractLedgerCostV0",[["ledgerMaxReadLedgerEntries",e.lookup("Uint32")],["ledgerMaxReadBytes",e.lookup("Uint32")],["ledgerMaxWriteLedgerEntries",e.lookup("Uint32")],["ledgerMaxWriteBytes",e.lookup("Uint32")],["txMaxReadLedgerEntries",e.lookup("Uint32")],["txMaxReadBytes",e.lookup("Uint32")],["txMaxWriteLedgerEntries",e.lookup("Uint32")],["txMaxWriteBytes",e.lookup("Uint32")],["feeReadLedgerEntry",e.lookup("Int64")],["feeWriteLedgerEntry",e.lookup("Int64")],["feeRead1Kb",e.lookup("Int64")],["bucketListTargetSizeBytes",e.lookup("Int64")],["writeFee1KbBucketListLow",e.lookup("Int64")],["writeFee1KbBucketListHigh",e.lookup("Int64")],["bucketListWriteFeeGrowthFactor",e.lookup("Uint32")]]),e.struct("ConfigSettingContractHistoricalDataV0",[["feeHistorical1Kb",e.lookup("Int64")]]),e.struct("ConfigSettingContractEventsV0",[["txMaxContractEventsSizeBytes",e.lookup("Uint32")],["feeContractEvents1Kb",e.lookup("Int64")]]),e.struct("ConfigSettingContractBandwidthV0",[["ledgerMaxTxsSizeBytes",e.lookup("Uint32")],["txMaxSizeBytes",e.lookup("Uint32")],["feeTxSize1Kb",e.lookup("Int64")]]),e.enum("ContractCostType",{wasmInsnExec:0,memAlloc:1,memCpy:2,memCmp:3,dispatchHostFunction:4,visitObject:5,valSer:6,valDeser:7,computeSha256Hash:8,computeEd25519PubKey:9,verifyEd25519Sig:10,vmInstantiation:11,vmCachedInstantiation:12,invokeVmFunction:13,computeKeccak256Hash:14,decodeEcdsaCurve256Sig:15,recoverEcdsaSecp256k1Key:16,int256AddSub:17,int256Mul:18,int256Div:19,int256Pow:20,int256Shift:21,chaCha20DrawBytes:22,parseWasmInstructions:23,parseWasmFunctions:24,parseWasmGlobals:25,parseWasmTableEntries:26,parseWasmTypes:27,parseWasmDataSegments:28,parseWasmElemSegments:29,parseWasmImports:30,parseWasmExports:31,parseWasmDataSegmentBytes:32,instantiateWasmInstructions:33,instantiateWasmFunctions:34,instantiateWasmGlobals:35,instantiateWasmTableEntries:36,instantiateWasmTypes:37,instantiateWasmDataSegments:38,instantiateWasmElemSegments:39,instantiateWasmImports:40,instantiateWasmExports:41,instantiateWasmDataSegmentBytes:42,sec1DecodePointUncompressed:43,verifyEcdsaSecp256r1Sig:44,bls12381EncodeFp:45,bls12381DecodeFp:46,bls12381G1CheckPointOnCurve:47,bls12381G1CheckPointInSubgroup:48,bls12381G2CheckPointOnCurve:49,bls12381G2CheckPointInSubgroup:50,bls12381G1ProjectiveToAffine:51,bls12381G2ProjectiveToAffine:52,bls12381G1Add:53,bls12381G1Mul:54,bls12381G1Msm:55,bls12381MapFpToG1:56,bls12381HashToG1:57,bls12381G2Add:58,bls12381G2Mul:59,bls12381G2Msm:60,bls12381MapFp2ToG2:61,bls12381HashToG2:62,bls12381Pairing:63,bls12381FrFromU256:64,bls12381FrToU256:65,bls12381FrAddSub:66,bls12381FrMul:67,bls12381FrPow:68,bls12381FrInv:69}),e.struct("ContractCostParamEntry",[["ext",e.lookup("ExtensionPoint")],["constTerm",e.lookup("Int64")],["linearTerm",e.lookup("Int64")]]),e.struct("StateArchivalSettings",[["maxEntryTtl",e.lookup("Uint32")],["minTemporaryTtl",e.lookup("Uint32")],["minPersistentTtl",e.lookup("Uint32")],["persistentRentRateDenominator",e.lookup("Int64")],["tempRentRateDenominator",e.lookup("Int64")],["maxEntriesToArchive",e.lookup("Uint32")],["bucketListSizeWindowSampleSize",e.lookup("Uint32")],["bucketListWindowSamplePeriod",e.lookup("Uint32")],["evictionScanSize",e.lookup("Uint32")],["startingEvictionScanLevel",e.lookup("Uint32")]]),e.struct("EvictionIterator",[["bucketListLevel",e.lookup("Uint32")],["isCurrBucket",e.bool()],["bucketFileOffset",e.lookup("Uint64")]]),e.const("CONTRACT_COST_COUNT_LIMIT",1024),e.typedef("ContractCostParams",e.varArray(e.lookup("ContractCostParamEntry"),e.lookup("CONTRACT_COST_COUNT_LIMIT"))),e.enum("ConfigSettingId",{configSettingContractMaxSizeBytes:0,configSettingContractComputeV0:1,configSettingContractLedgerCostV0:2,configSettingContractHistoricalDataV0:3,configSettingContractEventsV0:4,configSettingContractBandwidthV0:5,configSettingContractCostParamsCpuInstructions:6,configSettingContractCostParamsMemoryBytes:7,configSettingContractDataKeySizeBytes:8,configSettingContractDataEntrySizeBytes:9,configSettingStateArchival:10,configSettingContractExecutionLanes:11,configSettingBucketlistSizeWindow:12,configSettingEvictionIterator:13}),e.union("ConfigSettingEntry",{switchOn:e.lookup("ConfigSettingId"),switchName:"configSettingId",switches:[["configSettingContractMaxSizeBytes","contractMaxSizeBytes"],["configSettingContractComputeV0","contractCompute"],["configSettingContractLedgerCostV0","contractLedgerCost"],["configSettingContractHistoricalDataV0","contractHistoricalData"],["configSettingContractEventsV0","contractEvents"],["configSettingContractBandwidthV0","contractBandwidth"],["configSettingContractCostParamsCpuInstructions","contractCostParamsCpuInsns"],["configSettingContractCostParamsMemoryBytes","contractCostParamsMemBytes"],["configSettingContractDataKeySizeBytes","contractDataKeySizeBytes"],["configSettingContractDataEntrySizeBytes","contractDataEntrySizeBytes"],["configSettingStateArchival","stateArchivalSettings"],["configSettingContractExecutionLanes","contractExecutionLanes"],["configSettingBucketlistSizeWindow","bucketListSizeWindow"],["configSettingEvictionIterator","evictionIterator"]],arms:{contractMaxSizeBytes:e.lookup("Uint32"),contractCompute:e.lookup("ConfigSettingContractComputeV0"),contractLedgerCost:e.lookup("ConfigSettingContractLedgerCostV0"),contractHistoricalData:e.lookup("ConfigSettingContractHistoricalDataV0"),contractEvents:e.lookup("ConfigSettingContractEventsV0"),contractBandwidth:e.lookup("ConfigSettingContractBandwidthV0"),contractCostParamsCpuInsns:e.lookup("ContractCostParams"),contractCostParamsMemBytes:e.lookup("ContractCostParams"),contractDataKeySizeBytes:e.lookup("Uint32"),contractDataEntrySizeBytes:e.lookup("Uint32"),stateArchivalSettings:e.lookup("StateArchivalSettings"),contractExecutionLanes:e.lookup("ConfigSettingContractExecutionLanesV0"),bucketListSizeWindow:e.varArray(e.lookup("Uint64"),2147483647),evictionIterator:e.lookup("EvictionIterator")}})}));t.default=s},"./node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.LiquidityPoolFeeV18=void 0,t.getLiquidityPoolId=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if("constant_product"!==e)throw new Error("liquidityPoolType is invalid");var r=t.assetA,o=t.assetB,l=t.fee;if(!(r&&r instanceof i.Asset))throw new Error("assetA is invalid");if(!(o&&o instanceof i.Asset))throw new Error("assetB is invalid");if(!l||l!==u)throw new Error("fee is invalid");if(-1!==i.Asset.compare(r,o))throw new Error("Assets are not in lexicographic order");var c=s.default.LiquidityPoolType.liquidityPoolConstantProduct().toXDR(),d=new s.default.LiquidityPoolConstantProductParameters({assetA:r.toXDRObject(),assetB:o.toXDRObject(),fee:l}).toXDR(),p=n.concat([c,d]);return(0,a.hash)(p)};var o,s=(o=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&o.__esModule?o:{default:o},i=r("./node_modules/@stellar/stellar-base/lib/asset.js"),a=r("./node_modules/@stellar/stellar-base/lib/hashing.js");var u=t.LiquidityPoolFeeV18=30},"./node_modules/@stellar/stellar-base/lib/hashing.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hash=function(e){var t=new n.sha256;return t.update(e,"utf8"),t.digest()};var n=r("./node_modules/sha.js/index.js")},"./node_modules/@stellar/stellar-base/lib/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={xdr:!0,cereal:!0,hash:!0,sign:!0,verify:!0,FastSigning:!0,getLiquidityPoolId:!0,LiquidityPoolFeeV18:!0,Keypair:!0,UnsignedHyper:!0,Hyper:!0,TransactionBase:!0,Transaction:!0,FeeBumpTransaction:!0,TransactionBuilder:!0,TimeoutInfinite:!0,BASE_FEE:!0,Asset:!0,LiquidityPoolAsset:!0,LiquidityPoolId:!0,Operation:!0,AuthRequiredFlag:!0,AuthRevocableFlag:!0,AuthImmutableFlag:!0,AuthClawbackEnabledFlag:!0,Account:!0,MuxedAccount:!0,Claimant:!0,Networks:!0,StrKey:!0,SignerKey:!0,Soroban:!0,decodeAddressToMuxedAccount:!0,encodeMuxedAccountToAddress:!0,extractBaseAddress:!0,encodeMuxedAccount:!0,Contract:!0,Address:!0};Object.defineProperty(t,"Account",{enumerable:!0,get:function(){return w.Account}}),Object.defineProperty(t,"Address",{enumerable:!0,get:function(){return O.Address}}),Object.defineProperty(t,"Asset",{enumerable:!0,get:function(){return y.Asset}}),Object.defineProperty(t,"AuthClawbackEnabledFlag",{enumerable:!0,get:function(){return v.AuthClawbackEnabledFlag}}),Object.defineProperty(t,"AuthImmutableFlag",{enumerable:!0,get:function(){return v.AuthImmutableFlag}}),Object.defineProperty(t,"AuthRequiredFlag",{enumerable:!0,get:function(){return v.AuthRequiredFlag}}),Object.defineProperty(t,"AuthRevocableFlag",{enumerable:!0,get:function(){return v.AuthRevocableFlag}}),Object.defineProperty(t,"BASE_FEE",{enumerable:!0,get:function(){return h.BASE_FEE}}),Object.defineProperty(t,"Claimant",{enumerable:!0,get:function(){return _.Claimant}}),Object.defineProperty(t,"Contract",{enumerable:!0,get:function(){return P.Contract}}),Object.defineProperty(t,"FastSigning",{enumerable:!0,get:function(){return a.FastSigning}}),Object.defineProperty(t,"FeeBumpTransaction",{enumerable:!0,get:function(){return f.FeeBumpTransaction}}),Object.defineProperty(t,"Hyper",{enumerable:!0,get:function(){return c.Hyper}}),Object.defineProperty(t,"Keypair",{enumerable:!0,get:function(){return l.Keypair}}),Object.defineProperty(t,"LiquidityPoolAsset",{enumerable:!0,get:function(){return m.LiquidityPoolAsset}}),Object.defineProperty(t,"LiquidityPoolFeeV18",{enumerable:!0,get:function(){return u.LiquidityPoolFeeV18}}),Object.defineProperty(t,"LiquidityPoolId",{enumerable:!0,get:function(){return g.LiquidityPoolId}}),Object.defineProperty(t,"MuxedAccount",{enumerable:!0,get:function(){return S.MuxedAccount}}),Object.defineProperty(t,"Networks",{enumerable:!0,get:function(){return T.Networks}}),Object.defineProperty(t,"Operation",{enumerable:!0,get:function(){return v.Operation}}),Object.defineProperty(t,"SignerKey",{enumerable:!0,get:function(){return k.SignerKey}}),Object.defineProperty(t,"Soroban",{enumerable:!0,get:function(){return A.Soroban}}),Object.defineProperty(t,"StrKey",{enumerable:!0,get:function(){return E.StrKey}}),Object.defineProperty(t,"TimeoutInfinite",{enumerable:!0,get:function(){return h.TimeoutInfinite}}),Object.defineProperty(t,"Transaction",{enumerable:!0,get:function(){return p.Transaction}}),Object.defineProperty(t,"TransactionBase",{enumerable:!0,get:function(){return d.TransactionBase}}),Object.defineProperty(t,"TransactionBuilder",{enumerable:!0,get:function(){return h.TransactionBuilder}}),Object.defineProperty(t,"UnsignedHyper",{enumerable:!0,get:function(){return c.UnsignedHyper}}),Object.defineProperty(t,"cereal",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"decodeAddressToMuxedAccount",{enumerable:!0,get:function(){return x.decodeAddressToMuxedAccount}}),t.default=void 0,Object.defineProperty(t,"encodeMuxedAccount",{enumerable:!0,get:function(){return x.encodeMuxedAccount}}),Object.defineProperty(t,"encodeMuxedAccountToAddress",{enumerable:!0,get:function(){return x.encodeMuxedAccountToAddress}}),Object.defineProperty(t,"extractBaseAddress",{enumerable:!0,get:function(){return x.extractBaseAddress}}),Object.defineProperty(t,"getLiquidityPoolId",{enumerable:!0,get:function(){return u.getLiquidityPoolId}}),Object.defineProperty(t,"hash",{enumerable:!0,get:function(){return i.hash}}),Object.defineProperty(t,"sign",{enumerable:!0,get:function(){return a.sign}}),Object.defineProperty(t,"verify",{enumerable:!0,get:function(){return a.verify}}),Object.defineProperty(t,"xdr",{enumerable:!0,get:function(){return o.default}});var o=L(r("./node_modules/@stellar/stellar-base/lib/xdr.js")),s=L(r("./node_modules/@stellar/stellar-base/lib/jsxdr.js")),i=r("./node_modules/@stellar/stellar-base/lib/hashing.js"),a=r("./node_modules/@stellar/stellar-base/lib/signing.js"),u=r("./node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js"),l=r("./node_modules/@stellar/stellar-base/lib/keypair.js"),c=r("./node_modules/@stellar/js-xdr/dist/xdr.js"),d=r("./node_modules/@stellar/stellar-base/lib/transaction_base.js"),p=r("./node_modules/@stellar/stellar-base/lib/transaction.js"),f=r("./node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js"),h=r("./node_modules/@stellar/stellar-base/lib/transaction_builder.js"),y=r("./node_modules/@stellar/stellar-base/lib/asset.js"),m=r("./node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js"),g=r("./node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js"),v=r("./node_modules/@stellar/stellar-base/lib/operation.js"),b=r("./node_modules/@stellar/stellar-base/lib/memo.js");Object.keys(b).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===b[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return b[e]}}))}));var w=r("./node_modules/@stellar/stellar-base/lib/account.js"),S=r("./node_modules/@stellar/stellar-base/lib/muxed_account.js"),_=r("./node_modules/@stellar/stellar-base/lib/claimant.js"),T=r("./node_modules/@stellar/stellar-base/lib/network.js"),E=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),k=r("./node_modules/@stellar/stellar-base/lib/signerkey.js"),A=r("./node_modules/@stellar/stellar-base/lib/soroban.js"),x=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js"),P=r("./node_modules/@stellar/stellar-base/lib/contract.js"),O=r("./node_modules/@stellar/stellar-base/lib/address.js"),C=r("./node_modules/@stellar/stellar-base/lib/numbers/index.js");Object.keys(C).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===C[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return C[e]}}))}));var I=r("./node_modules/@stellar/stellar-base/lib/scval.js");Object.keys(I).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===I[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return I[e]}}))}));var R=r("./node_modules/@stellar/stellar-base/lib/events.js");Object.keys(R).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===R[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return R[e]}}))}));var B=r("./node_modules/@stellar/stellar-base/lib/sorobandata_builder.js");Object.keys(B).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===B[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return B[e]}}))}));var j=r("./node_modules/@stellar/stellar-base/lib/auth.js");Object.keys(j).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===j[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return j[e]}}))}));var U=r("./node_modules/@stellar/stellar-base/lib/invocation.js");function L(e){return e&&e.__esModule?e:{default:e}}Object.keys(U).forEach((function(e){"default"!==e&&"__esModule"!==e&&(Object.prototype.hasOwnProperty.call(n,e)||e in t&&t[e]===U[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return U[e]}}))}));t.default=e.exports},"./node_modules/@stellar/stellar-base/lib/invocation.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.buildInvocationTree=function e(t){var r=t.function(),i={},l=r.value();switch(r.switch().value){case 0:i.type="execute",i.args={source:o.Address.fromScAddress(l.contractAddress()).toString(),function:l.functionName(),args:l.args().map((function(e){return(0,s.scValToNative)(e)}))};break;case 1:case 2:var c=2===r.switch().value;i.type="create",i.args={};var d=[l.executable(),l.contractIdPreimage()],p=d[0],f=d[1];if(!!p.switch().value!=!!f.switch().value)throw new Error("creation function appears invalid: ".concat(JSON.stringify(l)," (should be wasm+address or token+asset)"));switch(p.switch().value){case 0:var h=f.fromAddress();i.args.type="wasm",i.args.wasm=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){u(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({salt:h.salt().toString("hex"),hash:p.wasmHash().toString("hex"),address:o.Address.fromScAddress(h.address()).toString()},c&&{constructorArgs:l.constructorArgs().map((function(e){return(0,s.scValToNative)(e)}))});break;case 1:i.args.type="sac",i.args.asset=n.Asset.fromOperation(f.fromAsset()).toString();break;default:throw new Error("unknown creation type: ".concat(JSON.stringify(p)))}break;default:throw new Error("unknown invocation type (".concat(r.switch(),"): ").concat(JSON.stringify(r)))}return i.invocations=t.subInvocations().map((function(t){return e(t)})),i},t.walkInvocationTree=function(e,t){l(e,1,t)};var n=r("./node_modules/@stellar/stellar-base/lib/asset.js"),o=r("./node_modules/@stellar/stellar-base/lib/address.js"),s=r("./node_modules/@stellar/stellar-base/lib/scval.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=i(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==i(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t,r,n){!1!==r(e,t,n)&&e.subInvocations().forEach((function(n){return l(n,t+1,r,e)}))}},"./node_modules/@stellar/stellar-base/lib/jsxdr.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=r("./node_modules/@stellar/js-xdr/dist/xdr.js"),o={XdrWriter:n.XdrWriter,XdrReader:n.XdrReader};t.default=o},"./node_modules/@stellar/stellar-base/lib/keypair.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.Keypair=void 0;var o=l(r("./node_modules/tweetnacl/nacl-fast.js")),s=r("./node_modules/@stellar/stellar-base/lib/signing.js"),i=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),a=r("./node_modules/@stellar/stellar-base/lib/hashing.js"),u=l(r("./node_modules/@stellar/stellar-base/lib/xdr.js"));function l(e){return e&&e.__esModule?e:{default:e}}function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,p(n.key),n)}}function p(e){var t=function(e,t){if("object"!=c(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=c(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==c(t)?t:t+""}t.Keypair=function(){return e=function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"ed25519"!==t.type)throw new Error("Invalid keys type");if(this.type=t.type,t.secretKey){if(t.secretKey=n.from(t.secretKey),32!==t.secretKey.length)throw new Error("secretKey length is invalid");if(this._secretSeed=t.secretKey,this._publicKey=(0,s.generate)(t.secretKey),this._secretKey=n.concat([t.secretKey,this._publicKey]),t.publicKey&&!this._publicKey.equals(n.from(t.publicKey)))throw new Error("secretKey does not match publicKey")}else if(this._publicKey=n.from(t.publicKey),32!==this._publicKey.length)throw new Error("publicKey length is invalid")},r=[{key:"fromSecret",value:function(e){var t=i.StrKey.decodeEd25519SecretSeed(e);return this.fromRawEd25519Seed(t)}},{key:"fromRawEd25519Seed",value:function(e){return new this({type:"ed25519",secretKey:e})}},{key:"master",value:function(e){if(!e)throw new Error("No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.");return this.fromRawEd25519Seed((0,a.hash)(e))}},{key:"fromPublicKey",value:function(e){if(32!==(e=i.StrKey.decodeEd25519PublicKey(e)).length)throw new Error("Invalid Stellar public key");return new this({type:"ed25519",publicKey:e})}},{key:"random",value:function(){var e=o.default.randomBytes(32);return this.fromRawEd25519Seed(e)}}],(t=[{key:"xdrAccountId",value:function(){return new u.default.AccountId.publicKeyTypeEd25519(this._publicKey)}},{key:"xdrPublicKey",value:function(){return new u.default.PublicKey.publicKeyTypeEd25519(this._publicKey)}},{key:"xdrMuxedAccount",value:function(e){if(void 0!==e){if("string"!=typeof e)throw new TypeError("expected string for ID, got ".concat(c(e)));return u.default.MuxedAccount.keyTypeMuxedEd25519(new u.default.MuxedAccountMed25519({id:u.default.Uint64.fromString(e),ed25519:this._publicKey}))}return new u.default.MuxedAccount.keyTypeEd25519(this._publicKey)}},{key:"rawPublicKey",value:function(){return this._publicKey}},{key:"signatureHint",value:function(){var e=this.xdrAccountId().toXDR();return e.slice(e.length-4)}},{key:"publicKey",value:function(){return i.StrKey.encodeEd25519PublicKey(this._publicKey)}},{key:"secret",value:function(){if(!this._secretSeed)throw new Error("no secret key available");if("ed25519"===this.type)return i.StrKey.encodeEd25519SecretSeed(this._secretSeed);throw new Error("Invalid Keypair type")}},{key:"rawSecretKey",value:function(){return this._secretSeed}},{key:"canSign",value:function(){return!!this._secretKey}},{key:"sign",value:function(e){if(!this.canSign())throw new Error("cannot sign: no secret key available");return(0,s.sign)(e,this._secretKey)}},{key:"verify",value:function(e,t){return(0,s.verify)(e,t,this._publicKey)}},{key:"signDecorated",value:function(e){var t=this.sign(e),r=this.signatureHint();return new u.default.DecoratedSignature({hint:r,signature:t})}},{key:"signPayloadDecorated",value:function(e){var t=this.sign(e),r=this.signatureHint(),o=n.from(e.slice(-4));return o.length<4&&(o=n.concat([o,n.alloc(4-e.length,0)])),new u.default.DecoratedSignature({hint:o.map((function(e,t){return e^r[t]})),signature:t})}}])&&d(e.prototype,t),r&&d(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,r}()},"./node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LiquidityPoolAsset=void 0;var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/asset.js"),i=r("./node_modules/@stellar/stellar-base/lib/get_liquidity_pool_id.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t,r){return(t=p(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,p(n.key),n)}}function p(e){var t=function(e,t){if("object"!=a(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==a(t)?t:t+""}t.LiquidityPoolAsset=function(){return function(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(t,r,n){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!(t&&t instanceof s.Asset))throw new Error("assetA is invalid");if(!(r&&r instanceof s.Asset))throw new Error("assetB is invalid");if(-1!==s.Asset.compare(t,r))throw new Error("Assets are not in lexicographic order");if(!n||n!==i.LiquidityPoolFeeV18)throw new Error("fee is invalid");this.assetA=t,this.assetB=r,this.fee=n}),[{key:"toXDRObject",value:function(){var e=new o.default.LiquidityPoolConstantProductParameters({assetA:this.assetA.toXDRObject(),assetB:this.assetB.toXDRObject(),fee:this.fee}),t=new o.default.LiquidityPoolParameters("liquidityPoolConstantProduct",e);return new o.default.ChangeTrustAsset("assetTypePoolShare",t)}},{key:"getLiquidityPoolParameters",value:function(){return l(l({},this),{},{assetA:this.assetA,assetB:this.assetB,fee:this.fee})}},{key:"getAssetType",value:function(){return"liquidity_pool_shares"}},{key:"equals",value:function(e){return this.assetA.equals(e.assetA)&&this.assetB.equals(e.assetB)&&this.fee===e.fee}},{key:"toString",value:function(){var e=(0,i.getLiquidityPoolId)("constant_product",this.getLiquidityPoolParameters()).toString("hex");return"liquidity_pool:".concat(e)}}],[{key:"fromOperation",value:function(e){var t=e.switch();if(t===o.default.AssetType.assetTypePoolShare()){var r=e.liquidityPool().constantProduct();return new this(s.Asset.fromOperation(r.assetA()),s.Asset.fromOperation(r.assetB()),r.fee())}throw new Error("Invalid asset type: ".concat(t.name))}}])}()},"./node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LiquidityPoolId=void 0;var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n};function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,a(n.key),n)}}function a(e){var t=function(e,t){if("object"!=s(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=s(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==s(t)?t:t+""}t.LiquidityPoolId=function(){return function(e,t,r){return t&&i(e.prototype,t),r&&i(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!t)throw new Error("liquidityPoolId cannot be empty");if(!/^[a-f0-9]{64}$/.test(t))throw new Error("Liquidity pool ID is not a valid hash");this.liquidityPoolId=t}),[{key:"toXDRObject",value:function(){var e=o.default.PoolId.fromXDR(this.liquidityPoolId,"hex");return new o.default.TrustLineAsset("assetTypePoolShare",e)}},{key:"getLiquidityPoolId",value:function(){return String(this.liquidityPoolId)}},{key:"getAssetType",value:function(){return"liquidity_pool_shares"}},{key:"equals",value:function(e){return this.liquidityPoolId===e.getLiquidityPoolId()}},{key:"toString",value:function(){return"liquidity_pool:".concat(this.liquidityPoolId)}}],[{key:"fromOperation",value:function(e){var t=e.switch();if(t===o.default.AssetType.assetTypePoolShare())return new this(e.liquidityPoolId().toString("hex"));throw new Error("Invalid asset type: ".concat(t.name))}}])}()},"./node_modules/@stellar/stellar-base/lib/memo.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.MemoText=t.MemoReturn=t.MemoNone=t.MemoID=t.MemoHash=t.Memo=void 0;var o=r("./node_modules/@stellar/js-xdr/dist/xdr.js"),s=a(r("./node_modules/@stellar/stellar-base/lib/util/bignumber.js")),i=a(r("./node_modules/@stellar/stellar-base/lib/xdr.js"));function a(e){return e&&e.__esModule?e:{default:e}}function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,c(n.key),n)}}function c(e){var t=function(e,t){if("object"!=u(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==u(t)?t:t+""}var d=t.MemoNone="none",p=t.MemoID="id",f=t.MemoText="text",h=t.MemoHash="hash",y=t.MemoReturn="return";t.Memo=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;switch(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._type=t,this._value=r,this._type){case d:break;case p:e._validateIdValue(r);break;case f:e._validateTextValue(r);break;case h:case y:e._validateHashValue(r),"string"==typeof r&&(this._value=n.from(r,"hex"));break;default:throw new Error("Invalid memo type")}}return t=e,a=[{key:"_validateIdValue",value:function(e){var t,r=new Error("Expects a int64 as a string. Got ".concat(e));if("string"!=typeof e)throw r;try{t=new s.default(e)}catch(e){throw r}if(!t.isFinite())throw r;if(t.isNaN())throw r}},{key:"_validateTextValue",value:function(e){if(!i.default.Memo.armTypeForArm("text").isValid(e))throw new Error("Expects string, array or buffer, max 28 bytes")}},{key:"_validateHashValue",value:function(e){var t,r=new Error("Expects a 32 byte hash value or hex encoded string. Got ".concat(e));if(null==e)throw r;if("string"==typeof e){if(!/^[0-9A-Fa-f]{64}$/g.test(e))throw r;t=n.from(e,"hex")}else{if(!n.isBuffer(e))throw r;t=n.from(e)}if(!t.length||32!==t.length)throw r}},{key:"none",value:function(){return new e(d)}},{key:"text",value:function(t){return new e(f,t)}},{key:"id",value:function(t){return new e(p,t)}},{key:"hash",value:function(t){return new e(h,t)}},{key:"return",value:function(t){return new e(y,t)}},{key:"fromXDRObject",value:function(t){switch(t.arm()){case"id":return e.id(t.value().toString());case"text":return e.text(t.value());case"hash":return e.hash(t.value());case"retHash":return e.return(t.value())}if(void 0===t.value())return e.none();throw new Error("Unknown type")}}],(r=[{key:"type",get:function(){return this._type},set:function(e){throw new Error("Memo is immutable")}},{key:"value",get:function(){switch(this._type){case d:return null;case p:case f:return this._value;case h:case y:return n.from(this._value);default:throw new Error("Invalid memo type")}},set:function(e){throw new Error("Memo is immutable")}},{key:"toXDRObject",value:function(){switch(this._type){case d:return i.default.Memo.memoNone();case p:return i.default.Memo.memoId(o.UnsignedHyper.fromString(this._value));case f:return i.default.Memo.memoText(this._value);case h:return i.default.Memo.memoHash(this._value);case y:return i.default.Memo.memoReturn(this._value);default:return null}}}])&&l(t.prototype,r),a&&l(t,a),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,r,a}()},"./node_modules/@stellar/stellar-base/lib/muxed_account.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MuxedAccount=void 0;var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/account.js"),i=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),a=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js");function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,c(n.key),n)}}function c(e){var t=function(e,t){if("object"!=u(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==u(t)?t:t+""}t.MuxedAccount=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var n=t.accountId();if(!i.StrKey.isValidEd25519PublicKey(n))throw new Error("accountId is invalid");this.account=t,this._muxedXdr=(0,a.encodeMuxedAccount)(n,r),this._mAddress=(0,a.encodeMuxedAccountToAddress)(this._muxedXdr),this._id=r}return function(e,t,r){return t&&l(e.prototype,t),r&&l(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(e,[{key:"baseAccount",value:function(){return this.account}},{key:"accountId",value:function(){return this._mAddress}},{key:"id",value:function(){return this._id}},{key:"setId",value:function(e){if("string"!=typeof e)throw new Error("id should be a string representing a number (uint64)");return this._muxedXdr.med25519().id(o.default.Uint64.fromString(e)),this._mAddress=(0,a.encodeMuxedAccountToAddress)(this._muxedXdr),this._id=e,this}},{key:"sequenceNumber",value:function(){return this.account.sequenceNumber()}},{key:"incrementSequenceNumber",value:function(){return this.account.incrementSequenceNumber()}},{key:"toXDRObject",value:function(){return this._muxedXdr}},{key:"equals",value:function(e){return this.accountId()===e.accountId()}}],[{key:"fromAddress",value:function(t,r){var n=(0,a.decodeAddressToMuxedAccount)(t),o=(0,a.extractBaseAddress)(t),i=n.med25519().id().toString();return new e(new s.Account(o,r),i)}}])}()},"./node_modules/@stellar/stellar-base/lib/network.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Networks=void 0;t.Networks={PUBLIC:"Public Global Stellar Network ; September 2015",TESTNET:"Test SDF Network ; September 2015",FUTURENET:"Test SDF Future Network ; October 2022",SANDBOX:"Local Sandbox Stellar Network ; September 2022",STANDALONE:"Standalone Network ; February 2017"}},"./node_modules/@stellar/stellar-base/lib/numbers/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"Int128",{enumerable:!0,get:function(){return i.Int128}}),Object.defineProperty(t,"Int256",{enumerable:!0,get:function(){return a.Int256}}),Object.defineProperty(t,"ScInt",{enumerable:!0,get:function(){return u.ScInt}}),Object.defineProperty(t,"Uint128",{enumerable:!0,get:function(){return o.Uint128}}),Object.defineProperty(t,"Uint256",{enumerable:!0,get:function(){return s.Uint256}}),Object.defineProperty(t,"XdrLargeInt",{enumerable:!0,get:function(){return n.XdrLargeInt}}),t.scValToBigInt=function(e){var t=n.XdrLargeInt.getType(e.switch().name);switch(e.switch().name){case"scvU32":case"scvI32":return BigInt(e.value());case"scvU64":case"scvI64":return new n.XdrLargeInt(t,e.value()).toBigInt();case"scvU128":case"scvI128":return new n.XdrLargeInt(t,[e.value().lo(),e.value().hi()]).toBigInt();case"scvU256":case"scvI256":return new n.XdrLargeInt(t,[e.value().loLo(),e.value().loHi(),e.value().hiLo(),e.value().hiHi()]).toBigInt();default:throw TypeError("expected integer type, got ".concat(e.switch()))}};var n=r("./node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js"),o=r("./node_modules/@stellar/stellar-base/lib/numbers/uint128.js"),s=r("./node_modules/@stellar/stellar-base/lib/numbers/uint256.js"),i=r("./node_modules/@stellar/stellar-base/lib/numbers/int128.js"),a=r("./node_modules/@stellar/stellar-base/lib/numbers/int256.js"),u=r("./node_modules/@stellar/stellar-base/lib/numbers/sc_int.js")},"./node_modules/@stellar/stellar-base/lib/numbers/int128.js":(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Int128=void 0;var o=r("./node_modules/@stellar/js-xdr/dist/xdr.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i(n.key),n)}}function i(e){var t=function(e,t){if("object"!=n(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,t||"default");if("object"!=n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==n(t)?t:t+""}function a(e,t,r){return t=l(t),function(e,t){if(t&&("object"==n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,u()?Reflect.construct(t,r||[],l(e).constructor):t.apply(e,r))}function u(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(u=function(){return!!e})()}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}(t.Int128=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return a(this,t,[r])}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&c(e,t)}(t,e),r=t,(n=[{key:"unsigned",get:function(){return!1}},{key:"size",get:function(){return 128}}])&&s(r.prototype,n),o&&s(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(o.LargeInt)).defineIntBoundaries()},"./node_modules/@stellar/stellar-base/lib/numbers/int256.js":(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Int256=void 0;var o=r("./node_modules/@stellar/js-xdr/dist/xdr.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i(n.key),n)}}function i(e){var t=function(e,t){if("object"!=n(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,t||"default");if("object"!=n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==n(t)?t:t+""}function a(e,t,r){return t=l(t),function(e,t){if(t&&("object"==n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,u()?Reflect.construct(t,r||[],l(e).constructor):t.apply(e,r))}function u(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(u=function(){return!!e})()}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}(t.Int256=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return a(this,t,[r])}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&c(e,t)}(t,e),r=t,(n=[{key:"unsigned",get:function(){return!1}},{key:"size",get:function(){return 256}}])&&s(r.prototype,n),o&&s(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(o.LargeInt)).defineIntBoundaries()},"./node_modules/@stellar/stellar-base/lib/numbers/sc_int.js":(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.ScInt=void 0;var o=r("./node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i(n.key),n)}}function i(e){var t=function(e,t){if("object"!=n(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,t||"default");if("object"!=n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==n(t)?t:t+""}function a(e,t,r){return t=l(t),function(e,t){if(t&&("object"==n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,u()?Reflect.construct(t,r||[],l(e).constructor):t.apply(e,r))}function u(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(u=function(){return!!e})()}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}t.ScInt=function(e){function t(e,r){var n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=e<0,s=null!==(n=null==r?void 0:r.type)&&void 0!==n?n:"";if(s.startsWith("u")&&o)throw TypeError("specified type ".concat(r.type," yet negative (").concat(e,")"));if(""===s){s=o?"i":"u";var i=function(e){var t,r=e.toString(2).length;return null!==(t=[64,128,256].find((function(e){return r<=e})))&&void 0!==t?t:r}(e);switch(i){case 64:case 128:case 256:s+=i.toString();break;default:throw RangeError("expected 64/128/256 bits for input (".concat(e,"), got ").concat(i))}}return a(this,t,[s,e])}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&c(e,t)}(t,e),r=t,n&&s(r.prototype,n),o&&s(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(o.XdrLargeInt)},"./node_modules/@stellar/stellar-base/lib/numbers/uint128.js":(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Uint128=void 0;var o=r("./node_modules/@stellar/js-xdr/dist/xdr.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i(n.key),n)}}function i(e){var t=function(e,t){if("object"!=n(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,t||"default");if("object"!=n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==n(t)?t:t+""}function a(e,t,r){return t=l(t),function(e,t){if(t&&("object"==n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,u()?Reflect.construct(t,r||[],l(e).constructor):t.apply(e,r))}function u(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(u=function(){return!!e})()}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}(t.Uint128=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return a(this,t,[r])}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&c(e,t)}(t,e),r=t,(n=[{key:"unsigned",get:function(){return!0}},{key:"size",get:function(){return 128}}])&&s(r.prototype,n),o&&s(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(o.LargeInt)).defineIntBoundaries()},"./node_modules/@stellar/stellar-base/lib/numbers/uint256.js":(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Uint256=void 0;var o=r("./node_modules/@stellar/js-xdr/dist/xdr.js");function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i(n.key),n)}}function i(e){var t=function(e,t){if("object"!=n(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var o=r.call(e,t||"default");if("object"!=n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==n(t)?t:t+""}function a(e,t,r){return t=l(t),function(e,t){if(t&&("object"==n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,u()?Reflect.construct(t,r||[],l(e).constructor):t.apply(e,r))}function u(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(u=function(){return!!e})()}function l(e){return l=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},l(e)}function c(e,t){return c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}(t.Uint256=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return a(this,t,[r])}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&c(e,t)}(t,e),r=t,(n=[{key:"unsigned",get:function(){return!0}},{key:"size",get:function(){return 256}}])&&s(r.prototype,n),o&&s(r,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,n,o}(o.LargeInt)).defineIntBoundaries()},"./node_modules/@stellar/stellar-base/lib/numbers/xdr_large_int.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XdrLargeInt=void 0;var n,o=r("./node_modules/@stellar/js-xdr/dist/xdr.js"),s=r("./node_modules/@stellar/stellar-base/lib/numbers/uint128.js"),i=r("./node_modules/@stellar/stellar-base/lib/numbers/uint256.js"),a=r("./node_modules/@stellar/stellar-base/lib/numbers/int128.js"),u=r("./node_modules/@stellar/stellar-base/lib/numbers/int256.js"),l=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n};function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,f(n.key),n)}}function p(e,t,r){return(t=f(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function f(e){var t=function(e,t){if("object"!=c(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=c(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==c(t)?t:t+""}t.XdrLargeInt=function(){return function(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(t,r){switch(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),p(this,"int",void 0),p(this,"type",void 0),r instanceof Array||(r=[r]),r=r.map((function(t){return"bigint"==typeof t?t:t instanceof e?t.toBigInt():BigInt(t)})),t){case"i64":this.int=new o.Hyper(r);break;case"i128":this.int=new a.Int128(r);break;case"i256":this.int=new u.Int256(r);break;case"u64":this.int=new o.UnsignedHyper(r);break;case"u128":this.int=new s.Uint128(r);break;case"u256":this.int=new i.Uint256(r);break;default:throw TypeError("invalid type: ".concat(t))}this.type=t}),[{key:"toNumber",value:function(){var e=this.int.toBigInt();if(e>Number.MAX_SAFE_INTEGER||e<Number.MIN_SAFE_INTEGER)throw RangeError("value ".concat(e," not in range for Number ")+"[".concat(Number.MAX_SAFE_INTEGER,", ").concat(Number.MIN_SAFE_INTEGER,"]"));return Number(e)}},{key:"toBigInt",value:function(){return this.int.toBigInt()}},{key:"toI64",value:function(){this._sizeCheck(64);var e=this.toBigInt();if(BigInt.asIntN(64,e)!==e)throw RangeError("value too large for i64: ".concat(e));return l.default.ScVal.scvI64(new l.default.Int64(e))}},{key:"toU64",value:function(){return this._sizeCheck(64),l.default.ScVal.scvU64(new l.default.Uint64(BigInt.asUintN(64,this.toBigInt())))}},{key:"toI128",value:function(){this._sizeCheck(128);var e=this.int.toBigInt(),t=BigInt.asIntN(64,e>>64n),r=BigInt.asUintN(64,e);return l.default.ScVal.scvI128(new l.default.Int128Parts({hi:new l.default.Int64(t),lo:new l.default.Uint64(r)}))}},{key:"toU128",value:function(){this._sizeCheck(128);var e=this.int.toBigInt();return l.default.ScVal.scvU128(new l.default.UInt128Parts({hi:new l.default.Uint64(BigInt.asUintN(64,e>>64n)),lo:new l.default.Uint64(BigInt.asUintN(64,e))}))}},{key:"toI256",value:function(){var e=this.int.toBigInt(),t=BigInt.asIntN(64,e>>192n),r=BigInt.asUintN(64,e>>128n),n=BigInt.asUintN(64,e>>64n),o=BigInt.asUintN(64,e);return l.default.ScVal.scvI256(new l.default.Int256Parts({hiHi:new l.default.Int64(t),hiLo:new l.default.Uint64(r),loHi:new l.default.Uint64(n),loLo:new l.default.Uint64(o)}))}},{key:"toU256",value:function(){var e=this.int.toBigInt(),t=BigInt.asUintN(64,e>>192n),r=BigInt.asUintN(64,e>>128n),n=BigInt.asUintN(64,e>>64n),o=BigInt.asUintN(64,e);return l.default.ScVal.scvU256(new l.default.UInt256Parts({hiHi:new l.default.Uint64(t),hiLo:new l.default.Uint64(r),loHi:new l.default.Uint64(n),loLo:new l.default.Uint64(o)}))}},{key:"toScVal",value:function(){switch(this.type){case"i64":return this.toI64();case"i128":return this.toI128();case"i256":return this.toI256();case"u64":return this.toU64();case"u128":return this.toU128();case"u256":return this.toU256();default:throw TypeError("invalid type: ".concat(this.type))}}},{key:"valueOf",value:function(){return this.int.valueOf()}},{key:"toString",value:function(){return this.int.toString()}},{key:"toJSON",value:function(){return{value:this.toBigInt().toString(),type:this.type}}},{key:"_sizeCheck",value:function(e){if(this.int.size>e)throw RangeError("value too large for ".concat(e," bits (").concat(this.type,")"))}}],[{key:"isType",value:function(e){switch(e){case"i64":case"i128":case"i256":case"u64":case"u128":case"u256":return!0;default:return!1}}},{key:"getType",value:function(e){return e.slice(3).toLowerCase()}}])}()},"./node_modules/@stellar/stellar-base/lib/operation.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Operation=t.AuthRevocableFlag=t.AuthRequiredFlag=t.AuthImmutableFlag=t.AuthClawbackEnabledFlag=void 0;var n=r("./node_modules/@stellar/js-xdr/dist/xdr.js"),o=m(r("./node_modules/@stellar/stellar-base/lib/util/bignumber.js")),s=r("./node_modules/@stellar/stellar-base/lib/util/util.js"),i=r("./node_modules/@stellar/stellar-base/lib/util/continued_fraction.js"),a=r("./node_modules/@stellar/stellar-base/lib/asset.js"),u=r("./node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js"),l=r("./node_modules/@stellar/stellar-base/lib/claimant.js"),c=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),d=r("./node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js"),p=m(r("./node_modules/@stellar/stellar-base/lib/xdr.js")),f=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=g(e)&&"function"!=typeof e)return{default:e};var r=y(t);if(r&&r.has(e))return r.get(e);var n={__proto__:null},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&{}.hasOwnProperty.call(e,s)){var i=o?Object.getOwnPropertyDescriptor(e,s):null;i&&(i.get||i.set)?Object.defineProperty(n,s,i):n[s]=e[s]}return n.default=e,r&&r.set(e,n),n}(r("./node_modules/@stellar/stellar-base/lib/operations/index.js")),h=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js");function y(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(y=function(e){return e?r:t})(e)}function m(e){return e&&e.__esModule?e:{default:e}}function g(e){return g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},g(e)}function v(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,b(n.key),n)}}function b(e){var t=function(e,t){if("object"!=g(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=g(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==g(t)?t:t+""}var w=1e7,S=(t.AuthRequiredFlag=1,t.AuthRevocableFlag=2,t.AuthImmutableFlag=4,t.AuthClawbackEnabledFlag=8,t.Operation=function(){return e=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)},r=[{key:"setSourceAccount",value:function(e,t){if(t.source)try{e.sourceAccount=(0,h.decodeAddressToMuxedAccount)(t.source)}catch(e){throw new Error("Source address is invalid")}}},{key:"fromXDRObject",value:function(e){var t={};e.sourceAccount()&&(t.source=(0,h.encodeMuxedAccountToAddress)(e.sourceAccount()));var r=e.body().value(),n=e.body().switch().name;switch(n){case"createAccount":t.type="createAccount",t.destination=_(r.destination()),t.startingBalance=this._fromXDRAmount(r.startingBalance());break;case"payment":t.type="payment",t.destination=(0,h.encodeMuxedAccountToAddress)(r.destination()),t.asset=a.Asset.fromOperation(r.asset()),t.amount=this._fromXDRAmount(r.amount());break;case"pathPaymentStrictReceive":t.type="pathPaymentStrictReceive",t.sendAsset=a.Asset.fromOperation(r.sendAsset()),t.sendMax=this._fromXDRAmount(r.sendMax()),t.destination=(0,h.encodeMuxedAccountToAddress)(r.destination()),t.destAsset=a.Asset.fromOperation(r.destAsset()),t.destAmount=this._fromXDRAmount(r.destAmount()),t.path=[];var o=r.path();Object.keys(o).forEach((function(e){t.path.push(a.Asset.fromOperation(o[e]))}));break;case"pathPaymentStrictSend":t.type="pathPaymentStrictSend",t.sendAsset=a.Asset.fromOperation(r.sendAsset()),t.sendAmount=this._fromXDRAmount(r.sendAmount()),t.destination=(0,h.encodeMuxedAccountToAddress)(r.destination()),t.destAsset=a.Asset.fromOperation(r.destAsset()),t.destMin=this._fromXDRAmount(r.destMin()),t.path=[];var i=r.path();Object.keys(i).forEach((function(e){t.path.push(a.Asset.fromOperation(i[e]))}));break;case"changeTrust":t.type="changeTrust",r.line().switch()===p.default.AssetType.assetTypePoolShare()?t.line=u.LiquidityPoolAsset.fromOperation(r.line()):t.line=a.Asset.fromOperation(r.line()),t.limit=this._fromXDRAmount(r.limit());break;case"allowTrust":t.type="allowTrust",t.trustor=_(r.trustor()),t.assetCode=r.asset().value().toString(),t.assetCode=(0,s.trimEnd)(t.assetCode,"\0"),t.authorize=r.authorize();break;case"setOptions":if(t.type="setOptions",r.inflationDest()&&(t.inflationDest=_(r.inflationDest())),t.clearFlags=r.clearFlags(),t.setFlags=r.setFlags(),t.masterWeight=r.masterWeight(),t.lowThreshold=r.lowThreshold(),t.medThreshold=r.medThreshold(),t.highThreshold=r.highThreshold(),t.homeDomain=void 0!==r.homeDomain()?r.homeDomain().toString("ascii"):void 0,r.signer()){var f={},y=r.signer().key().arm();if("ed25519"===y)f.ed25519PublicKey=_(r.signer().key());else if("preAuthTx"===y)f.preAuthTx=r.signer().key().preAuthTx();else if("hashX"===y)f.sha256Hash=r.signer().key().hashX();else if("ed25519SignedPayload"===y){var m=r.signer().key().ed25519SignedPayload();f.ed25519SignedPayload=c.StrKey.encodeSignedPayload(m.toXDR())}f.weight=r.signer().weight(),t.signer=f}break;case"manageOffer":case"manageSellOffer":t.type="manageSellOffer",t.selling=a.Asset.fromOperation(r.selling()),t.buying=a.Asset.fromOperation(r.buying()),t.amount=this._fromXDRAmount(r.amount()),t.price=this._fromXDRPrice(r.price()),t.offerId=r.offerId().toString();break;case"manageBuyOffer":t.type="manageBuyOffer",t.selling=a.Asset.fromOperation(r.selling()),t.buying=a.Asset.fromOperation(r.buying()),t.buyAmount=this._fromXDRAmount(r.buyAmount()),t.price=this._fromXDRPrice(r.price()),t.offerId=r.offerId().toString();break;case"createPassiveOffer":case"createPassiveSellOffer":t.type="createPassiveSellOffer",t.selling=a.Asset.fromOperation(r.selling()),t.buying=a.Asset.fromOperation(r.buying()),t.amount=this._fromXDRAmount(r.amount()),t.price=this._fromXDRPrice(r.price());break;case"accountMerge":t.type="accountMerge",t.destination=(0,h.encodeMuxedAccountToAddress)(r);break;case"manageData":t.type="manageData",t.name=r.dataName().toString("ascii"),t.value=r.dataValue();break;case"inflation":t.type="inflation";break;case"bumpSequence":t.type="bumpSequence",t.bumpTo=r.bumpTo().toString();break;case"createClaimableBalance":t.type="createClaimableBalance",t.asset=a.Asset.fromOperation(r.asset()),t.amount=this._fromXDRAmount(r.amount()),t.claimants=[],r.claimants().forEach((function(e){t.claimants.push(l.Claimant.fromXDR(e))}));break;case"claimClaimableBalance":t.type="claimClaimableBalance",t.balanceId=r.toXDR("hex");break;case"beginSponsoringFutureReserves":t.type="beginSponsoringFutureReserves",t.sponsoredId=_(r.sponsoredId());break;case"endSponsoringFutureReserves":t.type="endSponsoringFutureReserves";break;case"revokeSponsorship":!function(e,t){switch(e.switch().name){case"revokeSponsorshipLedgerEntry":var r=e.ledgerKey();switch(r.switch().name){case p.default.LedgerEntryType.account().name:t.type="revokeAccountSponsorship",t.account=_(r.account().accountId());break;case p.default.LedgerEntryType.trustline().name:t.type="revokeTrustlineSponsorship",t.account=_(r.trustLine().accountId());var n=r.trustLine().asset();n.switch()===p.default.AssetType.assetTypePoolShare()?t.asset=d.LiquidityPoolId.fromOperation(n):t.asset=a.Asset.fromOperation(n);break;case p.default.LedgerEntryType.offer().name:t.type="revokeOfferSponsorship",t.seller=_(r.offer().sellerId()),t.offerId=r.offer().offerId().toString();break;case p.default.LedgerEntryType.data().name:t.type="revokeDataSponsorship",t.account=_(r.data().accountId()),t.name=r.data().dataName().toString("ascii");break;case p.default.LedgerEntryType.claimableBalance().name:t.type="revokeClaimableBalanceSponsorship",t.balanceId=r.claimableBalance().balanceId().toXDR("hex");break;case p.default.LedgerEntryType.liquidityPool().name:t.type="revokeLiquidityPoolSponsorship",t.liquidityPoolId=r.liquidityPool().liquidityPoolId().toString("hex");break;default:throw new Error("Unknown ledgerKey: ".concat(e.switch().name))}break;case"revokeSponsorshipSigner":t.type="revokeSignerSponsorship",t.account=_(e.signer().accountId()),t.signer=function(e){var t={};switch(e.switch().name){case p.default.SignerKeyType.signerKeyTypeEd25519().name:t.ed25519PublicKey=c.StrKey.encodeEd25519PublicKey(e.ed25519());break;case p.default.SignerKeyType.signerKeyTypePreAuthTx().name:t.preAuthTx=e.preAuthTx().toString("hex");break;case p.default.SignerKeyType.signerKeyTypeHashX().name:t.sha256Hash=e.hashX().toString("hex");break;default:throw new Error("Unknown signerKey: ".concat(e.switch().name))}return t}(e.signer().signerKey());break;default:throw new Error("Unknown revokeSponsorship: ".concat(e.switch().name))}}(r,t);break;case"clawback":t.type="clawback",t.amount=this._fromXDRAmount(r.amount()),t.from=(0,h.encodeMuxedAccountToAddress)(r.from()),t.asset=a.Asset.fromOperation(r.asset());break;case"clawbackClaimableBalance":t.type="clawbackClaimableBalance",t.balanceId=r.toXDR("hex");break;case"setTrustLineFlags":t.type="setTrustLineFlags",t.asset=a.Asset.fromOperation(r.asset()),t.trustor=_(r.trustor());var g=r.clearFlags(),v=r.setFlags(),b={authorized:p.default.TrustLineFlags.authorizedFlag(),authorizedToMaintainLiabilities:p.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),clawbackEnabled:p.default.TrustLineFlags.trustlineClawbackEnabledFlag()};t.flags={},Object.keys(b).forEach((function(e){var r;t.flags[e]=(r=b[e].value,!!(v&r)||!(g&r)&&void 0)}));break;case"liquidityPoolDeposit":t.type="liquidityPoolDeposit",t.liquidityPoolId=r.liquidityPoolId().toString("hex"),t.maxAmountA=this._fromXDRAmount(r.maxAmountA()),t.maxAmountB=this._fromXDRAmount(r.maxAmountB()),t.minPrice=this._fromXDRPrice(r.minPrice()),t.maxPrice=this._fromXDRPrice(r.maxPrice());break;case"liquidityPoolWithdraw":t.type="liquidityPoolWithdraw",t.liquidityPoolId=r.liquidityPoolId().toString("hex"),t.amount=this._fromXDRAmount(r.amount()),t.minAmountA=this._fromXDRAmount(r.minAmountA()),t.minAmountB=this._fromXDRAmount(r.minAmountB());break;case"invokeHostFunction":var w;t.type="invokeHostFunction",t.func=r.hostFunction(),t.auth=null!==(w=r.auth())&&void 0!==w?w:[];break;case"extendFootprintTtl":t.type="extendFootprintTtl",t.extendTo=r.extendTo();break;case"restoreFootprint":t.type="restoreFootprint";break;default:throw new Error("Unknown operation: ".concat(n))}return t}},{key:"isValidAmount",value:function(e){var t,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("string"!=typeof e)return!1;try{t=new o.default(e)}catch(e){return!1}return!(!r&&t.isZero()||t.isNegative()||t.times(w).gt(new o.default("9223372036854775807").toString())||t.decimalPlaces()>7||t.isNaN()||!t.isFinite())}},{key:"constructAmountRequirementsError",value:function(e){return"".concat(e," argument must be of type String, represent a positive number and have at most 7 digits after the decimal")}},{key:"_checkUnsignedIntValue",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(void 0!==t)switch("string"==typeof t&&(t=parseFloat(t)),!0){case"number"!=typeof t||!Number.isFinite(t)||t%1!=0:throw new Error("".concat(e," value is invalid"));case t<0:throw new Error("".concat(e," value must be unsigned"));case!r||r&&r(t,e):return t;default:throw new Error("".concat(e," value is invalid"))}}},{key:"_toXDRAmount",value:function(e){var t=new o.default(e).times(w);return n.Hyper.fromString(t.toString())}},{key:"_fromXDRAmount",value:function(e){return new o.default(e).div(w).toFixed(7)}},{key:"_fromXDRPrice",value:function(e){return new o.default(e.n()).div(new o.default(e.d())).toString()}},{key:"_toXDRPrice",value:function(e){var t;if(e.n&&e.d)t=new p.default.Price(e);else{var r=(0,i.best_r)(e);t=new p.default.Price({n:parseInt(r[0],10),d:parseInt(r[1],10)})}if(t.n()<0||t.d()<0)throw new Error("price must be positive");return t}}],(t=null)&&v(e.prototype,t),r&&v(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,r}());function _(e){return c.StrKey.encodeEd25519PublicKey(e.ed25519())}S.accountMerge=f.accountMerge,S.allowTrust=f.allowTrust,S.bumpSequence=f.bumpSequence,S.changeTrust=f.changeTrust,S.createAccount=f.createAccount,S.createClaimableBalance=f.createClaimableBalance,S.claimClaimableBalance=f.claimClaimableBalance,S.clawbackClaimableBalance=f.clawbackClaimableBalance,S.createPassiveSellOffer=f.createPassiveSellOffer,S.inflation=f.inflation,S.manageData=f.manageData,S.manageSellOffer=f.manageSellOffer,S.manageBuyOffer=f.manageBuyOffer,S.pathPaymentStrictReceive=f.pathPaymentStrictReceive,S.pathPaymentStrictSend=f.pathPaymentStrictSend,S.payment=f.payment,S.setOptions=f.setOptions,S.beginSponsoringFutureReserves=f.beginSponsoringFutureReserves,S.endSponsoringFutureReserves=f.endSponsoringFutureReserves,S.revokeAccountSponsorship=f.revokeAccountSponsorship,S.revokeTrustlineSponsorship=f.revokeTrustlineSponsorship,S.revokeOfferSponsorship=f.revokeOfferSponsorship,S.revokeDataSponsorship=f.revokeDataSponsorship,S.revokeClaimableBalanceSponsorship=f.revokeClaimableBalanceSponsorship,S.revokeLiquidityPoolSponsorship=f.revokeLiquidityPoolSponsorship,S.revokeSignerSponsorship=f.revokeSignerSponsorship,S.clawback=f.clawback,S.setTrustLineFlags=f.setTrustLineFlags,S.liquidityPoolDeposit=f.liquidityPoolDeposit,S.liquidityPoolWithdraw=f.liquidityPoolWithdraw,S.invokeHostFunction=f.invokeHostFunction,S.extendFootprintTtl=f.extendFootprintTtl,S.restoreFootprint=f.restoreFootprint,S.createStellarAssetContract=f.createStellarAssetContract,S.invokeContractFunction=f.invokeContractFunction,S.createCustomContract=f.createCustomContract,S.uploadContractWasm=f.uploadContractWasm},"./node_modules/@stellar/stellar-base/lib/operations/account_merge.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.accountMerge=function(e){var t={};try{t.body=o.default.OperationBody.accountMerge((0,s.decodeAddressToMuxedAccount)(e.destination))}catch(e){throw new Error("destination is invalid")}return this.setSourceAccount(t,e),new o.default.Operation(t)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js")},"./node_modules/@stellar/stellar-base/lib/operations/allow_trust.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.allowTrust=function(e){if(!i.StrKey.isValidEd25519PublicKey(e.trustor))throw new Error("trustor is invalid");var t={};if(t.trustor=s.Keypair.fromPublicKey(e.trustor).xdrAccountId(),e.assetCode.length<=4){var r=e.assetCode.padEnd(4,"\0");t.asset=o.default.AssetCode.assetTypeCreditAlphanum4(r)}else{if(!(e.assetCode.length<=12))throw new Error("Asset code must be 12 characters at max.");var n=e.assetCode.padEnd(12,"\0");t.asset=o.default.AssetCode.assetTypeCreditAlphanum12(n)}"boolean"==typeof e.authorize?e.authorize?t.authorize=o.default.TrustLineFlags.authorizedFlag().value:t.authorize=0:t.authorize=e.authorize;var a=new o.default.AllowTrustOp(t),u={};return u.body=o.default.OperationBody.allowTrust(a),this.setSourceAccount(u,e),new o.default.Operation(u)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/keypair.js"),i=r("./node_modules/@stellar/stellar-base/lib/strkey.js")},"./node_modules/@stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.beginSponsoringFutureReserves=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!s.StrKey.isValidEd25519PublicKey(e.sponsoredId))throw new Error("sponsoredId is invalid");var t=new o.default.BeginSponsoringFutureReservesOp({sponsoredId:i.Keypair.fromPublicKey(e.sponsoredId).xdrAccountId()}),r={};return r.body=o.default.OperationBody.beginSponsoringFutureReserves(t),this.setSourceAccount(r,e),new o.default.Operation(r)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),i=r("./node_modules/@stellar/stellar-base/lib/keypair.js")},"./node_modules/@stellar/stellar-base/lib/operations/bump_sequence.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bumpSequence=function(e){var t={};if("string"!=typeof e.bumpTo)throw new Error("bumpTo must be a string");try{new o.default(e.bumpTo)}catch(e){throw new Error("bumpTo must be a stringified number")}t.bumpTo=n.Hyper.fromString(e.bumpTo);var r=new s.default.BumpSequenceOp(t),i={};return i.body=s.default.OperationBody.bumpSequence(r),this.setSourceAccount(i,e),new s.default.Operation(i)};var n=r("./node_modules/@stellar/js-xdr/dist/xdr.js"),o=i(r("./node_modules/@stellar/stellar-base/lib/util/bignumber.js")),s=i(r("./node_modules/@stellar/stellar-base/lib/xdr.js"));function i(e){return e&&e.__esModule?e:{default:e}}},"./node_modules/@stellar/stellar-base/lib/operations/change_trust.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.changeTrust=function(e){var t={};if(e.asset instanceof i.Asset)t.line=e.asset.toChangeTrustXDRObject();else{if(!(e.asset instanceof a.LiquidityPoolAsset))throw new TypeError("asset must be Asset or LiquidityPoolAsset");t.line=e.asset.toXDRObject()}if(void 0!==e.limit&&!this.isValidAmount(e.limit,!0))throw new TypeError(this.constructAmountRequirementsError("limit"));e.limit?t.limit=this._toXDRAmount(e.limit):t.limit=n.Hyper.fromString(new o.default(l).toString());e.source&&(t.source=e.source.masterKeypair);var r=new s.default.ChangeTrustOp(t),u={};return u.body=s.default.OperationBody.changeTrust(r),this.setSourceAccount(u,e),new s.default.Operation(u)};var n=r("./node_modules/@stellar/js-xdr/dist/xdr.js"),o=u(r("./node_modules/@stellar/stellar-base/lib/util/bignumber.js")),s=u(r("./node_modules/@stellar/stellar-base/lib/xdr.js")),i=r("./node_modules/@stellar/stellar-base/lib/asset.js"),a=r("./node_modules/@stellar/stellar-base/lib/liquidity_pool_asset.js");function u(e){return e&&e.__esModule?e:{default:e}}var l="9223372036854775807"},"./node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.claimClaimableBalance=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};s(e.balanceId);var t={};t.balanceId=o.default.ClaimableBalanceId.fromXDR(e.balanceId,"hex");var r=new o.default.ClaimClaimableBalanceOp(t),n={};return n.body=o.default.OperationBody.claimClaimableBalance(r),this.setSourceAccount(n,e),new o.default.Operation(n)},t.validateClaimableBalanceId=s;var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n};function s(e){if("string"!=typeof e||72!==e.length)throw new Error("must provide a valid claimable balance id")}},"./node_modules/@stellar/stellar-base/lib/operations/clawback.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clawback=function(e){var t={};if(!this.isValidAmount(e.amount))throw new TypeError(this.constructAmountRequirementsError("amount"));t.amount=this._toXDRAmount(e.amount),t.asset=e.asset.toXDRObject();try{t.from=(0,s.decodeAddressToMuxedAccount)(e.from)}catch(e){throw new Error("from address is invalid")}var r={body:o.default.OperationBody.clawback(new o.default.ClawbackOp(t))};return this.setSourceAccount(r,e),new o.default.Operation(r)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js")},"./node_modules/@stellar/stellar-base/lib/operations/clawback_claimable_balance.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clawbackClaimableBalance=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,s.validateClaimableBalanceId)(e.balanceId);var t={balanceId:o.default.ClaimableBalanceId.fromXDR(e.balanceId,"hex")},r={body:o.default.OperationBody.clawbackClaimableBalance(new o.default.ClawbackClaimableBalanceOp(t))};return this.setSourceAccount(r,e),new o.default.Operation(r)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js")},"./node_modules/@stellar/stellar-base/lib/operations/create_account.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createAccount=function(e){if(!i.StrKey.isValidEd25519PublicKey(e.destination))throw new Error("destination is invalid");if(!this.isValidAmount(e.startingBalance,!0))throw new TypeError(this.constructAmountRequirementsError("startingBalance"));var t={};t.destination=s.Keypair.fromPublicKey(e.destination).xdrAccountId(),t.startingBalance=this._toXDRAmount(e.startingBalance);var r=new o.default.CreateAccountOp(t),n={};return n.body=o.default.OperationBody.createAccount(r),this.setSourceAccount(n,e),new o.default.Operation(n)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/keypair.js"),i=r("./node_modules/@stellar/stellar-base/lib/strkey.js")},"./node_modules/@stellar/stellar-base/lib/operations/create_claimable_balance.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createClaimableBalance=function(e){if(!(e.asset instanceof s.Asset))throw new Error("must provide an asset for create claimable balance operation");if(!this.isValidAmount(e.amount))throw new TypeError(this.constructAmountRequirementsError("amount"));if(!Array.isArray(e.claimants)||0===e.claimants.length)throw new Error("must provide at least one claimant");var t={};t.asset=e.asset.toXDRObject(),t.amount=this._toXDRAmount(e.amount),t.claimants=Object.values(e.claimants).map((function(e){return e.toXDRObject()}));var r=new o.default.CreateClaimableBalanceOp(t),n={};return n.body=o.default.OperationBody.createClaimableBalance(r),this.setSourceAccount(n,e),new o.default.Operation(n)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/asset.js")},"./node_modules/@stellar/stellar-base/lib/operations/create_passive_sell_offer.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createPassiveSellOffer=function(e){var t={};if(t.selling=e.selling.toXDRObject(),t.buying=e.buying.toXDRObject(),!this.isValidAmount(e.amount))throw new TypeError(this.constructAmountRequirementsError("amount"));if(t.amount=this._toXDRAmount(e.amount),void 0===e.price)throw new TypeError("price argument is required");t.price=this._toXDRPrice(e.price);var r=new o.default.CreatePassiveSellOfferOp(t),n={};return n.body=o.default.OperationBody.createPassiveSellOffer(r),this.setSourceAccount(n,e),new o.default.Operation(n)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n}},"./node_modules/@stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.endSponsoringFutureReserves=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={};return t.body=o.default.OperationBody.endSponsoringFutureReserves(),this.setSourceAccount(t,e),new o.default.Operation(t)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n}},"./node_modules/@stellar/stellar-base/lib/operations/extend_footprint_ttl.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extendFootprintTtl=function(e){var t;if((null!==(t=e.extendTo)&&void 0!==t?t:-1)<=0)throw new RangeError("extendTo has to be positive");var r=new o.default.ExtendFootprintTtlOp({ext:new o.default.ExtensionPoint(0),extendTo:e.extendTo}),n={body:o.default.OperationBody.extendFootprintTtl(r)};return this.setSourceAccount(n,e),new o.default.Operation(n)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n}},"./node_modules/@stellar/stellar-base/lib/operations/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"accountMerge",{enumerable:!0,get:function(){return s.accountMerge}}),Object.defineProperty(t,"allowTrust",{enumerable:!0,get:function(){return i.allowTrust}}),Object.defineProperty(t,"beginSponsoringFutureReserves",{enumerable:!0,get:function(){return w.beginSponsoringFutureReserves}}),Object.defineProperty(t,"bumpSequence",{enumerable:!0,get:function(){return a.bumpSequence}}),Object.defineProperty(t,"changeTrust",{enumerable:!0,get:function(){return u.changeTrust}}),Object.defineProperty(t,"claimClaimableBalance",{enumerable:!0,get:function(){return d.claimClaimableBalance}}),Object.defineProperty(t,"clawback",{enumerable:!0,get:function(){return T.clawback}}),Object.defineProperty(t,"clawbackClaimableBalance",{enumerable:!0,get:function(){return p.clawbackClaimableBalance}}),Object.defineProperty(t,"createAccount",{enumerable:!0,get:function(){return l.createAccount}}),Object.defineProperty(t,"createClaimableBalance",{enumerable:!0,get:function(){return c.createClaimableBalance}}),Object.defineProperty(t,"createCustomContract",{enumerable:!0,get:function(){return x.createCustomContract}}),Object.defineProperty(t,"createPassiveSellOffer",{enumerable:!0,get:function(){return o.createPassiveSellOffer}}),Object.defineProperty(t,"createStellarAssetContract",{enumerable:!0,get:function(){return x.createStellarAssetContract}}),Object.defineProperty(t,"endSponsoringFutureReserves",{enumerable:!0,get:function(){return S.endSponsoringFutureReserves}}),Object.defineProperty(t,"extendFootprintTtl",{enumerable:!0,get:function(){return P.extendFootprintTtl}}),Object.defineProperty(t,"inflation",{enumerable:!0,get:function(){return f.inflation}}),Object.defineProperty(t,"invokeContractFunction",{enumerable:!0,get:function(){return x.invokeContractFunction}}),Object.defineProperty(t,"invokeHostFunction",{enumerable:!0,get:function(){return x.invokeHostFunction}}),Object.defineProperty(t,"liquidityPoolDeposit",{enumerable:!0,get:function(){return k.liquidityPoolDeposit}}),Object.defineProperty(t,"liquidityPoolWithdraw",{enumerable:!0,get:function(){return A.liquidityPoolWithdraw}}),Object.defineProperty(t,"manageBuyOffer",{enumerable:!0,get:function(){return y.manageBuyOffer}}),Object.defineProperty(t,"manageData",{enumerable:!0,get:function(){return h.manageData}}),Object.defineProperty(t,"manageSellOffer",{enumerable:!0,get:function(){return n.manageSellOffer}}),Object.defineProperty(t,"pathPaymentStrictReceive",{enumerable:!0,get:function(){return m.pathPaymentStrictReceive}}),Object.defineProperty(t,"pathPaymentStrictSend",{enumerable:!0,get:function(){return g.pathPaymentStrictSend}}),Object.defineProperty(t,"payment",{enumerable:!0,get:function(){return v.payment}}),Object.defineProperty(t,"restoreFootprint",{enumerable:!0,get:function(){return O.restoreFootprint}}),Object.defineProperty(t,"revokeAccountSponsorship",{enumerable:!0,get:function(){return _.revokeAccountSponsorship}}),Object.defineProperty(t,"revokeClaimableBalanceSponsorship",{enumerable:!0,get:function(){return _.revokeClaimableBalanceSponsorship}}),Object.defineProperty(t,"revokeDataSponsorship",{enumerable:!0,get:function(){return _.revokeDataSponsorship}}),Object.defineProperty(t,"revokeLiquidityPoolSponsorship",{enumerable:!0,get:function(){return _.revokeLiquidityPoolSponsorship}}),Object.defineProperty(t,"revokeOfferSponsorship",{enumerable:!0,get:function(){return _.revokeOfferSponsorship}}),Object.defineProperty(t,"revokeSignerSponsorship",{enumerable:!0,get:function(){return _.revokeSignerSponsorship}}),Object.defineProperty(t,"revokeTrustlineSponsorship",{enumerable:!0,get:function(){return _.revokeTrustlineSponsorship}}),Object.defineProperty(t,"setOptions",{enumerable:!0,get:function(){return b.setOptions}}),Object.defineProperty(t,"setTrustLineFlags",{enumerable:!0,get:function(){return E.setTrustLineFlags}}),Object.defineProperty(t,"uploadContractWasm",{enumerable:!0,get:function(){return x.uploadContractWasm}});var n=r("./node_modules/@stellar/stellar-base/lib/operations/manage_sell_offer.js"),o=r("./node_modules/@stellar/stellar-base/lib/operations/create_passive_sell_offer.js"),s=r("./node_modules/@stellar/stellar-base/lib/operations/account_merge.js"),i=r("./node_modules/@stellar/stellar-base/lib/operations/allow_trust.js"),a=r("./node_modules/@stellar/stellar-base/lib/operations/bump_sequence.js"),u=r("./node_modules/@stellar/stellar-base/lib/operations/change_trust.js"),l=r("./node_modules/@stellar/stellar-base/lib/operations/create_account.js"),c=r("./node_modules/@stellar/stellar-base/lib/operations/create_claimable_balance.js"),d=r("./node_modules/@stellar/stellar-base/lib/operations/claim_claimable_balance.js"),p=r("./node_modules/@stellar/stellar-base/lib/operations/clawback_claimable_balance.js"),f=r("./node_modules/@stellar/stellar-base/lib/operations/inflation.js"),h=r("./node_modules/@stellar/stellar-base/lib/operations/manage_data.js"),y=r("./node_modules/@stellar/stellar-base/lib/operations/manage_buy_offer.js"),m=r("./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_receive.js"),g=r("./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_send.js"),v=r("./node_modules/@stellar/stellar-base/lib/operations/payment.js"),b=r("./node_modules/@stellar/stellar-base/lib/operations/set_options.js"),w=r("./node_modules/@stellar/stellar-base/lib/operations/begin_sponsoring_future_reserves.js"),S=r("./node_modules/@stellar/stellar-base/lib/operations/end_sponsoring_future_reserves.js"),_=r("./node_modules/@stellar/stellar-base/lib/operations/revoke_sponsorship.js"),T=r("./node_modules/@stellar/stellar-base/lib/operations/clawback.js"),E=r("./node_modules/@stellar/stellar-base/lib/operations/set_trustline_flags.js"),k=r("./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_deposit.js"),A=r("./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js"),x=r("./node_modules/@stellar/stellar-base/lib/operations/invoke_host_function.js"),P=r("./node_modules/@stellar/stellar-base/lib/operations/extend_footprint_ttl.js"),O=r("./node_modules/@stellar/stellar-base/lib/operations/restore_footprint.js")},"./node_modules/@stellar/stellar-base/lib/operations/inflation.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.inflation=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={};return t.body=o.default.OperationBody.inflation(),this.setSourceAccount(t,e),new o.default.Operation(t)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n}},"./node_modules/@stellar/stellar-base/lib/operations/invoke_host_function.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.createCustomContract=function(e){var t,r=n.from(e.salt||i.Keypair.random().xdrPublicKey().value());if(!e.wasmHash||32!==e.wasmHash.length)throw new TypeError("expected hash(contract WASM) in 'opts.wasmHash', got ".concat(e.wasmHash));if(32!==r.length)throw new TypeError("expected 32-byte salt in 'opts.salt', got ".concat(e.wasmHash));return this.invokeHostFunction({source:e.source,auth:e.auth,func:s.default.HostFunction.hostFunctionTypeCreateContractV2(new s.default.CreateContractArgsV2({executable:s.default.ContractExecutable.contractExecutableWasm(n.from(e.wasmHash)),contractIdPreimage:s.default.ContractIdPreimage.contractIdPreimageFromAddress(new s.default.ContractIdPreimageFromAddress({address:e.address.toScAddress(),salt:r})),constructorArgs:null!==(t=e.constructorArgs)&&void 0!==t?t:[]}))})},t.createStellarAssetContract=function(e){var t=e.asset;if("string"==typeof t){var r=t.split(":"),n=(c=2,function(e){if(Array.isArray(e))return e}(a=r)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,s,i,a=[],u=!0,l=!1;try{if(s=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=s.call(r)).done)&&(a.push(n.value),a.length!==t);u=!0);}catch(e){l=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(l)throw o}}return a}}(a,c)||function(e,t){if(e){if("string"==typeof e)return l(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?l(e,t):void 0}}(a,c)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=n[0],i=n[1];t=new u.Asset(o,i)}var a,c;if(!(t instanceof u.Asset))throw new TypeError("expected Asset in 'opts.asset', got ".concat(t));return this.invokeHostFunction({source:e.source,auth:e.auth,func:s.default.HostFunction.hostFunctionTypeCreateContract(new s.default.CreateContractArgs({executable:s.default.ContractExecutable.contractExecutableStellarAsset(),contractIdPreimage:s.default.ContractIdPreimage.contractIdPreimageFromAsset(t.toXDRObject())}))})},t.invokeContractFunction=function(e){var t=new a.Address(e.contract);if("contract"!==t._type)throw new TypeError("expected contract strkey instance, got ".concat(t));return this.invokeHostFunction({source:e.source,auth:e.auth,func:s.default.HostFunction.hostFunctionTypeInvokeContract(new s.default.InvokeContractArgs({contractAddress:t.toScAddress(),functionName:e.function,args:e.args}))})},t.invokeHostFunction=function(e){if(!e.func)throw new TypeError("host function invocation ('func') required (got ".concat(JSON.stringify(e),")"));var t=new s.default.InvokeHostFunctionOp({hostFunction:e.func,auth:e.auth||[]}),r={body:s.default.OperationBody.invokeHostFunction(t)};return this.setSourceAccount(r,e),new s.default.Operation(r)},t.uploadContractWasm=function(e){return this.invokeHostFunction({source:e.source,auth:e.auth,func:s.default.HostFunction.hostFunctionTypeUploadContractWasm(n.from(e.wasm))})};var o,s=(o=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&o.__esModule?o:{default:o},i=r("./node_modules/@stellar/stellar-base/lib/keypair.js"),a=r("./node_modules/@stellar/stellar-base/lib/address.js"),u=r("./node_modules/@stellar/stellar-base/lib/asset.js");function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}},"./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_deposit.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.liquidityPoolDeposit=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.liquidityPoolId,r=e.maxAmountA,n=e.maxAmountB,s=e.minPrice,i=e.maxPrice,a={};if(!t)throw new TypeError("liquidityPoolId argument is required");if(a.liquidityPoolId=o.default.PoolId.fromXDR(t,"hex"),!this.isValidAmount(r,!0))throw new TypeError(this.constructAmountRequirementsError("maxAmountA"));if(a.maxAmountA=this._toXDRAmount(r),!this.isValidAmount(n,!0))throw new TypeError(this.constructAmountRequirementsError("maxAmountB"));if(a.maxAmountB=this._toXDRAmount(n),void 0===s)throw new TypeError("minPrice argument is required");if(a.minPrice=this._toXDRPrice(s),void 0===i)throw new TypeError("maxPrice argument is required");a.maxPrice=this._toXDRPrice(i);var u=new o.default.LiquidityPoolDepositOp(a),l={body:o.default.OperationBody.liquidityPoolDeposit(u)};return this.setSourceAccount(l,e),new o.default.Operation(l)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n}},"./node_modules/@stellar/stellar-base/lib/operations/liquidity_pool_withdraw.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.liquidityPoolWithdraw=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={};if(!e.liquidityPoolId)throw new TypeError("liquidityPoolId argument is required");if(t.liquidityPoolId=o.default.PoolId.fromXDR(e.liquidityPoolId,"hex"),!this.isValidAmount(e.amount))throw new TypeError(this.constructAmountRequirementsError("amount"));if(t.amount=this._toXDRAmount(e.amount),!this.isValidAmount(e.minAmountA,!0))throw new TypeError(this.constructAmountRequirementsError("minAmountA"));if(t.minAmountA=this._toXDRAmount(e.minAmountA),!this.isValidAmount(e.minAmountB,!0))throw new TypeError(this.constructAmountRequirementsError("minAmountB"));t.minAmountB=this._toXDRAmount(e.minAmountB);var r=new o.default.LiquidityPoolWithdrawOp(t),n={body:o.default.OperationBody.liquidityPoolWithdraw(r)};return this.setSourceAccount(n,e),new o.default.Operation(n)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n}},"./node_modules/@stellar/stellar-base/lib/operations/manage_buy_offer.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.manageBuyOffer=function(e){var t={};if(t.selling=e.selling.toXDRObject(),t.buying=e.buying.toXDRObject(),!this.isValidAmount(e.buyAmount,!0))throw new TypeError(this.constructAmountRequirementsError("buyAmount"));if(t.buyAmount=this._toXDRAmount(e.buyAmount),void 0===e.price)throw new TypeError("price argument is required");t.price=this._toXDRPrice(e.price),void 0!==e.offerId?e.offerId=e.offerId.toString():e.offerId="0";t.offerId=o.Hyper.fromString(e.offerId);var r=new s.default.ManageBuyOfferOp(t),n={};return n.body=s.default.OperationBody.manageBuyOffer(r),this.setSourceAccount(n,e),new s.default.Operation(n)};var n,o=r("./node_modules/@stellar/js-xdr/dist/xdr.js"),s=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n}},"./node_modules/@stellar/stellar-base/lib/operations/manage_data.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.manageData=function(e){var t={};if(!("string"==typeof e.name&&e.name.length<=64))throw new Error("name must be a string, up to 64 characters");if(t.dataName=e.name,"string"!=typeof e.value&&!n.isBuffer(e.value)&&null!==e.value)throw new Error("value must be a string, Buffer or null");"string"==typeof e.value?t.dataValue=n.from(e.value):t.dataValue=e.value;if(null!==t.dataValue&&t.dataValue.length>64)throw new Error("value cannot be longer that 64 bytes");var r=new s.default.ManageDataOp(t),o={};return o.body=s.default.OperationBody.manageData(r),this.setSourceAccount(o,e),new s.default.Operation(o)};var o,s=(o=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&o.__esModule?o:{default:o}},"./node_modules/@stellar/stellar-base/lib/operations/manage_sell_offer.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.manageSellOffer=function(e){var t={};if(t.selling=e.selling.toXDRObject(),t.buying=e.buying.toXDRObject(),!this.isValidAmount(e.amount,!0))throw new TypeError(this.constructAmountRequirementsError("amount"));if(t.amount=this._toXDRAmount(e.amount),void 0===e.price)throw new TypeError("price argument is required");t.price=this._toXDRPrice(e.price),void 0!==e.offerId?e.offerId=e.offerId.toString():e.offerId="0";t.offerId=o.Hyper.fromString(e.offerId);var r=new s.default.ManageSellOfferOp(t),n={};return n.body=s.default.OperationBody.manageSellOffer(r),this.setSourceAccount(n,e),new s.default.Operation(n)};var n,o=r("./node_modules/@stellar/js-xdr/dist/xdr.js"),s=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n}},"./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_receive.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pathPaymentStrictReceive=function(e){switch(!0){case!e.sendAsset:throw new Error("Must specify a send asset");case!this.isValidAmount(e.sendMax):throw new TypeError(this.constructAmountRequirementsError("sendMax"));case!e.destAsset:throw new Error("Must provide a destAsset for a payment operation");case!this.isValidAmount(e.destAmount):throw new TypeError(this.constructAmountRequirementsError("destAmount"))}var t={};t.sendAsset=e.sendAsset.toXDRObject(),t.sendMax=this._toXDRAmount(e.sendMax);try{t.destination=(0,s.decodeAddressToMuxedAccount)(e.destination)}catch(e){throw new Error("destination is invalid")}t.destAsset=e.destAsset.toXDRObject(),t.destAmount=this._toXDRAmount(e.destAmount);var r=e.path?e.path:[];t.path=r.map((function(e){return e.toXDRObject()}));var n=new o.default.PathPaymentStrictReceiveOp(t),i={};return i.body=o.default.OperationBody.pathPaymentStrictReceive(n),this.setSourceAccount(i,e),new o.default.Operation(i)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js")},"./node_modules/@stellar/stellar-base/lib/operations/path_payment_strict_send.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pathPaymentStrictSend=function(e){switch(!0){case!e.sendAsset:throw new Error("Must specify a send asset");case!this.isValidAmount(e.sendAmount):throw new TypeError(this.constructAmountRequirementsError("sendAmount"));case!e.destAsset:throw new Error("Must provide a destAsset for a payment operation");case!this.isValidAmount(e.destMin):throw new TypeError(this.constructAmountRequirementsError("destMin"))}var t={};t.sendAsset=e.sendAsset.toXDRObject(),t.sendAmount=this._toXDRAmount(e.sendAmount);try{t.destination=(0,s.decodeAddressToMuxedAccount)(e.destination)}catch(e){throw new Error("destination is invalid")}t.destAsset=e.destAsset.toXDRObject(),t.destMin=this._toXDRAmount(e.destMin);var r=e.path?e.path:[];t.path=r.map((function(e){return e.toXDRObject()}));var n=new o.default.PathPaymentStrictSendOp(t),i={};return i.body=o.default.OperationBody.pathPaymentStrictSend(n),this.setSourceAccount(i,e),new o.default.Operation(i)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js")},"./node_modules/@stellar/stellar-base/lib/operations/payment.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.payment=function(e){if(!e.asset)throw new Error("Must provide an asset for a payment operation");if(!this.isValidAmount(e.amount))throw new TypeError(this.constructAmountRequirementsError("amount"));var t={};try{t.destination=(0,s.decodeAddressToMuxedAccount)(e.destination)}catch(e){throw new Error("destination is invalid")}t.asset=e.asset.toXDRObject(),t.amount=this._toXDRAmount(e.amount);var r=new o.default.PaymentOp(t),n={};return n.body=o.default.OperationBody.payment(r),this.setSourceAccount(n,e),new o.default.Operation(n)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js")},"./node_modules/@stellar/stellar-base/lib/operations/restore_footprint.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.restoreFootprint=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new o.default.RestoreFootprintOp({ext:new o.default.ExtensionPoint(0)}),r={body:o.default.OperationBody.restoreFootprint(t)};return this.setSourceAccount(r,null!=e?e:{}),new o.default.Operation(r)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n}},"./node_modules/@stellar/stellar-base/lib/operations/revoke_sponsorship.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.revokeAccountSponsorship=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!i.StrKey.isValidEd25519PublicKey(e.account))throw new Error("account is invalid");var t=s.default.LedgerKey.account(new s.default.LedgerKeyAccount({accountId:a.Keypair.fromPublicKey(e.account).xdrAccountId()})),r=s.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(t),n={};return n.body=s.default.OperationBody.revokeSponsorship(r),this.setSourceAccount(n,e),new s.default.Operation(n)},t.revokeClaimableBalanceSponsorship=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if("string"!=typeof e.balanceId)throw new Error("balanceId is invalid");var t=s.default.LedgerKey.claimableBalance(new s.default.LedgerKeyClaimableBalance({balanceId:s.default.ClaimableBalanceId.fromXDR(e.balanceId,"hex")})),r=s.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(t),n={};return n.body=s.default.OperationBody.revokeSponsorship(r),this.setSourceAccount(n,e),new s.default.Operation(n)},t.revokeDataSponsorship=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!i.StrKey.isValidEd25519PublicKey(e.account))throw new Error("account is invalid");if("string"!=typeof e.name||e.name.length>64)throw new Error("name must be a string, up to 64 characters");var t=s.default.LedgerKey.data(new s.default.LedgerKeyData({accountId:a.Keypair.fromPublicKey(e.account).xdrAccountId(),dataName:e.name})),r=s.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(t),n={};return n.body=s.default.OperationBody.revokeSponsorship(r),this.setSourceAccount(n,e),new s.default.Operation(n)},t.revokeLiquidityPoolSponsorship=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if("string"!=typeof e.liquidityPoolId)throw new Error("liquidityPoolId is invalid");var t=s.default.LedgerKey.liquidityPool(new s.default.LedgerKeyLiquidityPool({liquidityPoolId:s.default.PoolId.fromXDR(e.liquidityPoolId,"hex")})),r=s.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(t),n={body:s.default.OperationBody.revokeSponsorship(r)};return this.setSourceAccount(n,e),new s.default.Operation(n)},t.revokeOfferSponsorship=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!i.StrKey.isValidEd25519PublicKey(e.seller))throw new Error("seller is invalid");if("string"!=typeof e.offerId)throw new Error("offerId is invalid");var t=s.default.LedgerKey.offer(new s.default.LedgerKeyOffer({sellerId:a.Keypair.fromPublicKey(e.seller).xdrAccountId(),offerId:s.default.Int64.fromString(e.offerId)})),r=s.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(t),n={};return n.body=s.default.OperationBody.revokeSponsorship(r),this.setSourceAccount(n,e),new s.default.Operation(n)},t.revokeSignerSponsorship=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!i.StrKey.isValidEd25519PublicKey(t.account))throw new Error("account is invalid");if(t.signer.ed25519PublicKey){if(!i.StrKey.isValidEd25519PublicKey(t.signer.ed25519PublicKey))throw new Error("signer.ed25519PublicKey is invalid.");var r=i.StrKey.decodeEd25519PublicKey(t.signer.ed25519PublicKey);e=new s.default.SignerKey.signerKeyTypeEd25519(r)}else if(t.signer.preAuthTx){var o;if(o="string"==typeof t.signer.preAuthTx?n.from(t.signer.preAuthTx,"hex"):t.signer.preAuthTx,!n.isBuffer(o)||32!==o.length)throw new Error("signer.preAuthTx must be 32 bytes Buffer.");e=new s.default.SignerKey.signerKeyTypePreAuthTx(o)}else{if(!t.signer.sha256Hash)throw new Error("signer is invalid");var u;if(u="string"==typeof t.signer.sha256Hash?n.from(t.signer.sha256Hash,"hex"):t.signer.sha256Hash,!n.isBuffer(u)||32!==u.length)throw new Error("signer.sha256Hash must be 32 bytes Buffer.");e=new s.default.SignerKey.signerKeyTypeHashX(u)}var l=new s.default.RevokeSponsorshipOpSigner({accountId:a.Keypair.fromPublicKey(t.account).xdrAccountId(),signerKey:e}),c=s.default.RevokeSponsorshipOp.revokeSponsorshipSigner(l),d={};return d.body=s.default.OperationBody.revokeSponsorship(c),this.setSourceAccount(d,t),new s.default.Operation(d)},t.revokeTrustlineSponsorship=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!i.StrKey.isValidEd25519PublicKey(t.account))throw new Error("account is invalid");if(t.asset instanceof u.Asset)e=t.asset.toTrustLineXDRObject();else{if(!(t.asset instanceof l.LiquidityPoolId))throw new TypeError("asset must be an Asset or LiquidityPoolId");e=t.asset.toXDRObject()}var r=s.default.LedgerKey.trustline(new s.default.LedgerKeyTrustLine({accountId:a.Keypair.fromPublicKey(t.account).xdrAccountId(),asset:e})),n=s.default.RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(r),o={};return o.body=s.default.OperationBody.revokeSponsorship(n),this.setSourceAccount(o,t),new s.default.Operation(o)};var o,s=(o=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&o.__esModule?o:{default:o},i=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),a=r("./node_modules/@stellar/stellar-base/lib/keypair.js"),u=r("./node_modules/@stellar/stellar-base/lib/asset.js"),l=r("./node_modules/@stellar/stellar-base/lib/liquidity_pool_id.js")},"./node_modules/@stellar/stellar-base/lib/operations/set_options.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.setOptions=function(e){var t={};if(e.inflationDest){if(!a.StrKey.isValidEd25519PublicKey(e.inflationDest))throw new Error("inflationDest is invalid");t.inflationDest=i.Keypair.fromPublicKey(e.inflationDest).xdrAccountId()}if(t.clearFlags=this._checkUnsignedIntValue("clearFlags",e.clearFlags),t.setFlags=this._checkUnsignedIntValue("setFlags",e.setFlags),t.masterWeight=this._checkUnsignedIntValue("masterWeight",e.masterWeight,u),t.lowThreshold=this._checkUnsignedIntValue("lowThreshold",e.lowThreshold,u),t.medThreshold=this._checkUnsignedIntValue("medThreshold",e.medThreshold,u),t.highThreshold=this._checkUnsignedIntValue("highThreshold",e.highThreshold,u),void 0!==e.homeDomain&&"string"!=typeof e.homeDomain)throw new TypeError("homeDomain argument must be of type String");if(t.homeDomain=e.homeDomain,e.signer){var r,o=this._checkUnsignedIntValue("signer.weight",e.signer.weight,u),l=0;if(e.signer.ed25519PublicKey){if(!a.StrKey.isValidEd25519PublicKey(e.signer.ed25519PublicKey))throw new Error("signer.ed25519PublicKey is invalid.");var c=a.StrKey.decodeEd25519PublicKey(e.signer.ed25519PublicKey);r=new s.default.SignerKey.signerKeyTypeEd25519(c),l+=1}if(e.signer.preAuthTx){if("string"==typeof e.signer.preAuthTx&&(e.signer.preAuthTx=n.from(e.signer.preAuthTx,"hex")),!n.isBuffer(e.signer.preAuthTx)||32!==e.signer.preAuthTx.length)throw new Error("signer.preAuthTx must be 32 bytes Buffer.");r=new s.default.SignerKey.signerKeyTypePreAuthTx(e.signer.preAuthTx),l+=1}if(e.signer.sha256Hash){if("string"==typeof e.signer.sha256Hash&&(e.signer.sha256Hash=n.from(e.signer.sha256Hash,"hex")),!n.isBuffer(e.signer.sha256Hash)||32!==e.signer.sha256Hash.length)throw new Error("signer.sha256Hash must be 32 bytes Buffer.");r=new s.default.SignerKey.signerKeyTypeHashX(e.signer.sha256Hash),l+=1}if(e.signer.ed25519SignedPayload){if(!a.StrKey.isValidSignedPayload(e.signer.ed25519SignedPayload))throw new Error("signer.ed25519SignedPayload is invalid.");var d=a.StrKey.decodeSignedPayload(e.signer.ed25519SignedPayload),p=s.default.SignerKeyEd25519SignedPayload.fromXDR(d);r=s.default.SignerKey.signerKeyTypeEd25519SignedPayload(p),l+=1}if(1!==l)throw new Error("Signer object must contain exactly one of signer.ed25519PublicKey, signer.sha256Hash, signer.preAuthTx.");t.signer=new s.default.Signer({key:r,weight:o})}var f=new s.default.SetOptionsOp(t),h={};return h.body=s.default.OperationBody.setOptions(f),this.setSourceAccount(h,e),new s.default.Operation(h)};var o,s=(o=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&o.__esModule?o:{default:o},i=r("./node_modules/@stellar/stellar-base/lib/keypair.js"),a=r("./node_modules/@stellar/stellar-base/lib/strkey.js");function u(e,t){if(e>=0&&e<=255)return!0;throw new Error("".concat(t," value must be between 0 and 255"))}},"./node_modules/@stellar/stellar-base/lib/operations/set_trustline_flags.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.setTrustLineFlags=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={};if("object"!==i(e.flags)||0===Object.keys(e.flags).length)throw new Error("opts.flags must be a map of boolean flags to modify");var r={authorized:o.default.TrustLineFlags.authorizedFlag(),authorizedToMaintainLiabilities:o.default.TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),clawbackEnabled:o.default.TrustLineFlags.trustlineClawbackEnabledFlag()},n=0,a=0;Object.keys(e.flags).forEach((function(t){if(!Object.prototype.hasOwnProperty.call(r,t))throw new Error("unsupported flag name specified: ".concat(t));var o=e.flags[t],s=r[t].value;!0===o?a|=s:!1===o&&(n|=s)})),t.trustor=s.Keypair.fromPublicKey(e.trustor).xdrAccountId(),t.asset=e.asset.toXDRObject(),t.clearFlags=n,t.setFlags=a;var u={body:o.default.OperationBody.setTrustLineFlags(new o.default.SetTrustLineFlagsOp(t))};return this.setSourceAccount(u,e),new o.default.Operation(u)};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/keypair.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}},"./node_modules/@stellar/stellar-base/lib/scval.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.nativeToScVal=function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};switch(d(t)){case"object":var o,c,p;if(null===t)return s.default.ScVal.scvVoid();if(t instanceof s.default.ScVal)return t;if(t instanceof i.Address)return t.toScVal();if(t instanceof a.Contract)return t.address().toScVal();if(t instanceof Uint8Array||n.isBuffer(t)){var f,h=Uint8Array.from(t);switch(null!==(f=null==r?void 0:r.type)&&void 0!==f?f:"bytes"){case"bytes":return s.default.ScVal.scvBytes(h);case"symbol":return s.default.ScVal.scvSymbol(h);case"string":return s.default.ScVal.scvString(h);default:throw new TypeError("invalid type (".concat(r.type,") specified for bytes-like value"))}}if(Array.isArray(t)){if(t.length>0&&t.some((function(e){return d(e)!==d(t[0])})))throw new TypeError("array values (".concat(t,") must have the same type (types: ").concat(t.map((function(e){return d(e)})).join(","),")"));return s.default.ScVal.scvVec(t.map((function(t){return e(t,r)})))}if("Object"!==(null!==(o=null===(c=t.constructor)||void 0===c?void 0:c.name)&&void 0!==o?o:""))throw new TypeError("cannot interpret ".concat(null===(p=t.constructor)||void 0===p?void 0:p.name," value as ScVal (").concat(JSON.stringify(t),")"));return s.default.ScVal.scvMap(Object.entries(t).sort((function(e,t){var r=l(e,1)[0],n=l(t,1)[0];return r.localeCompare(n)})).map((function(t){var n,o,i=l(t,2),a=i[0],u=i[1],c=l(null!==(n=(null!==(o=null==r?void 0:r.type)&&void 0!==o?o:{})[a])&&void 0!==n?n:[null,null],2),d=c[0],p=c[1],f=d?{type:d}:{},h=p?{type:p}:{};return new s.default.ScMapEntry({key:e(a,f),val:e(u,h)})})));case"number":case"bigint":switch(null==r?void 0:r.type){case"u32":return s.default.ScVal.scvU32(t);case"i32":return s.default.ScVal.scvI32(t)}return new u.ScInt(t,{type:null==r?void 0:r.type}).toScVal();case"string":var y,m=null!==(y=null==r?void 0:r.type)&&void 0!==y?y:"string";switch(m){case"string":return s.default.ScVal.scvString(t);case"symbol":return s.default.ScVal.scvSymbol(t);case"address":return new i.Address(t).toScVal();case"u32":return s.default.ScVal.scvU32(parseInt(t,10));case"i32":return s.default.ScVal.scvI32(parseInt(t,10));default:if(u.XdrLargeInt.isType(m))return new u.XdrLargeInt(m,t).toScVal();throw new TypeError("invalid type (".concat(r.type,") specified for string value"))}case"boolean":return s.default.ScVal.scvBool(t);case"undefined":return s.default.ScVal.scvVoid();case"function":return e(t());default:throw new TypeError("failed to convert typeof ".concat(d(t)," (").concat(t,")"))}},t.scValToNative=function e(t){var r,o;switch(t.switch().value){case s.default.ScValType.scvVoid().value:return null;case s.default.ScValType.scvU64().value:case s.default.ScValType.scvI64().value:return t.value().toBigInt();case s.default.ScValType.scvU128().value:case s.default.ScValType.scvI128().value:case s.default.ScValType.scvU256().value:case s.default.ScValType.scvI256().value:return(0,u.scValToBigInt)(t);case s.default.ScValType.scvVec().value:return(null!==(r=t.vec())&&void 0!==r?r:[]).map(e);case s.default.ScValType.scvAddress().value:return i.Address.fromScVal(t).toString();case s.default.ScValType.scvMap().value:return Object.fromEntries((null!==(o=t.map())&&void 0!==o?o:[]).map((function(t){return[e(t.key()),e(t.val())]})));case s.default.ScValType.scvBool().value:case s.default.ScValType.scvU32().value:case s.default.ScValType.scvI32().value:case s.default.ScValType.scvBytes().value:return t.value();case s.default.ScValType.scvSymbol().value:case s.default.ScValType.scvString().value:var a=t.value();if(n.isBuffer(a)||ArrayBuffer.isView(a))try{return(new TextDecoder).decode(a)}catch(e){return new Uint8Array(a.buffer)}return a;case s.default.ScValType.scvTimepoint().value:case s.default.ScValType.scvDuration().value:return new s.default.Uint64(t.value()).toBigInt();case s.default.ScValType.scvError().value:if(t.error().switch().value===s.default.ScErrorType.sceContract().value)return{type:"contract",code:t.error().contractCode()};var l=t.error();return{type:"system",code:l.code().value,value:l.code().name};default:return t.value()}};var o,s=(o=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&o.__esModule?o:{default:o},i=r("./node_modules/@stellar/stellar-base/lib/address.js"),a=r("./node_modules/@stellar/stellar-base/lib/contract.js"),u=r("./node_modules/@stellar/stellar-base/lib/numbers/index.js");function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,s,i,a=[],u=!0,l=!1;try{if(s=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=s.call(r)).done)&&(a.push(n.value),a.length!==t);u=!0);}catch(e){l=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(l)throw o}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return c(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}},"./node_modules/@stellar/stellar-base/lib/signerkey.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SignerKey=void 0;var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n},s=r("./node_modules/@stellar/stellar-base/lib/strkey.js");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,u(n.key),n)}}function u(e){var t=function(e,t){if("object"!=i(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=i(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==i(t)?t:t+""}t.SignerKey=function(){return function(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}),null,[{key:"decodeAddress",value:function(e){var t={ed25519PublicKey:o.default.SignerKey.signerKeyTypeEd25519,preAuthTx:o.default.SignerKey.signerKeyTypePreAuthTx,sha256Hash:o.default.SignerKey.signerKeyTypeHashX,signedPayload:o.default.SignerKey.signerKeyTypeEd25519SignedPayload},r=s.StrKey.getVersionByteForPrefix(e),n=t[r];if(!n)throw new Error("invalid signer key type (".concat(r,")"));var i=(0,s.decodeCheck)(r,e);return n("signedPayload"===r?new o.default.SignerKeyEd25519SignedPayload({ed25519:i.slice(0,32),payload:i.slice(36)}):i)}},{key:"encodeSignerKey",value:function(e){var t,r;switch(e.switch()){case o.default.SignerKeyType.signerKeyTypeEd25519():t="ed25519PublicKey",r=e.value();break;case o.default.SignerKeyType.signerKeyTypePreAuthTx():t="preAuthTx",r=e.value();break;case o.default.SignerKeyType.signerKeyTypeHashX():t="sha256Hash",r=e.value();break;case o.default.SignerKeyType.signerKeyTypeEd25519SignedPayload():t="signedPayload",r=e.ed25519SignedPayload().toXDR("raw");break;default:throw new Error("invalid SignerKey (type: ".concat(e.switch(),")"))}return(0,s.encodeCheck)(t,r)}}])}()},"./node_modules/@stellar/stellar-base/lib/signing.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.FastSigning=void 0,t.generate=function(e){return o.generate(e)},t.sign=function(e,t){return o.sign(e,t)},t.verify=function(e,t,r){return o.verify(e,t,r)};var o={};t.FastSigning="undefined"==typeof window?function(){var e;try{e=r(Object(function(){var e=new Error("Cannot find module 'sodium-native'");throw e.code="MODULE_NOT_FOUND",e}()))}catch(e){return s()}return Object.keys(e).length?(o.generate=function(t){var r=n.alloc(e.crypto_sign_PUBLICKEYBYTES),o=n.alloc(e.crypto_sign_SECRETKEYBYTES);return e.crypto_sign_seed_keypair(r,o,t),r},o.sign=function(t,r){t=n.from(t);var o=n.alloc(e.crypto_sign_BYTES);return e.crypto_sign_detached(o,t,r),o},o.verify=function(t,r,o){t=n.from(t);try{return e.crypto_sign_verify_detached(r,t,o)}catch(e){return!1}},!0):s()}():s();function s(){var e=r("./node_modules/tweetnacl/nacl-fast.js");return o.generate=function(t){var r=new Uint8Array(t),o=e.sign.keyPair.fromSeed(r);return n.from(o.publicKey)},o.sign=function(t,r){t=n.from(t),t=new Uint8Array(t.toJSON().data),r=new Uint8Array(r.toJSON().data);var o=e.sign.detached(t,r);return n.from(o)},o.verify=function(t,r,o){return t=n.from(t),t=new Uint8Array(t.toJSON().data),r=new Uint8Array(r.toJSON().data),o=new Uint8Array(o.toJSON().data),e.sign.detached.verify(t,r,o)},!1}},"./node_modules/@stellar/stellar-base/lib/soroban.js":(e,t)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function n(e){return function(e){if(Array.isArray(e))return e}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i(n.key),n)}}function i(e){var t=function(e,t){if("object"!=r(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,t||"default");if("object"!=r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==r(t)?t:t+""}Object.defineProperty(t,"__esModule",{value:!0}),t.Soroban=void 0;t.Soroban=function(){return e=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)},r=[{key:"formatTokenAmount",value:function(e,t){if(e.includes("."))throw new TypeError("No decimals are allowed");var r=e;return t>0&&(r=t>r.length?["0",r.toString().padStart(t,"0")].join("."):[r.slice(0,-t),r.slice(-t)].join(".")),r.replace(/(\.\d*?)0+$/,"$1")}},{key:"parseTokenAmount",value:function(e,t){var r,o=n(e.split(".").slice()),s=o[0],i=o[1];if(o.slice(2).length)throw new Error("Invalid decimal value: ".concat(e));return BigInt(s+(null!==(r=null==i?void 0:i.padEnd(t,"0"))&&void 0!==r?r:"0".repeat(t))).toString()}}],(t=null)&&s(e.prototype,t),r&&s(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e;var e,t,r}()},"./node_modules/@stellar/stellar-base/lib/sorobandata_builder.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SorobanDataBuilder=void 0;var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&n.__esModule?n:{default:n};function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,a(n.key),n)}}function a(e){var t=function(e,t){if("object"!=s(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=s(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==s(t)?t:t+""}t.SorobanDataBuilder=function(){return function(e,t,r){return t&&i(e.prototype,t),r&&i(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(t){var r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),function(e,t,r){(t=a(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}(this,"_data",void 0),r=t?"string"==typeof t||ArrayBuffer.isView(t)?e.fromXDR(t):e.fromXDR(t.toXDR()):new o.default.SorobanTransactionData({resources:new o.default.SorobanResources({footprint:new o.default.LedgerFootprint({readOnly:[],readWrite:[]}),instructions:0,readBytes:0,writeBytes:0}),ext:new o.default.ExtensionPoint(0),resourceFee:new o.default.Int64(0)}),this._data=r}),[{key:"setResourceFee",value:function(e){return this._data.resourceFee(new o.default.Int64(e)),this}},{key:"setResources",value:function(e,t,r){return this._data.resources().instructions(e),this._data.resources().readBytes(t),this._data.resources().writeBytes(r),this}},{key:"appendFootprint",value:function(e,t){return this.setFootprint(this.getReadOnly().concat(e),this.getReadWrite().concat(t))}},{key:"setFootprint",value:function(e,t){return null!==e&&this.setReadOnly(e),null!==t&&this.setReadWrite(t),this}},{key:"setReadOnly",value:function(e){return this._data.resources().footprint().readOnly(null!=e?e:[]),this}},{key:"setReadWrite",value:function(e){return this._data.resources().footprint().readWrite(null!=e?e:[]),this}},{key:"build",value:function(){return o.default.SorobanTransactionData.fromXDR(this._data.toXDR())}},{key:"getReadOnly",value:function(){return this.getFootprint().readOnly()}},{key:"getReadWrite",value:function(){return this.getFootprint().readWrite()}},{key:"getFootprint",value:function(){return this._data.resources().footprint()}}],[{key:"fromXDR",value:function(e){return o.default.SorobanTransactionData.fromXDR(e,"string"==typeof e?"base64":"raw")}}])}()},"./node_modules/@stellar/stellar-base/lib/strkey.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.StrKey=void 0,t.decodeCheck=f,t.encodeCheck=h;var o,s=(o=r("./node_modules/base32.js/base32.js"))&&o.__esModule?o:{default:o},i=r("./node_modules/@stellar/stellar-base/lib/util/checksum.js");function a(e){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a(e)}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,l(n.key),n)}}function l(e){var t=function(e,t){if("object"!=a(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=a(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==a(t)?t:t+""}var c={ed25519PublicKey:48,ed25519SecretSeed:144,med25519PublicKey:96,preAuthTx:152,sha256Hash:184,signedPayload:120,contract:16},d={G:"ed25519PublicKey",S:"ed25519SecretSeed",M:"med25519PublicKey",T:"preAuthTx",X:"sha256Hash",P:"signedPayload",C:"contract"};t.StrKey=function(){return function(e,t,r){return t&&u(e.prototype,t),r&&u(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}),null,[{key:"encodeEd25519PublicKey",value:function(e){return h("ed25519PublicKey",e)}},{key:"decodeEd25519PublicKey",value:function(e){return f("ed25519PublicKey",e)}},{key:"isValidEd25519PublicKey",value:function(e){return p("ed25519PublicKey",e)}},{key:"encodeEd25519SecretSeed",value:function(e){return h("ed25519SecretSeed",e)}},{key:"decodeEd25519SecretSeed",value:function(e){return f("ed25519SecretSeed",e)}},{key:"isValidEd25519SecretSeed",value:function(e){return p("ed25519SecretSeed",e)}},{key:"encodeMed25519PublicKey",value:function(e){return h("med25519PublicKey",e)}},{key:"decodeMed25519PublicKey",value:function(e){return f("med25519PublicKey",e)}},{key:"isValidMed25519PublicKey",value:function(e){return p("med25519PublicKey",e)}},{key:"encodePreAuthTx",value:function(e){return h("preAuthTx",e)}},{key:"decodePreAuthTx",value:function(e){return f("preAuthTx",e)}},{key:"encodeSha256Hash",value:function(e){return h("sha256Hash",e)}},{key:"decodeSha256Hash",value:function(e){return f("sha256Hash",e)}},{key:"encodeSignedPayload",value:function(e){return h("signedPayload",e)}},{key:"decodeSignedPayload",value:function(e){return f("signedPayload",e)}},{key:"isValidSignedPayload",value:function(e){return p("signedPayload",e)}},{key:"encodeContract",value:function(e){return h("contract",e)}},{key:"decodeContract",value:function(e){return f("contract",e)}},{key:"isValidContract",value:function(e){return p("contract",e)}},{key:"getVersionByteForPrefix",value:function(e){return d[e[0]]}}])}();function p(e,t){if("string"!=typeof t)return!1;switch(e){case"ed25519PublicKey":case"ed25519SecretSeed":case"preAuthTx":case"sha256Hash":case"contract":if(56!==t.length)return!1;break;case"med25519PublicKey":if(69!==t.length)return!1;break;case"signedPayload":if(t.length<56||t.length>165)return!1;break;default:return!1}var r="";try{r=f(e,t)}catch(e){return!1}switch(e){case"ed25519PublicKey":case"ed25519SecretSeed":case"preAuthTx":case"sha256Hash":case"contract":return 32===r.length;case"med25519PublicKey":return 40===r.length;case"signedPayload":return r.length>=40&&r.length<=100;default:return!1}}function f(e,t){if("string"!=typeof t)throw new TypeError("encoded argument must be of type String");var r=s.default.decode(t),o=r[0],a=r.slice(0,-2),u=a.slice(1),l=r.slice(-2);if(t!==s.default.encode(r))throw new Error("invalid encoded string");var d=c[e];if(void 0===d)throw new Error("".concat(e," is not a valid version byte name. ")+"Expected one of ".concat(Object.keys(c).join(", ")));if(o!==d)throw new Error("invalid version byte. expected ".concat(d,", got ").concat(o));var p=y(a);if(!(0,i.verifyChecksum)(p,l))throw new Error("invalid checksum");return n.from(u)}function h(e,t){if(null==t)throw new Error("cannot encode null data");var r=c[e];if(void 0===r)throw new Error("".concat(e," is not a valid version byte name. ")+"Expected one of ".concat(Object.keys(c).join(", ")));t=n.from(t);var o=n.from([r]),i=n.concat([o,t]),a=n.from(y(i)),u=n.concat([i,a]);return s.default.encode(u)}function y(e){for(var t=[0,4129,8258,12387,16516,20645,24774,28903,33032,37161,41290,45419,49548,53677,57806,61935,4657,528,12915,8786,21173,17044,29431,25302,37689,33560,45947,41818,54205,50076,62463,58334,9314,13379,1056,5121,25830,29895,17572,21637,42346,46411,34088,38153,58862,62927,50604,54669,13907,9842,5649,1584,30423,26358,22165,18100,46939,42874,38681,34616,63455,59390,55197,51132,18628,22757,26758,30887,2112,6241,10242,14371,51660,55789,59790,63919,35144,39273,43274,47403,23285,19156,31415,27286,6769,2640,14899,10770,56317,52188,64447,60318,39801,35672,47931,43802,27814,31879,19684,23749,11298,15363,3168,7233,60846,64911,52716,56781,44330,48395,36200,40265,32407,28342,24277,20212,15891,11826,7761,3696,65439,61374,57309,53244,48923,44858,40793,36728,37256,33193,45514,41451,53516,49453,61774,57711,4224,161,12482,8419,20484,16421,28742,24679,33721,37784,41979,46042,49981,54044,58239,62302,689,4752,8947,13010,16949,21012,25207,29270,46570,42443,38312,34185,62830,58703,54572,50445,13538,9411,5280,1153,29798,25671,21540,17413,42971,47098,34713,38840,59231,63358,50973,55100,9939,14066,1681,5808,26199,30326,17941,22068,55628,51565,63758,59695,39368,35305,47498,43435,22596,18533,30726,26663,6336,2273,14466,10403,52093,56156,60223,64286,35833,39896,43963,48026,19061,23124,27191,31254,2801,6864,10931,14994,64814,60687,56684,52557,48554,44427,40424,36297,31782,27655,23652,19525,15522,11395,7392,3265,61215,65342,53085,57212,44955,49082,36825,40952,28183,32310,20053,24180,11923,16050,3793,7920],r=0,n=0;n<e.length;n+=1){r=r<<8^t[r>>8^e[n]],r&=65535}var o=new Uint8Array(2);return o[0]=255&r,o[1]=r>>8&255,o}},"./node_modules/@stellar/stellar-base/lib/transaction.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.Transaction=void 0;var s,i=(s=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&s.__esModule?s:{default:s},a=r("./node_modules/@stellar/stellar-base/lib/hashing.js"),u=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),l=r("./node_modules/@stellar/stellar-base/lib/operation.js"),c=r("./node_modules/@stellar/stellar-base/lib/memo.js"),d=r("./node_modules/@stellar/stellar-base/lib/transaction_base.js"),p=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js");function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,h(n.key),n)}}function h(e){var t=function(e,t){if("object"!=o(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==o(t)?t:t+""}function y(e,t,r){return t=g(t),function(e,t){if(t&&("object"==o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,m()?Reflect.construct(t,r||[],g(e).constructor):t.apply(e,r))}function m(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(m=function(){return!!e})()}function g(e){return g=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},g(e)}function v(e,t){return v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},v(e,t)}t.Transaction=function(e){function t(e,r){var o;if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),"string"==typeof e){var s=n.from(e,"base64");e=i.default.TransactionEnvelope.fromXDR(s)}var a=e.switch();if(a!==i.default.EnvelopeType.envelopeTypeTxV0()&&a!==i.default.EnvelopeType.envelopeTypeTx())throw new Error("Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ".concat(a.name,"."));var c=e.value(),d=c.tx(),f=d.fee().toString();if((o=y(this,t,[d,(c.signatures()||[]).slice(),f,r]))._envelopeType=a,o._memo=d.memo(),o._sequence=d.seqNum().toString(),o._envelopeType===i.default.EnvelopeType.envelopeTypeTxV0())o._source=u.StrKey.encodeEd25519PublicKey(o.tx.sourceAccountEd25519());else o._source=(0,p.encodeMuxedAccountToAddress)(o.tx.sourceAccount());var h=null,m=null;switch(o._envelopeType){case i.default.EnvelopeType.envelopeTypeTxV0():m=d.timeBounds();break;case i.default.EnvelopeType.envelopeTypeTx():switch(d.cond().switch()){case i.default.PreconditionType.precondTime():m=d.cond().timeBounds();break;case i.default.PreconditionType.precondV2():m=(h=d.cond().v2()).timeBounds()}}if(m&&(o._timeBounds={minTime:m.minTime().toString(),maxTime:m.maxTime().toString()}),h){var g=h.ledgerBounds();g&&(o._ledgerBounds={minLedger:g.minLedger(),maxLedger:g.maxLedger()});var v=h.minSeqNum();v&&(o._minAccountSequence=v.toString()),o._minAccountSequenceAge=h.minSeqAge(),o._minAccountSequenceLedgerGap=h.minSeqLedgerGap(),o._extraSigners=h.extraSigners()}var b=d.operations()||[];return o._operations=b.map((function(e){return l.Operation.fromXDRObject(e)})),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}(t,e),function(e,t,r){return t&&f(e.prototype,t),r&&f(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}(t,[{key:"timeBounds",get:function(){return this._timeBounds},set:function(e){throw new Error("Transaction is immutable")}},{key:"ledgerBounds",get:function(){return this._ledgerBounds},set:function(e){throw new Error("Transaction is immutable")}},{key:"minAccountSequence",get:function(){return this._minAccountSequence},set:function(e){throw new Error("Transaction is immutable")}},{key:"minAccountSequenceAge",get:function(){return this._minAccountSequenceAge},set:function(e){throw new Error("Transaction is immutable")}},{key:"minAccountSequenceLedgerGap",get:function(){return this._minAccountSequenceLedgerGap},set:function(e){throw new Error("Transaction is immutable")}},{key:"extraSigners",get:function(){return this._extraSigners},set:function(e){throw new Error("Transaction is immutable")}},{key:"sequence",get:function(){return this._sequence},set:function(e){throw new Error("Transaction is immutable")}},{key:"source",get:function(){return this._source},set:function(e){throw new Error("Transaction is immutable")}},{key:"operations",get:function(){return this._operations},set:function(e){throw new Error("Transaction is immutable")}},{key:"memo",get:function(){return c.Memo.fromXDRObject(this._memo)},set:function(e){throw new Error("Transaction is immutable")}},{key:"signatureBase",value:function(){var e=this.tx;this._envelopeType===i.default.EnvelopeType.envelopeTypeTxV0()&&(e=i.default.Transaction.fromXDR(n.concat([i.default.PublicKeyType.publicKeyTypeEd25519().toXDR(),e.toXDR()])));var t=new i.default.TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(e);return new i.default.TransactionSignaturePayload({networkId:i.default.Hash.fromXDR((0,a.hash)(this.networkPassphrase)),taggedTransaction:t}).toXDR()}},{key:"toEnvelope",value:function(){var e,t=this.tx.toXDR(),r=this.signatures.slice();switch(this._envelopeType){case i.default.EnvelopeType.envelopeTypeTxV0():e=new i.default.TransactionEnvelope.envelopeTypeTxV0(new i.default.TransactionV0Envelope({tx:i.default.TransactionV0.fromXDR(t),signatures:r}));break;case i.default.EnvelopeType.envelopeTypeTx():e=new i.default.TransactionEnvelope.envelopeTypeTx(new i.default.TransactionV1Envelope({tx:i.default.Transaction.fromXDR(t),signatures:r}));break;default:throw new Error("Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ".concat(this._envelopeType.name,"."))}return e}},{key:"getClaimableBalanceId",value:function(e){if(!Number.isInteger(e)||e<0||e>=this.operations.length)throw new RangeError("invalid operation index");var t=this.operations[e];try{t=l.Operation.createClaimableBalance(t)}catch(e){throw new TypeError("expected createClaimableBalance, got ".concat(t.type,": ").concat(e))}var r=u.StrKey.decodeEd25519PublicKey((0,p.extractBaseAddress)(this.source)),n=i.default.HashIdPreimage.envelopeTypeOpId(new i.default.HashIdPreimageOperationId({sourceAccount:i.default.AccountId.publicKeyTypeEd25519(r),seqNum:i.default.SequenceNumber.fromString(this.sequence),opNum:e})),o=(0,a.hash)(n.toXDR("raw"));return i.default.ClaimableBalanceId.claimableBalanceIdTypeV0(o).toXDR("hex")}}])}(d.TransactionBase)},"./node_modules/@stellar/stellar-base/lib/transaction_base.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionBase=void 0;var o,s=(o=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&o.__esModule?o:{default:o},i=r("./node_modules/@stellar/stellar-base/lib/hashing.js"),a=r("./node_modules/@stellar/stellar-base/lib/keypair.js");function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,c(n.key),n)}}function c(e){var t=function(e,t){if("object"!=u(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==u(t)?t:t+""}t.TransactionBase=function(){return function(e,t,r){return t&&l(e.prototype,t),r&&l(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}((function e(t,r,n,o){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"string"!=typeof o)throw new Error("Invalid passphrase provided to Transaction: expected a string but got a ".concat(u(o)));this._networkPassphrase=o,this._tx=t,this._signatures=r,this._fee=n}),[{key:"signatures",get:function(){return this._signatures},set:function(e){throw new Error("Transaction is immutable")}},{key:"tx",get:function(){return this._tx},set:function(e){throw new Error("Transaction is immutable")}},{key:"fee",get:function(){return this._fee},set:function(e){throw new Error("Transaction is immutable")}},{key:"networkPassphrase",get:function(){return this._networkPassphrase},set:function(e){this._networkPassphrase=e}},{key:"sign",value:function(){for(var e=this,t=this.hash(),r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];n.forEach((function(r){var n=r.signDecorated(t);e.signatures.push(n)}))}},{key:"getKeypairSignature",value:function(e){return e.sign(this.hash()).toString("base64")}},{key:"addSignature",value:function(){var e,t,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(!o||"string"!=typeof o)throw new Error("Invalid signature");if(!r||"string"!=typeof r)throw new Error("Invalid publicKey");var i=n.from(o,"base64");try{t=(e=a.Keypair.fromPublicKey(r)).signatureHint()}catch(e){throw new Error("Invalid publicKey")}if(!e.verify(this.hash(),i))throw new Error("Invalid signature");this.signatures.push(new s.default.DecoratedSignature({hint:t,signature:i}))}},{key:"addDecoratedSignature",value:function(e){this.signatures.push(e)}},{key:"signHashX",value:function(e){if("string"==typeof e&&(e=n.from(e,"hex")),e.length>64)throw new Error("preimage cannnot be longer than 64 bytes");var t=e,r=(0,i.hash)(e),o=r.slice(r.length-4);this.signatures.push(new s.default.DecoratedSignature({hint:o,signature:t}))}},{key:"hash",value:function(){return(0,i.hash)(this.signatureBase())}},{key:"signatureBase",value:function(){throw new Error("Implement in subclass")}},{key:"toEnvelope",value:function(){throw new Error("Implement in subclass")}},{key:"toXDR",value:function(){return this.toEnvelope().toXDR().toString("base64")}}])}()},"./node_modules/@stellar/stellar-base/lib/transaction_builder.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionBuilder=t.TimeoutInfinite=t.BASE_FEE=void 0,t.isValidDate=k;var n=r("./node_modules/@stellar/js-xdr/dist/xdr.js"),o=y(r("./node_modules/@stellar/stellar-base/lib/util/bignumber.js")),s=y(r("./node_modules/@stellar/stellar-base/lib/xdr.js")),i=r("./node_modules/@stellar/stellar-base/lib/account.js"),a=r("./node_modules/@stellar/stellar-base/lib/muxed_account.js"),u=r("./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js"),l=r("./node_modules/@stellar/stellar-base/lib/transaction.js"),c=r("./node_modules/@stellar/stellar-base/lib/fee_bump_transaction.js"),d=r("./node_modules/@stellar/stellar-base/lib/sorobandata_builder.js"),p=r("./node_modules/@stellar/stellar-base/lib/strkey.js"),f=r("./node_modules/@stellar/stellar-base/lib/signerkey.js"),h=r("./node_modules/@stellar/stellar-base/lib/memo.js");function y(e){return e&&e.__esModule?e:{default:e}}function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function g(e){return function(e){if(Array.isArray(e))return v(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return v(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?v(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}function b(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function w(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?b(Object(r),!0).forEach((function(t){S(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):b(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function S(e,t,r){return(t=T(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,T(n.key),n)}}function T(e){var t=function(e,t){if("object"!=m(e)||!e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,t||"default");if("object"!=m(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==m(t)?t:t+""}var E=t.BASE_FEE="100";t.TimeoutInfinite=0,t.TransactionBuilder=function(){function e(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!t)throw new Error("must specify source account for the transaction");if(void 0===r.fee)throw new Error("must specify fee for the transaction (in stroops)");this.source=t,this.operations=[],this.baseFee=r.fee,this.timebounds=r.timebounds?w({},r.timebounds):null,this.ledgerbounds=r.ledgerbounds?w({},r.ledgerbounds):null,this.minAccountSequence=r.minAccountSequence||null,this.minAccountSequenceAge=r.minAccountSequenceAge||null,this.minAccountSequenceLedgerGap=r.minAccountSequenceLedgerGap||null,this.extraSigners=r.extraSigners?g(r.extraSigners):null,this.memo=r.memo||h.Memo.none(),this.networkPassphrase=r.networkPassphrase||null,this.sorobanData=r.sorobanData?new d.SorobanDataBuilder(r.sorobanData).build():null}return t=e,y=[{key:"cloneFrom",value:function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(t instanceof l.Transaction))throw new TypeError("expected a 'Transaction', got: ".concat(t));var n,o=(BigInt(t.sequence)-1n).toString();if(p.StrKey.isValidMed25519PublicKey(t.source))n=a.MuxedAccount.fromAddress(t.source,o);else{if(!p.StrKey.isValidEd25519PublicKey(t.source))throw new TypeError("unsupported tx source account: ".concat(t.source));n=new i.Account(t.source,o)}var s=new e(n,w({fee:(parseInt(t.fee,10)/t.operations.length||E).toString(),memo:t.memo,networkPassphrase:t.networkPassphrase,timebounds:t.timeBounds,ledgerbounds:t.ledgerBounds,minAccountSequence:t.minAccountSequence,minAccountSequenceAge:t.minAccountSequenceAge,minAccountSequenceLedgerGap:t.minAccountSequenceLedgerGap,extraSigners:t.extraSigners},r));return t._tx.operations().forEach((function(e){return s.addOperation(e)})),s}},{key:"buildFeeBumpTransaction",value:function(e,t,r,n){var i=r.operations.length,a=new o.default(r.fee).div(i),l=new o.default(t);if(l.lt(a))throw new Error("Invalid baseFee, it should be at least ".concat(a," stroops."));var d=new o.default(E);if(l.lt(d))throw new Error("Invalid baseFee, it should be at least ".concat(d," stroops."));var p,f=r.toEnvelope();if(f.switch()===s.default.EnvelopeType.envelopeTypeTxV0()){var h=f.v0().tx(),y=new s.default.Transaction({sourceAccount:new s.default.MuxedAccount.keyTypeEd25519(h.sourceAccountEd25519()),fee:h.fee(),seqNum:h.seqNum(),cond:s.default.Preconditions.precondTime(h.timeBounds()),memo:h.memo(),operations:h.operations(),ext:new s.default.TransactionExt(0)});f=new s.default.TransactionEnvelope.envelopeTypeTx(new s.default.TransactionV1Envelope({tx:y,signatures:f.v0().signatures()}))}p="string"==typeof e?(0,u.decodeAddressToMuxedAccount)(e):e.xdrMuxedAccount();var m=new s.default.FeeBumpTransaction({feeSource:p,fee:s.default.Int64.fromString(l.times(i+1).toString()),innerTx:s.default.FeeBumpTransactionInnerTx.envelopeTypeTx(f.v1()),ext:new s.default.FeeBumpTransactionExt(0)}),g=new s.default.FeeBumpTransactionEnvelope({tx:m,signatures:[]}),v=new s.default.TransactionEnvelope.envelopeTypeTxFeeBump(g);return new c.FeeBumpTransaction(v,n)}},{key:"fromXDR",value:function(e,t){return"string"==typeof e&&(e=s.default.TransactionEnvelope.fromXDR(e,"base64")),e.switch()===s.default.EnvelopeType.envelopeTypeTxFeeBump()?new c.FeeBumpTransaction(e,t):new l.Transaction(e,t)}}],(r=[{key:"addOperation",value:function(e){return this.operations.push(e),this}},{key:"addOperationAt",value:function(e,t){return this.operations.splice(t,0,e),this}},{key:"clearOperations",value:function(){return this.operations=[],this}},{key:"clearOperationAt",value:function(e){return this.operations.splice(e,1),this}},{key:"addMemo",value:function(e){return this.memo=e,this}},{key:"setTimeout",value:function(e){if(null!==this.timebounds&&this.timebounds.maxTime>0)throw new Error("TimeBounds.max_time has been already set - setting timeout would overwrite it.");if(e<0)throw new Error("timeout cannot be negative");if(e>0){var t=Math.floor(Date.now()/1e3)+e;null===this.timebounds?this.timebounds={minTime:0,maxTime:t}:this.timebounds={minTime:this.timebounds.minTime,maxTime:t}}else this.timebounds={minTime:0,maxTime:0};return this}},{key:"setTimebounds",value:function(e,t){if("number"==typeof e&&(e=new Date(1e3*e)),"number"==typeof t&&(t=new Date(1e3*t)),null!==this.timebounds)throw new Error("TimeBounds has been already set - setting timebounds would overwrite it.");var r=Math.floor(e.valueOf()/1e3),n=Math.floor(t.valueOf()/1e3);if(r<0)throw new Error("min_time cannot be negative");if(n<0)throw new Error("max_time cannot be negative");if(n>0&&r>n)throw new Error("min_time cannot be greater than max_time");return this.timebounds={minTime:r,maxTime:n},this}},{key:"setLedgerbounds",value:function(e,t){if(null!==this.ledgerbounds)throw new Error("LedgerBounds has been already set - setting ledgerbounds would overwrite it.");if(e<0)throw new Error("min_ledger cannot be negative");if(t<0)throw new Error("max_ledger cannot be negative");if(t>0&&e>t)throw new Error("min_ledger cannot be greater than max_ledger");return this.ledgerbounds={minLedger:e,maxLedger:t},this}},{key:"setMinAccountSequence",value:function(e){if(null!==this.minAccountSequence)throw new Error("min_account_sequence has been already set - setting min_account_sequence would overwrite it.");return this.minAccountSequence=e,this}},{key:"setMinAccountSequenceAge",value:function(e){if("number"!=typeof e)throw new Error("min_account_sequence_age must be a number");if(null!==this.minAccountSequenceAge)throw new Error("min_account_sequence_age has been already set - setting min_account_sequence_age would overwrite it.");if(e<0)throw new Error("min_account_sequence_age cannot be negative");return this.minAccountSequenceAge=e,this}},{key:"setMinAccountSequenceLedgerGap",value:function(e){if(null!==this.minAccountSequenceLedgerGap)throw new Error("min_account_sequence_ledger_gap has been already set - setting min_account_sequence_ledger_gap would overwrite it.");if(e<0)throw new Error("min_account_sequence_ledger_gap cannot be negative");return this.minAccountSequenceLedgerGap=e,this}},{key:"setExtraSigners",value:function(e){if(!Array.isArray(e))throw new Error("extra_signers must be an array of strings.");if(null!==this.extraSigners)throw new Error("extra_signers has been already set - setting extra_signers would overwrite it.");if(e.length>2)throw new Error("extra_signers cannot be longer than 2 elements.");return this.extraSigners=g(e),this}},{key:"setNetworkPassphrase",value:function(e){return this.networkPassphrase=e,this}},{key:"setSorobanData",value:function(e){return this.sorobanData=new d.SorobanDataBuilder(e).build(),this}},{key:"build",value:function(){var e=new o.default(this.source.sequenceNumber()).plus(1),t={fee:new o.default(this.baseFee).times(this.operations.length).toNumber(),seqNum:s.default.SequenceNumber.fromString(e.toString()),memo:this.memo?this.memo.toXDRObject():null};if(null===this.timebounds||void 0===this.timebounds.minTime||void 0===this.timebounds.maxTime)throw new Error("TimeBounds has to be set or you must call setTimeout(TimeoutInfinite).");k(this.timebounds.minTime)&&(this.timebounds.minTime=this.timebounds.minTime.getTime()/1e3),k(this.timebounds.maxTime)&&(this.timebounds.maxTime=this.timebounds.maxTime.getTime()/1e3),this.timebounds.minTime=n.UnsignedHyper.fromString(this.timebounds.minTime.toString()),this.timebounds.maxTime=n.UnsignedHyper.fromString(this.timebounds.maxTime.toString());var r=new s.default.TimeBounds(this.timebounds);if(this.hasV2Preconditions()){var i=null;null!==this.ledgerbounds&&(i=new s.default.LedgerBounds(this.ledgerbounds));var a=this.minAccountSequence||"0";a=s.default.SequenceNumber.fromString(a);var c=n.UnsignedHyper.fromString(null!==this.minAccountSequenceAge?this.minAccountSequenceAge.toString():"0"),d=this.minAccountSequenceLedgerGap||0,p=null!==this.extraSigners?this.extraSigners.map(f.SignerKey.decodeAddress):[];t.cond=s.default.Preconditions.precondV2(new s.default.PreconditionsV2({timeBounds:r,ledgerBounds:i,minSeqNum:a,minSeqAge:c,minSeqLedgerGap:d,extraSigners:p}))}else t.cond=s.default.Preconditions.precondTime(r);t.sourceAccount=(0,u.decodeAddressToMuxedAccount)(this.source.accountId()),this.sorobanData?t.ext=new s.default.TransactionExt(1,this.sorobanData):t.ext=new s.default.TransactionExt(0,s.default.Void);var h=new s.default.Transaction(t);h.operations(this.operations);var y=new s.default.TransactionEnvelope.envelopeTypeTx(new s.default.TransactionV1Envelope({tx:h})),m=new l.Transaction(y,this.networkPassphrase);return this.source.incrementSequenceNumber(),m}},{key:"hasV2Preconditions",value:function(){return null!==this.ledgerbounds||null!==this.minAccountSequence||null!==this.minAccountSequenceAge||null!==this.minAccountSequenceLedgerGap||null!==this.extraSigners&&this.extraSigners.length>0}}])&&_(t.prototype,r),y&&_(t,y),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,r,y}();function k(e){return e instanceof Date&&!isNaN(e)}},"./node_modules/@stellar/stellar-base/lib/util/bignumber.js":(e,t,r)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=((n=r("./node_modules/bignumber.js/bignumber.js"))&&n.__esModule?n:{default:n}).default.clone();o.DEBUG=!0;t.default=o},"./node_modules/@stellar/stellar-base/lib/util/checksum.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.verifyChecksum=function(e,t){if(e.length!==t.length)return!1;if(0===e.length)return!0;for(var r=0;r<e.length;r+=1)if(e[r]!==t[r])return!1;return!0}},"./node_modules/@stellar/stellar-base/lib/util/continued_fraction.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.best_r=function(e){var t,r,n=new o.default(e),a=[[new o.default(0),new o.default(1)],[new o.default(1),new o.default(0)]],u=2;for(;!n.gt(i);){t=n.integerValue(o.default.ROUND_FLOOR),r=n.minus(t);var l=t.times(a[u-1][0]).plus(a[u-2][0]),c=t.times(a[u-1][1]).plus(a[u-2][1]);if(l.gt(i)||c.gt(i))break;if(a.push([l,c]),r.eq(0))break;n=new o.default(1).div(r),u+=1}var d=(h=a[a.length-1],y=2,function(e){if(Array.isArray(e))return e}(h)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,s,i,a=[],u=!0,l=!1;try{if(s=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=s.call(r)).done)&&(a.push(n.value),a.length!==t);u=!0);}catch(e){l=!0,o=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(l)throw o}}return a}}(h,y)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var r={}.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?s(e,t):void 0}}(h,y)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),p=d[0],f=d[1];var h,y;if(p.isZero()||f.isZero())throw new Error("Couldn't find approximation");return[p.toNumber(),f.toNumber()]};var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/util/bignumber.js"))&&n.__esModule?n:{default:n};function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=Array(t);r<t;r++)n[r]=e[r];return n}var i=2147483647},"./node_modules/@stellar/stellar-base/lib/util/decode_encode_muxed_account.js":(e,t,r)=>{"use strict";var n=r("./node_modules/buffer/index.js").Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.decodeAddressToMuxedAccount=a,t.encodeMuxedAccount=function(e,t){if(!i.StrKey.isValidEd25519PublicKey(e))throw new Error("address should be a Stellar account ID (G...)");if("string"!=typeof t)throw new Error("id should be a string representing a number (uint64)");return s.default.MuxedAccount.keyTypeMuxedEd25519(new s.default.MuxedAccountMed25519({id:s.default.Uint64.fromString(t),ed25519:i.StrKey.decodeEd25519PublicKey(e)}))},t.encodeMuxedAccountToAddress=u,t.extractBaseAddress=function(e){if(i.StrKey.isValidEd25519PublicKey(e))return e;if(!i.StrKey.isValidMed25519PublicKey(e))throw new TypeError("expected muxed account (M...), got ".concat(e));var t=a(e);return i.StrKey.encodeEd25519PublicKey(t.med25519().ed25519())};var o,s=(o=r("./node_modules/@stellar/stellar-base/lib/xdr.js"))&&o.__esModule?o:{default:o},i=r("./node_modules/@stellar/stellar-base/lib/strkey.js");function a(e){return i.StrKey.isValidMed25519PublicKey(e)?function(e){var t=i.StrKey.decodeMed25519PublicKey(e);return s.default.MuxedAccount.keyTypeMuxedEd25519(new s.default.MuxedAccountMed25519({id:s.default.Uint64.fromXDR(t.subarray(-8)),ed25519:t.subarray(0,-8)}))}(e):s.default.MuxedAccount.keyTypeEd25519(i.StrKey.decodeEd25519PublicKey(e))}function u(e){return e.switch().value===s.default.CryptoKeyType.keyTypeMuxedEd25519().value?function(e){if(e.switch()===s.default.CryptoKeyType.keyTypeEd25519())return u(e);var t=e.med25519();return i.StrKey.encodeMed25519PublicKey(n.concat([t.ed25519(),t.id().toXDR("raw")]))}(e):i.StrKey.encodeEd25519PublicKey(e.ed25519())}},"./node_modules/@stellar/stellar-base/lib/util/util.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.trimEnd=void 0;t.trimEnd=function(e,t){for(var r="number"==typeof e,n=String(e);n.endsWith(t);)n=n.slice(0,-1);return r?Number(n):n}},"./node_modules/@stellar/stellar-base/lib/xdr.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r("./node_modules/@stellar/stellar-base/lib/generated/curr_generated.js"))&&n.__esModule?n:{default:n};t.default=o.default},"./src/browser.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{StellarBase:()=>i,default:()=>a,httpClient:()=>n.httpClient});var n=r("./src/http-client/index.ts"),o=r("./src/index.ts"),s={};for(const e in o)["default","StellarBase","httpClient"].indexOf(e)<0&&(s[e]=()=>o[e]);r.d(t,s);var i=r("./node_modules/@stellar/stellar-base/lib/index.js");const a=(e=r.hmd(e)).exports},"./src/config.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Config:()=>s});const n={allowHttp:!1,timeout:0};let o={...n};class s{static setAllowHttp(e){o.allowHttp=e}static setTimeout(e){o.timeout=e}static isAllowHttp(){return o.allowHttp}static getTimeout(){return o.timeout}static setDefault(){o={...n}}}},"./src/contract/assembled_transaction.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AssembledTransaction:()=>p});var n=r("./node_modules/@stellar/stellar-base/lib/index.js"),o=r("./src/rpc/index.ts"),s=r("./src/rpc/api.ts"),i=r("./src/rpc/transaction.ts"),a=r("./src/contract/rust_result.ts"),u=r("./src/contract/utils.ts"),l=r("./src/contract/types.ts"),c=r("./src/contract/sent_transaction.ts"),d=r("./node_modules/buffer/index.js").Buffer;class p{static Errors={ExpiredState:class extends Error{},RestorationFailure:class extends Error{},NeedsMoreSignatures:class extends Error{},NoSignatureNeeded:class extends Error{},NoUnsignedNonInvokerAuthEntries:class extends Error{},NoSigner:class extends Error{},NotYetSimulated:class extends Error{},FakeAccount:class extends Error{},SimulationFailed:class extends Error{},InternalWalletError:class extends Error{},ExternalServiceError:class extends Error{},InvalidClientRequest:class extends Error{},UserRejected:class extends Error{}};toJSON(){return JSON.stringify({method:this.options.method,tx:this.built?.toXDR(),simulationResult:{auth:this.simulationData.result.auth.map((e=>e.toXDR("base64"))),retval:this.simulationData.result.retval.toXDR("base64")},simulationTransactionData:this.simulationData.transactionData.toXDR("base64")})}static fromJSON(e,{tx:t,simulationResult:r,simulationTransactionData:o}){const s=new p(e);return s.built=n.TransactionBuilder.fromXDR(t,e.networkPassphrase),s.simulationResult={auth:r.auth.map((e=>n.xdr.SorobanAuthorizationEntry.fromXDR(e,"base64"))),retval:n.xdr.ScVal.fromXDR(r.retval,"base64")},s.simulationTransactionData=n.xdr.SorobanTransactionData.fromXDR(o,"base64"),s}toXDR(){if(!this.built)throw new Error("Transaction has not yet been simulated; call `AssembledTransaction.simulate` first.");return this.built?.toEnvelope().toXDR("base64")}static fromXDR(e,t,r){const o=n.xdr.TransactionEnvelope.fromXDR(t,"base64"),s=n.TransactionBuilder.fromXDR(o,e.networkPassphrase),i=s.operations[0];if(!i?.func?.value||"function"!=typeof i.func.value)throw new Error("Could not extract the method from the transaction envelope.");const a=i.func.value();if(!a?.functionName)throw new Error("Could not extract the method name from the transaction envelope.");const u=a.functionName().toString("utf-8"),l=new p({...e,method:u,parseResultXdr:e=>r.funcResToNative(u,e)});return l.built=s,l}handleWalletError(e){if(!e)return;const{message:t,code:r}=e,n=`${t}${e.ext?` (${e.ext.join(", ")})`:""}`;switch(r){case-1:throw new p.Errors.InternalWalletError(n);case-2:throw new p.Errors.ExternalServiceError(n);case-3:throw new p.Errors.InvalidClientRequest(n);case-4:throw new p.Errors.UserRejected(n);default:throw new Error(`Unhandled error: ${n}`)}}constructor(e){this.options=e,this.options.simulate=this.options.simulate??!0,this.server=new o.Server(this.options.rpcUrl,{allowHttp:this.options.allowHttp??!1})}static build(e){const t=new n.Contract(e.contractId);return p.buildWithOp(t.call(e.method,...e.args??[]),e)}static async buildWithOp(e,t){const r=new p(t),o=await(0,u.getAccount)(t,r.server);return r.raw=new n.TransactionBuilder(o,{fee:t.fee??n.BASE_FEE,networkPassphrase:t.networkPassphrase}).setTimeout(t.timeoutInSeconds??l.DEFAULT_TIMEOUT).addOperation(e),t.simulate&&await r.simulate(),r}static async buildFootprintRestoreTransaction(e,t,r,o){const s=new p(e);return s.raw=new n.TransactionBuilder(r,{fee:o,networkPassphrase:e.networkPassphrase}).setSorobanData(t instanceof n.SorobanDataBuilder?t.build():t).addOperation(n.Operation.restoreFootprint({})).setTimeout(e.timeoutInSeconds??l.DEFAULT_TIMEOUT),await s.simulate({restore:!1}),s}simulate=async({restore:e}={})=>{if(!this.built){if(!this.raw)throw new Error("Transaction has not yet been assembled; call `AssembledTransaction.build` first.");this.built=this.raw.build()}if(e=e??this.options.restore,delete this.simulationResult,delete this.simulationTransactionData,this.simulation=await this.server.simulateTransaction(this.built),e&&s.Api.isSimulationRestore(this.simulation)){const e=await(0,u.getAccount)(this.options,this.server),t=await this.restoreFootprint(this.simulation.restorePreamble,e);if(t.status===s.Api.GetTransactionStatus.SUCCESS){const t=new n.Contract(this.options.contractId);return this.raw=new n.TransactionBuilder(e,{fee:this.options.fee??n.BASE_FEE,networkPassphrase:this.options.networkPassphrase}).addOperation(t.call(this.options.method,...this.options.args??[])).setTimeout(this.options.timeoutInSeconds??l.DEFAULT_TIMEOUT),await this.simulate(),this}throw new p.Errors.RestorationFailure(`Automatic restore failed! You set 'restore: true' but the attempted restore did not work. Result:\n${JSON.stringify(t)}`)}return s.Api.isSimulationSuccess(this.simulation)&&(this.built=(0,i.assembleTransaction)(this.built,this.simulation).build()),this};get simulationData(){if(this.simulationResult&&this.simulationTransactionData)return{result:this.simulationResult,transactionData:this.simulationTransactionData};const e=this.simulation;if(!e)throw new p.Errors.NotYetSimulated("Transaction has not yet been simulated");if(s.Api.isSimulationError(e))throw new p.Errors.SimulationFailed(`Transaction simulation failed: "${e.error}"`);if(s.Api.isSimulationRestore(e))throw new p.Errors.ExpiredState("You need to restore some contract state before you can invoke this method.\nYou can set `restore` to true in the method options in order to automatically restore the contract state when needed.");return this.simulationResult=e.result??{auth:[],retval:n.xdr.ScVal.scvVoid()},this.simulationTransactionData=e.transactionData.build(),{result:this.simulationResult,transactionData:this.simulationTransactionData}}get result(){try{if(!this.simulationData.result)throw new Error("No simulation result!");return this.options.parseResultXdr(this.simulationData.result.retval)}catch(e){if(!(0,u.implementsToString)(e))throw e;const t=this.parseError(e.toString());if(t)return t;throw e}}parseError(e){if(!this.options.errorTypes)return;const t=e.match(u.contractErrorPattern);if(!t)return;const r=parseInt(t[1],10),n=this.options.errorTypes[r];return n?new a.Err(n):void 0}sign=async({force:e=!1,signTransaction:t=this.options.signTransaction}={})=>{if(!this.built)throw new Error("Transaction has not yet been simulated");if(!e&&this.isReadCall)throw new p.Errors.NoSignatureNeeded("This is a read call. It requires no signature or sending. Use `force: true` to sign and send anyway.");if(!t)throw new p.Errors.NoSigner("You must provide a signTransaction function, either when calling `signAndSend` or when initializing your Client");const r=this.needsNonInvokerSigningBy().filter((e=>!e.startsWith("C")));if(r.length)throw new p.Errors.NeedsMoreSignatures(`Transaction requires signatures from ${r}. See \`needsNonInvokerSigningBy\` for details.`);const o=this.options.timeoutInSeconds??l.DEFAULT_TIMEOUT;this.built=n.TransactionBuilder.cloneFrom(this.built,{fee:this.built.fee,timebounds:void 0,sorobanData:this.simulationData.transactionData}).setTimeout(o).build();const s={networkPassphrase:this.options.networkPassphrase};this.options.address&&(s.address=this.options.address),void 0!==this.options.submit&&(s.submit=this.options.submit),this.options.submitUrl&&(s.submitUrl=this.options.submitUrl);const{signedTxXdr:i,error:a}=await t(this.built.toXDR(),s);this.handleWalletError(a),this.signed=n.TransactionBuilder.fromXDR(i,this.options.networkPassphrase)};async send(){if(!this.signed)throw new Error("The transaction has not yet been signed. Run `sign` first, or use `signAndSend` instead.");return await c.SentTransaction.init(this)}signAndSend=async({force:e=!1,signTransaction:t=this.options.signTransaction}={})=>{if(!this.signed){const r=this.options.submit;this.options.submit&&(this.options.submit=!1);try{await this.sign({force:e,signTransaction:t})}finally{this.options.submit=r}}return this.send()};needsNonInvokerSigningBy=({includeAlreadySigned:e=!1}={})=>{if(!this.built)throw new Error("Transaction has not yet been simulated");if(!("operations"in this.built))throw new Error(`Unexpected Transaction type; no operations: ${JSON.stringify(this.built)}`);const t=this.built.operations[0];return[...new Set((t.auth??[]).filter((t=>t.credentials().switch()===n.xdr.SorobanCredentialsType.sorobanCredentialsAddress()&&(e||"scvVoid"===t.credentials().address().signature().switch().name))).map((e=>n.Address.fromScAddress(e.credentials().address().address()).toString())))]};signAuthEntries=async({expiration:e=(async()=>(await this.server.getLatestLedger()).sequence+100)(),signAuthEntry:t=this.options.signAuthEntry,address:r=this.options.publicKey,authorizeEntry:o=n.authorizeEntry}={})=>{if(!this.built)throw new Error("Transaction has not yet been assembled or simulated");if(o===n.authorizeEntry){const e=this.needsNonInvokerSigningBy();if(0===e.length)throw new p.Errors.NoUnsignedNonInvokerAuthEntries("No unsigned non-invoker auth entries; maybe you already signed?");if(-1===e.indexOf(r??""))throw new p.Errors.NoSignatureNeeded(`No auth entries for public key "${r}"`);if(!t)throw new p.Errors.NoSigner("You must provide `signAuthEntry` or a custom `authorizeEntry`")}const s=this.built.operations[0].auth??[];for(const[i,a]of s.entries()){const u=n.xdr.SorobanCredentials.fromXDR(a.credentials().toXDR());if(u.switch()!==n.xdr.SorobanCredentialsType.sorobanCredentialsAddress())continue;if(n.Address.fromScAddress(u.address().address()).toString()!==r)continue;const l=t??Promise.resolve;s[i]=await o(a,(async e=>{const{signedAuthEntry:t,error:n}=await l(e.toXDR("base64"),{address:r});return this.handleWalletError(n),d.from(t,"base64")}),await e,this.options.networkPassphrase)}};get isReadCall(){const e=this.simulationData.result.auth.length,t=this.simulationData.transactionData.resources().footprint().readWrite().length;return 0===e&&0===t}async restoreFootprint(e,t){if(!this.options.signTransaction)throw new Error("For automatic restore to work you must provide a signTransaction function when initializing your Client");t=t??await(0,u.getAccount)(this.options,this.server);const r=await p.buildFootprintRestoreTransaction({...this.options},e.transactionData,t,e.minResourceFee),n=await r.signAndSend();if(!n.getTransactionResponse)throw new p.Errors.RestorationFailure(`The attempt at automatic restore failed. \n${JSON.stringify(n)}`);return n.getTransactionResponse}}},"./src/contract/basic_node_signer.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{basicNodeSigner:()=>s});var n=r("./node_modules/@stellar/stellar-base/lib/index.js"),o=r("./node_modules/buffer/index.js").Buffer;const s=(e,t)=>({signTransaction:async(r,o)=>{const s=n.TransactionBuilder.fromXDR(r,o?.networkPassphrase||t);return s.sign(e),{signedTxXdr:s.toXDR(),signerAddress:e.publicKey()}},signAuthEntry:async t=>({signedAuthEntry:e.sign((0,n.hash)(o.from(t,"base64"))).toString("base64"),signerAddress:e.publicKey()})})},"./src/contract/client.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Client:()=>d});var n=r("./node_modules/@stellar/stellar-base/lib/index.js"),o=r("./src/contract/spec.ts"),s=r("./src/rpc/index.ts"),i=r("./src/contract/assembled_transaction.ts"),a=r("./src/contract/utils.ts"),u=r("./node_modules/buffer/index.js").Buffer;const l="__constructor";async function c(e){const t=await WebAssembly.compile(e),r=WebAssembly.Module.customSections(t,"contractspecv0");if(0===r.length)throw new Error("Could not obtain contract spec from wasm");const n=u.from(r[0]),s=(0,a.processSpecEntryStream)(n);return new o.Spec(s)}class d{static async deploy(e,t){const{wasmHash:r,salt:o,format:a,fee:p,timeoutInSeconds:f,simulate:h,...y}=t,m=await async function(e,t,r="hex"){if(!t||!t.rpcUrl)throw new TypeError("options must contain rpcUrl");const{rpcUrl:n,allowHttp:o}=t,i={allowHttp:o},a=new s.Server(n,i);return c(await a.getContractWasmByHash(e,r))}(r,y,a),g=n.Operation.createCustomContract({address:new n.Address(t.publicKey),wasmHash:"string"==typeof r?u.from(r,a??"hex"):r,salt:o,constructorArgs:e?m.funcArgsToScVals(l,e):[]});return i.AssembledTransaction.buildWithOp(g,{fee:p,timeoutInSeconds:f,simulate:h,...y,contractId:"ignored",method:l,parseResultXdr:e=>new d(m,{...y,contractId:n.Address.fromScVal(e).toString()})})}constructor(e,t){this.spec=e,this.options=t,this.spec.funcs().forEach((r=>{const n=r.name().toString();if(n===l)return;const o=(r,o)=>i.AssembledTransaction.build({method:n,args:r&&e.funcArgsToScVals(n,r),...t,...o,errorTypes:e.errorCases().reduce(((e,t)=>({...e,[t.value()]:{message:t.doc().toString()}})),{}),parseResultXdr:t=>e.funcResToNative(n,t)});this[n]=0===e.getFunc(n).inputs().length?e=>o(void 0,e):o}))}static async fromWasmHash(e,t,r="hex"){if(!t||!t.rpcUrl)throw new TypeError("options must contain rpcUrl");const{rpcUrl:n,allowHttp:o}=t,i={allowHttp:o},a=new s.Server(n,i),u=await a.getContractWasmByHash(e,r);return d.fromWasm(u,t)}static async fromWasm(e,t){const r=await c(e);return new d(r,t)}static async from(e){if(!e||!e.rpcUrl||!e.contractId)throw new TypeError("options must contain rpcUrl and contractId");const{rpcUrl:t,contractId:r,allowHttp:n}=e,o={allowHttp:n},i=new s.Server(t,o),a=await i.getContractWasmByContractId(r);return d.fromWasm(a,e)}txFromJSON=e=>{const{method:t,...r}=JSON.parse(e);return i.AssembledTransaction.fromJSON({...this.options,method:t,parseResultXdr:e=>this.spec.funcResToNative(t,e)},r)};txFromXDR=e=>i.AssembledTransaction.fromXDR(this.options,e,this.spec)}},"./src/contract/index.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AssembledTransaction:()=>n.AssembledTransaction,Client:()=>s.Client,DEFAULT_TIMEOUT:()=>l.DEFAULT_TIMEOUT,Err:()=>i.Err,NULL_ACCOUNT:()=>l.NULL_ACCOUNT,Ok:()=>i.Ok,SentTransaction:()=>a.SentTransaction,Spec:()=>u.Spec,basicNodeSigner:()=>o.basicNodeSigner});var n=r("./src/contract/assembled_transaction.ts"),o=r("./src/contract/basic_node_signer.ts"),s=r("./src/contract/client.ts"),i=r("./src/contract/rust_result.ts"),a=r("./src/contract/sent_transaction.ts"),u=r("./src/contract/spec.ts"),l=r("./src/contract/types.ts")},"./src/contract/rust_result.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Err:()=>o,Ok:()=>n});class n{constructor(e){this.value=e}unwrapErr(){throw new Error("No error")}unwrap(){return this.value}isOk(){return!0}isErr(){return!1}}class o{constructor(e){this.error=e}unwrapErr(){return this.error}unwrap(){throw new Error(this.error.message)}isOk(){return!1}isErr(){return!0}}},"./src/contract/sent_transaction.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{SentTransaction:()=>a});var n=r("./src/rpc/index.ts"),o=r("./src/rpc/api.ts"),s=r("./src/contract/utils.ts"),i=r("./src/contract/types.ts");class a{static Errors={SendFailed:class extends Error{},SendResultOnly:class extends Error{},TransactionStillPending:class extends Error{}};constructor(e){this.assembled=e,this.server=new n.Server(this.assembled.options.rpcUrl,{allowHttp:this.assembled.options.allowHttp??!1})}static init=async e=>{const t=new a(e);return await t.send()};send=async()=>{if(this.sendTransactionResponse=await this.server.sendTransaction(this.assembled.signed),"PENDING"!==this.sendTransactionResponse.status)throw new a.Errors.SendFailed(`Sending the transaction to the network failed!\n${JSON.stringify(this.sendTransactionResponse,null,2)}`);const{hash:e}=this.sendTransactionResponse,t=this.assembled.options.timeoutInSeconds??i.DEFAULT_TIMEOUT;if(this.getTransactionResponseAll=await(0,s.withExponentialBackoff)((()=>this.server.getTransaction(e)),(e=>e.status===o.Api.GetTransactionStatus.NOT_FOUND),t),this.getTransactionResponse=this.getTransactionResponseAll[this.getTransactionResponseAll.length-1],this.getTransactionResponse.status===o.Api.GetTransactionStatus.NOT_FOUND)throw new a.Errors.TransactionStillPending(`Waited ${t} seconds for transaction to complete, but it did not. Returning anyway. Check the transaction status manually. Sent transaction: ${JSON.stringify(this.sendTransactionResponse,null,2)}\nAll attempts to get the result: ${JSON.stringify(this.getTransactionResponseAll,null,2)}`);return this};get result(){if("getTransactionResponse"in this&&this.getTransactionResponse){if("returnValue"in this.getTransactionResponse)return this.assembled.options.parseResultXdr(this.getTransactionResponse.returnValue);throw new Error("Transaction failed! Cannot parse result.")}if(this.sendTransactionResponse){const e=this.sendTransactionResponse.errorResult?.result();if(e)throw new a.Errors.SendFailed(`Transaction simulation looked correct, but attempting to send the transaction failed. Check \`simulation\` and \`sendTransactionResponseAll\` to troubleshoot. Decoded \`sendTransactionResponse.errorResultXdr\`: ${e}`);throw new a.Errors.SendResultOnly("Transaction was sent to the network, but not yet awaited. No result to show. Await transaction completion with `getTransaction(sendTransactionResponse.hash)`")}throw new Error(`Sending transaction failed: ${JSON.stringify(this.assembled.signed)}`)}}},"./src/contract/spec.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Spec:()=>c});var n=r("./node_modules/@stellar/stellar-base/lib/index.js"),o=r("./src/contract/rust_result.ts"),s=r("./node_modules/buffer/index.js").Buffer;function i(e){return/^\d+$/.test(e.name().toString())}const a={U32:{type:"integer",minimum:0,maximum:4294967295},I32:{type:"integer",minimum:-2147483648,maximum:2147483647},U64:{type:"string",pattern:"^([1-9][0-9]*|0)$",minLength:1,maxLength:20},I64:{type:"string",pattern:"^(-?[1-9][0-9]*|0)$",minLength:1,maxLength:21},U128:{type:"string",pattern:"^([1-9][0-9]*|0)$",minLength:1,maxLength:39},I128:{type:"string",pattern:"^(-?[1-9][0-9]*|0)$",minLength:1,maxLength:40},U256:{type:"string",pattern:"^([1-9][0-9]*|0)$",minLength:1,maxLength:78},I256:{type:"string",pattern:"^(-?[1-9][0-9]*|0)$",minLength:1,maxLength:79},Address:{type:"string",format:"address",description:"Address can be a public key or contract id"},ScString:{type:"string",description:"ScString is a string"},ScSymbol:{type:"string",description:"ScString is a string"},DataUrl:{type:"string",pattern:"^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"}};function u(e){let t;switch(e.switch().value){case n.xdr.ScSpecType.scSpecTypeVal().value:t="Val";break;case n.xdr.ScSpecType.scSpecTypeBool().value:return{type:"boolean"};case n.xdr.ScSpecType.scSpecTypeVoid().value:return{type:"null"};case n.xdr.ScSpecType.scSpecTypeError().value:t="Error";break;case n.xdr.ScSpecType.scSpecTypeU32().value:t="U32";break;case n.xdr.ScSpecType.scSpecTypeI32().value:t="I32";break;case n.xdr.ScSpecType.scSpecTypeU64().value:t="U64";break;case n.xdr.ScSpecType.scSpecTypeI64().value:t="I64";break;case n.xdr.ScSpecType.scSpecTypeTimepoint().value:throw new Error("Timepoint type not supported");case n.xdr.ScSpecType.scSpecTypeDuration().value:throw new Error("Duration not supported");case n.xdr.ScSpecType.scSpecTypeU128().value:t="U128";break;case n.xdr.ScSpecType.scSpecTypeI128().value:t="I128";break;case n.xdr.ScSpecType.scSpecTypeU256().value:t="U256";break;case n.xdr.ScSpecType.scSpecTypeI256().value:t="I256";break;case n.xdr.ScSpecType.scSpecTypeBytes().value:t="DataUrl";break;case n.xdr.ScSpecType.scSpecTypeString().value:t="ScString";break;case n.xdr.ScSpecType.scSpecTypeSymbol().value:t="ScSymbol";break;case n.xdr.ScSpecType.scSpecTypeAddress().value:t="Address";break;case n.xdr.ScSpecType.scSpecTypeOption().value:return u(e.option().valueType());case n.xdr.ScSpecType.scSpecTypeResult().value:break;case n.xdr.ScSpecType.scSpecTypeVec().value:return{type:"array",items:u(e.vec().elementType())};case n.xdr.ScSpecType.scSpecTypeMap().value:{const t=e.map();return{type:"array",items:{type:"array",items:[u(t.keyType()),u(t.valueType())],minItems:2,maxItems:2}}}case n.xdr.ScSpecType.scSpecTypeTuple().value:{const t=e.tuple(),r=t.valueTypes().length,n=r;return{type:"array",items:t.valueTypes().map(u),minItems:r,maxItems:n}}case n.xdr.ScSpecType.scSpecTypeBytesN().value:return{$ref:"#/definitions/DataUrl",maxLength:e.bytesN().n()};case n.xdr.ScSpecType.scSpecTypeUdt().value:t=e.udt().name().toString();break}return{$ref:`#/definitions/${t}`}}function l(e){const t={},r=[];e.forEach((e=>{const o=e.type(),s=e.name().toString();t[s]=u(o),o.switch().value!==n.xdr.ScSpecType.scSpecTypeOption().value&&r.push(s)}));const o={properties:t};return r.length>0&&(o.required=r),o}class c{entries=[];constructor(e){if(0===e.length)throw new Error("Contract spec must have at least one entry");const t=e[0];this.entries="string"==typeof t?e.map((e=>n.xdr.ScSpecEntry.fromXDR(e,"base64"))):e}funcs(){return this.entries.filter((e=>e.switch().value===n.xdr.ScSpecEntryKind.scSpecEntryFunctionV0().value)).map((e=>e.functionV0()))}getFunc(e){const t=this.findEntry(e);if(t.switch().value!==n.xdr.ScSpecEntryKind.scSpecEntryFunctionV0().value)throw new Error(`${e} is not a function`);return t.functionV0()}funcArgsToScVals(e,t){return this.getFunc(e).inputs().map((e=>this.nativeToScVal(function(e,t){const r=t.name().toString(),n=Object.entries(e).find((([e])=>e===r));if(!n)throw new Error(`Missing field ${r}`);return n[1]}(t,e),e.type())))}funcResToNative(e,t){const r="string"==typeof t?n.xdr.ScVal.fromXDR(t,"base64"):t,s=this.getFunc(e).outputs();if(0===s.length){const e=r.switch();if(e.value!==n.xdr.ScValType.scvVoid().value)throw new Error(`Expected void, got ${e.name}`);return null}if(s.length>1)throw new Error("Multiple outputs not supported");const i=s[0];return i.switch().value===n.xdr.ScSpecType.scSpecTypeResult().value?new o.Ok(this.scValToNative(r,i.result().okType())):this.scValToNative(r,i)}findEntry(e){const t=this.entries.find((t=>t.value().name().toString()===e));if(!t)throw new Error(`no such entry: ${e}`);return t}nativeToScVal(e,t){const r=t.switch(),o=r.value;if(r.value===n.xdr.ScSpecType.scSpecTypeUdt().value){const r=t.udt();return this.nativeToUdt(e,r.name().toString())}if(o===n.xdr.ScSpecType.scSpecTypeOption().value){const r=t.option();return void 0===e?n.xdr.ScVal.scvVoid():this.nativeToScVal(e,r.valueType())}switch(typeof e){case"object":if(null===e){if(o===n.xdr.ScSpecType.scSpecTypeVoid().value)return n.xdr.ScVal.scvVoid();throw new TypeError(`Type ${t} was not void, but value was null`)}if(e instanceof n.xdr.ScVal)return e;if(e instanceof n.Address){if(t.switch().value!==n.xdr.ScSpecType.scSpecTypeAddress().value)throw new TypeError(`Type ${t} was not address, but value was Address`);return e.toScVal()}if(e instanceof n.Contract){if(t.switch().value!==n.xdr.ScSpecType.scSpecTypeAddress().value)throw new TypeError(`Type ${t} was not address, but value was Address`);return e.address().toScVal()}if(e instanceof Uint8Array||s.isBuffer(e)){const r=Uint8Array.from(e);switch(o){case n.xdr.ScSpecType.scSpecTypeBytesN().value:{const e=t.bytesN();if(r.length!==e.n())throw new TypeError(`expected ${e.n()} bytes, but got ${r.length}`);return n.xdr.ScVal.scvBytes(r)}case n.xdr.ScSpecType.scSpecTypeBytes().value:return n.xdr.ScVal.scvBytes(r);default:throw new TypeError(`invalid type (${t}) specified for Bytes and BytesN`)}}if(Array.isArray(e))switch(o){case n.xdr.ScSpecType.scSpecTypeVec().value:{const r=t.vec().elementType();return n.xdr.ScVal.scvVec(e.map((e=>this.nativeToScVal(e,r))))}case n.xdr.ScSpecType.scSpecTypeTuple().value:{const r=t.tuple().valueTypes();if(e.length!==r.length)throw new TypeError(`Tuple expects ${r.length} values, but ${e.length} were provided`);return n.xdr.ScVal.scvVec(e.map(((e,t)=>this.nativeToScVal(e,r[t]))))}case n.xdr.ScSpecType.scSpecTypeMap().value:{const r=t.map(),o=r.keyType(),s=r.valueType();return n.xdr.ScVal.scvMap(e.map((e=>{const t=this.nativeToScVal(e[0],o),r=this.nativeToScVal(e[1],s);return new n.xdr.ScMapEntry({key:t,val:r})})))}default:throw new TypeError(`Type ${t} was not vec, but value was Array`)}if(e.constructor===Map){if(o!==n.xdr.ScSpecType.scSpecTypeMap().value)throw new TypeError(`Type ${t} was not map, but value was Map`);const r=t.map(),s=[],i=e.entries();let a=i.next();for(;!a.done;){const[e,t]=a.value,o=this.nativeToScVal(e,r.keyType()),u=this.nativeToScVal(t,r.valueType());s.push(new n.xdr.ScMapEntry({key:o,val:u})),a=i.next()}return n.xdr.ScVal.scvMap(s)}if("Object"!==(e.constructor?.name??""))throw new TypeError(`cannot interpret ${e.constructor?.name} value as ScVal (${JSON.stringify(e)})`);throw new TypeError(`Received object ${e}  did not match the provided type ${t}`);case"number":case"bigint":switch(o){case n.xdr.ScSpecType.scSpecTypeU32().value:return n.xdr.ScVal.scvU32(e);case n.xdr.ScSpecType.scSpecTypeI32().value:return n.xdr.ScVal.scvI32(e);case n.xdr.ScSpecType.scSpecTypeU64().value:case n.xdr.ScSpecType.scSpecTypeI64().value:case n.xdr.ScSpecType.scSpecTypeU128().value:case n.xdr.ScSpecType.scSpecTypeI128().value:case n.xdr.ScSpecType.scSpecTypeU256().value:case n.xdr.ScSpecType.scSpecTypeI256().value:{const t=r.name.substring(10).toLowerCase();return new n.XdrLargeInt(t,e).toScVal()}default:throw new TypeError(`invalid type (${t}) specified for integer`)}case"string":return function(e,t){switch(t.value){case n.xdr.ScSpecType.scSpecTypeString().value:return n.xdr.ScVal.scvString(e);case n.xdr.ScSpecType.scSpecTypeSymbol().value:return n.xdr.ScVal.scvSymbol(e);case n.xdr.ScSpecType.scSpecTypeAddress().value:{const t=n.Address.fromString(e);return n.xdr.ScVal.scvAddress(t.toScAddress())}case n.xdr.ScSpecType.scSpecTypeU64().value:return new n.XdrLargeInt("u64",e).toScVal();case n.xdr.ScSpecType.scSpecTypeI64().value:return new n.XdrLargeInt("i64",e).toScVal();case n.xdr.ScSpecType.scSpecTypeU128().value:return new n.XdrLargeInt("u128",e).toScVal();case n.xdr.ScSpecType.scSpecTypeI128().value:return new n.XdrLargeInt("i128",e).toScVal();case n.xdr.ScSpecType.scSpecTypeU256().value:return new n.XdrLargeInt("u256",e).toScVal();case n.xdr.ScSpecType.scSpecTypeI256().value:return new n.XdrLargeInt("i256",e).toScVal();case n.xdr.ScSpecType.scSpecTypeBytes().value:case n.xdr.ScSpecType.scSpecTypeBytesN().value:return n.xdr.ScVal.scvBytes(s.from(e,"base64"));default:throw new TypeError(`invalid type ${t.name} specified for string value`)}}(e,r);case"boolean":if(o!==n.xdr.ScSpecType.scSpecTypeBool().value)throw TypeError(`Type ${t} was not bool, but value was bool`);return n.xdr.ScVal.scvBool(e);case"undefined":if(!t)return n.xdr.ScVal.scvVoid();switch(o){case n.xdr.ScSpecType.scSpecTypeVoid().value:case n.xdr.ScSpecType.scSpecTypeOption().value:return n.xdr.ScVal.scvVoid();default:throw new TypeError(`Type ${t} was not void, but value was undefined`)}case"function":return this.nativeToScVal(e(),t);default:throw new TypeError(`failed to convert typeof ${typeof e} (${e})`)}}nativeToUdt(e,t){const r=this.findEntry(t);switch(r.switch()){case n.xdr.ScSpecEntryKind.scSpecEntryUdtEnumV0():if("number"!=typeof e)throw new TypeError(`expected number for enum ${t}, but got ${typeof e}`);return this.nativeToEnum(e,r.udtEnumV0());case n.xdr.ScSpecEntryKind.scSpecEntryUdtStructV0():return this.nativeToStruct(e,r.udtStructV0());case n.xdr.ScSpecEntryKind.scSpecEntryUdtUnionV0():return this.nativeToUnion(e,r.udtUnionV0());default:throw new Error(`failed to parse udt ${t}`)}}nativeToUnion(e,t){const r=e.tag,o=t.cases().find((e=>e.value().name().toString()===r));if(!o)throw new TypeError(`no such enum entry: ${r} in ${t}`);const s=n.xdr.ScVal.scvSymbol(r);switch(o.switch()){case n.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseVoidV0():return n.xdr.ScVal.scvVec([s]);case n.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseTupleV0():{const r=o.tupleCase().type();if(Array.isArray(e.values)){if(e.values.length!==r.length)throw new TypeError(`union ${t} expects ${r.length} values, but got ${e.values.length}`);const o=e.values.map(((e,t)=>this.nativeToScVal(e,r[t])));return o.unshift(s),n.xdr.ScVal.scvVec(o)}throw new Error(`failed to parse union case ${o} with ${e}`)}default:throw new Error(`failed to parse union ${t} with ${e}`)}}nativeToStruct(e,t){const r=t.fields();if(r.some(i)){if(!r.every(i))throw new Error("mixed numeric and non-numeric field names are not allowed");return n.xdr.ScVal.scvVec(r.map(((t,n)=>this.nativeToScVal(e[n],r[n].type()))))}return n.xdr.ScVal.scvMap(r.map((t=>{const r=t.name().toString();return new n.xdr.ScMapEntry({key:this.nativeToScVal(r,n.xdr.ScSpecTypeDef.scSpecTypeSymbol()),val:this.nativeToScVal(e[r],t.type())})})))}nativeToEnum(e,t){if(t.cases().some((t=>t.value()===e)))return n.xdr.ScVal.scvU32(e);throw new TypeError(`no such enum entry: ${e} in ${t}`)}scValStrToNative(e,t){return this.scValToNative(n.xdr.ScVal.fromXDR(e,"base64"),t)}scValToNative(e,t){const r=t.switch(),o=r.value;if(o===n.xdr.ScSpecType.scSpecTypeUdt().value)return this.scValUdtToNative(e,t.udt());switch(e.switch().value){case n.xdr.ScValType.scvVoid().value:return;case n.xdr.ScValType.scvU64().value:case n.xdr.ScValType.scvI64().value:case n.xdr.ScValType.scvU128().value:case n.xdr.ScValType.scvI128().value:case n.xdr.ScValType.scvU256().value:case n.xdr.ScValType.scvI256().value:return(0,n.scValToBigInt)(e);case n.xdr.ScValType.scvVec().value:if(o===n.xdr.ScSpecType.scSpecTypeVec().value){const r=t.vec();return(e.vec()??[]).map((e=>this.scValToNative(e,r.elementType())))}if(o===n.xdr.ScSpecType.scSpecTypeTuple().value){const r=t.tuple().valueTypes();return(e.vec()??[]).map(((e,t)=>this.scValToNative(e,r[t])))}throw new TypeError(`Type ${t} was not vec, but ${e} is`);case n.xdr.ScValType.scvAddress().value:return n.Address.fromScVal(e).toString();case n.xdr.ScValType.scvMap().value:{const s=e.map()??[];if(o===n.xdr.ScSpecType.scSpecTypeMap().value){const e=t.map(),r=e.keyType(),n=e.valueType();return s.map((e=>[this.scValToNative(e.key(),r),this.scValToNative(e.val(),n)]))}throw new TypeError(`ScSpecType ${r.name} was not map, but ${JSON.stringify(e,null,2)} is`)}case n.xdr.ScValType.scvBool().value:case n.xdr.ScValType.scvU32().value:case n.xdr.ScValType.scvI32().value:case n.xdr.ScValType.scvBytes().value:return e.value();case n.xdr.ScValType.scvString().value:case n.xdr.ScValType.scvSymbol().value:if(o!==n.xdr.ScSpecType.scSpecTypeString().value&&o!==n.xdr.ScSpecType.scSpecTypeSymbol().value)throw new Error(`ScSpecType ${r.name} was not string or symbol, but ${JSON.stringify(e,null,2)} is`);return e.value()?.toString();case n.xdr.ScValType.scvTimepoint().value:case n.xdr.ScValType.scvDuration().value:return(0,n.scValToBigInt)(n.xdr.ScVal.scvU64(e.u64()));default:throw new TypeError(`failed to convert ${JSON.stringify(e,null,2)} to native type from type ${r.name}`)}}scValUdtToNative(e,t){const r=this.findEntry(t.name().toString());switch(r.switch()){case n.xdr.ScSpecEntryKind.scSpecEntryUdtEnumV0():return this.enumToNative(e);case n.xdr.ScSpecEntryKind.scSpecEntryUdtStructV0():return this.structToNative(e,r.udtStructV0());case n.xdr.ScSpecEntryKind.scSpecEntryUdtUnionV0():return this.unionToNative(e,r.udtUnionV0());default:throw new Error(`failed to parse udt ${t.name().toString()}: ${r}`)}}unionToNative(e,t){const r=e.vec();if(!r)throw new Error(`${JSON.stringify(e,null,2)} is not a vec`);if(0===r.length&&0!==t.cases.length)throw new Error(`${e} has length 0, but the there are at least one case in the union`);const o=r[0].sym().toString();if(r[0].switch().value!==n.xdr.ScValType.scvSymbol().value)throw new Error("{vec[0]} is not a symbol");const s=t.cases().find(function(e){return function(t){switch(t.switch().value){case n.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseTupleV0().value:return t.tupleCase().name().toString()===e;case n.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseVoidV0().value:return t.voidCase().name().toString()===e;default:return!1}}}(o));if(!s)throw new Error(`failed to find entry ${o} in union {udt.name().toString()}`);const i={tag:o};if(s.switch().value===n.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseTupleV0().value){const e=s.tupleCase().type().map(((e,t)=>this.scValToNative(r[t+1],e)));i.values=e}return i}structToNative(e,t){const r={},n=t.fields();if(n.some(i)){const t=e.vec()?.map(((e,t)=>this.scValToNative(e,n[t].type())));return t}return e.map()?.forEach(((e,t)=>{const o=n[t];r[o.name().toString()]=this.scValToNative(e.val(),o.type())})),r}enumToNative(e){if(e.switch().value!==n.xdr.ScValType.scvU32().value)throw new Error("Enum must have a u32 value");return e.u32()}errorCases(){return this.entries.filter((e=>e.switch().value===n.xdr.ScSpecEntryKind.scSpecEntryUdtErrorEnumV0().value)).flatMap((e=>e.value().cases()))}jsonSchema(e){const t={};this.entries.forEach((e=>{switch(e.switch().value){case n.xdr.ScSpecEntryKind.scSpecEntryUdtEnumV0().value:{const r=e.udtEnumV0();t[r.name().toString()]=function(e){const t=e.doc().toString(),r=e.cases(),n=[];r.forEach((e=>{const t=e.name().toString(),r=e.doc().toString();n.push({description:r,title:t,enum:[e.value()],type:"number"})}));const o={oneOf:n};return t.length>0&&(o.description=t),o}(r);break}case n.xdr.ScSpecEntryKind.scSpecEntryUdtStructV0().value:{const r=e.udtStructV0();t[r.name().toString()]=function(e){const t=e.fields();if(t.some(i)){if(!t.every(i))throw new Error("mixed numeric and non-numeric field names are not allowed");return{type:"array",items:t.map(((e,r)=>u(t[r].type()))),minItems:t.length,maxItems:t.length}}const r=e.doc().toString(),{properties:n,required:o}=l(t);return n.additionalProperties=!1,{description:r,properties:n,required:o,type:"object"}}(r);break}case n.xdr.ScSpecEntryKind.scSpecEntryUdtUnionV0().value:{const r=e.udtUnionV0();t[r.name().toString()]=function(e){const t=e.doc().toString(),r=e.cases(),o=[];r.forEach((e=>{switch(e.switch().value){case n.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseVoidV0().value:{const t=e.voidCase().name().toString();o.push({type:"object",title:t,properties:{tag:t},additionalProperties:!1,required:["tag"]});break}case n.xdr.ScSpecUdtUnionCaseV0Kind.scSpecUdtUnionCaseTupleV0().value:{const t=e.tupleCase(),r=t.name().toString();o.push({type:"object",title:r,properties:{tag:r,values:{type:"array",items:t.type().map(u)}},required:["tag","values"],additionalProperties:!1})}}}));const s={oneOf:o};return t.length>0&&(s.description=t),s}(r);break}case n.xdr.ScSpecEntryKind.scSpecEntryFunctionV0().value:{const r=e.functionV0(),o=r.name().toString(),{input:s}=function(e){const{properties:t,required:r}=l(e.inputs()),o={additionalProperties:!1,properties:t,type:"object"};r?.length>0&&(o.required=r);const s={properties:{args:o}},i=e.outputs(),a=i.length>0?u(i[0]):u(n.xdr.ScSpecTypeDef.scSpecTypeVoid()),c=e.doc().toString();return c.length>0&&(s.description=c),s.additionalProperties=!1,a.additionalProperties=!1,{input:s,output:a}}(r);t[o]=s;break}case n.xdr.ScSpecEntryKind.scSpecEntryUdtErrorEnumV0().value:}}));const r={$schema:"http://json-schema.org/draft-07/schema#",definitions:{...a,...t}};return e&&(r.$ref=`#/definitions/${e}`),r}}},"./src/contract/types.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{DEFAULT_TIMEOUT:()=>n,NULL_ACCOUNT:()=>o});r("./node_modules/@stellar/stellar-base/lib/index.js");const n=300,o="GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWHF"},"./src/contract/utils.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{contractErrorPattern:()=>i,getAccount:()=>l,implementsToString:()=>a,processSpecEntryStream:()=>u,withExponentialBackoff:()=>s});var n=r("./node_modules/@stellar/stellar-base/lib/index.js"),o=r("./src/contract/types.ts");async function s(e,t,r,n=1.5,o=!1){const s=[];let i=0;if(s.push(await e()),!t(s[s.length-1]))return s;const a=new Date(Date.now()+1e3*r).valueOf();let u=1e3,l=u;for(;Date.now()<a&&t(s[s.length-1]);)i+=1,o&&console.info(`Waiting ${u}ms before trying again (bringing the total wait time to ${l}ms so far, of total ${1e3*r}ms)`),await new Promise((e=>setTimeout(e,u))),u*=n,new Date(Date.now()+u).valueOf()>a&&(u=a-Date.now(),o&&console.info(`was gonna wait too long; new waitTime: ${u}ms`)),l=u+l,s.push(await e(s[s.length-1])),o&&t(s[s.length-1])&&console.info(`${i}. Called ${e}; ${s.length} prev attempts. Most recent: ${JSON.stringify(s[s.length-1],null,2)}`);return s}const i=/Error\(Contract, #(\d+)\)/;function a(e){return"object"==typeof e&&null!==e&&"toString"in e}function u(e){const t=new n.cereal.XdrReader(e),r=[];for(;!t.eof;)r.push(n.xdr.ScSpecEntry.read(t));return r}async function l(e,t){return e.publicKey?t.getAccount(e.publicKey):new n.Account(o.NULL_ACCOUNT,"0")}},"./src/errors/account_requires_memo.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AccountRequiresMemoError:()=>n});class n extends Error{constructor(e,t,r){const o=new.target.prototype;super(e),this.__proto__=o,this.constructor=n,this.name="AccountRequiresMemoError",this.accountId=t,this.operationIndex=r}}},"./src/errors/bad_request.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{BadRequestError:()=>o});var n=r("./src/errors/network.ts");class o extends n.NetworkError{constructor(e,t){const r=new.target.prototype;super(e,t),this.__proto__=r,this.constructor=o,this.name="BadRequestError"}}},"./src/errors/bad_response.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{BadResponseError:()=>o});var n=r("./src/errors/network.ts");class o extends n.NetworkError{constructor(e,t){const r=new.target.prototype;super(e,t),this.__proto__=r,this.constructor=o,this.name="BadResponseError"}}},"./src/errors/index.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AccountRequiresMemoError:()=>a.AccountRequiresMemoError,BadRequestError:()=>s.BadRequestError,BadResponseError:()=>i.BadResponseError,NetworkError:()=>n.NetworkError,NotFoundError:()=>o.NotFoundError});var n=r("./src/errors/network.ts"),o=r("./src/errors/not_found.ts"),s=r("./src/errors/bad_request.ts"),i=r("./src/errors/bad_response.ts"),a=r("./src/errors/account_requires_memo.ts")},"./src/errors/network.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{NetworkError:()=>n});class n extends Error{constructor(e,t){const r=new.target.prototype;super(e),this.__proto__=r,this.constructor=n,this.response=t}getResponse(){return this.response}}},"./src/errors/not_found.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{NotFoundError:()=>o});var n=r("./src/errors/network.ts");class o extends n.NetworkError{constructor(e,t){const r=new.target.prototype;super(e,t),this.__proto__=r,this.constructor=o,this.name="NotFoundError"}}},"./src/federation/api.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Api:()=>{}})},"./src/federation/index.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Api:()=>o.Api,FEDERATION_RESPONSE_MAX_SIZE:()=>n.FEDERATION_RESPONSE_MAX_SIZE,Server:()=>n.FederationServer});var n=r("./src/federation/server.ts"),o=r("./src/federation/api.ts")},"./src/federation/server.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{FEDERATION_RESPONSE_MAX_SIZE:()=>c,FederationServer:()=>d});var n=r("./node_modules/@stellar/stellar-base/lib/index.js"),o=r("./node_modules/urijs/src/URI.js"),s=r.n(o),i=r("./src/config.ts"),a=r("./src/errors/index.ts"),u=r("./src/stellartoml/index.ts"),l=r("./src/http-client/index.ts");const c=102400;class d{static async resolve(e,t={}){if(e.indexOf("*")<0)return n.StrKey.isValidEd25519PublicKey(e)?Promise.resolve({account_id:e}):Promise.reject(new Error("Invalid Account ID"));const r=e.split("*"),[,o]=r;if(2!==r.length||!o)return Promise.reject(new Error("Invalid Stellar address"));return(await d.createForDomain(o,t)).resolveAddress(e)}static async createForDomain(e,t={}){const r=await u.Resolver.resolve(e,t);return r.FEDERATION_SERVER?new d(r.FEDERATION_SERVER,e,t):Promise.reject(new Error("stellar.toml does not contain FEDERATION_SERVER field"))}constructor(e,t,r={}){this.serverURL=s()(e),this.domain=t;const n=void 0===r.allowHttp?i.Config.isAllowHttp():r.allowHttp;if(this.timeout=void 0===r.timeout?i.Config.getTimeout():r.timeout,"https"!==this.serverURL.protocol()&&!n)throw new Error("Cannot connect to insecure federation server")}async resolveAddress(e){let t=e;if(e.indexOf("*")<0){if(!this.domain)return Promise.reject(new Error("Unknown domain. Make sure `address` contains a domain (ex. `bob*stellar.org`) or pass `domain` parameter when instantiating the server object."));t=`${e}*${this.domain}`}const r=this.serverURL.query({type:"name",q:t});return this._sendRequest(r)}async resolveAccountId(e){const t=this.serverURL.query({type:"id",q:e});return this._sendRequest(t)}async resolveTransactionId(e){const t=this.serverURL.query({type:"txid",q:e});return this._sendRequest(t)}async _sendRequest(e){const t=this.timeout;return l.httpClient.get(e.toString(),{maxContentLength:c,timeout:t}).then((e=>{if(void 0!==e.data.memo&&"string"!=typeof e.data.memo)throw new Error("memo value should be of type string");return e.data})).catch((e=>{if(e instanceof Error){if(e.message.match(/^maxContentLength size/))throw new Error(`federation response exceeds allowed size of ${c}`);return Promise.reject(e)}return Promise.reject(new a.BadResponseError(`Server query failed. Server responded: ${e.status} ${e.statusText}`,e.data))}))}}},"./src/friendbot/index.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Api:()=>{}})},"./src/horizon/account_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AccountCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e),this.url.segment("accounts")}accountId(e){const t=new n.CallBuilder(this.url.clone());return t.filter.push([e]),t}forSigner(e){return this.url.setQuery("signer",e),this}forAsset(e){return this.url.setQuery("asset",`${e}`),this}sponsor(e){return this.url.setQuery("sponsor",e),this}forLiquidityPool(e){return this.url.setQuery("liquidity_pool",e),this}}},"./src/horizon/account_response.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AccountResponse:()=>o});var n=r("./node_modules/@stellar/stellar-base/lib/index.js");class o{constructor(e){this._baseAccount=new n.Account(e.account_id,e.sequence),Object.entries(e).forEach((([e,t])=>{this[e]=t}))}accountId(){return this._baseAccount.accountId()}sequenceNumber(){return this._baseAccount.sequenceNumber()}incrementSequenceNumber(){this._baseAccount.incrementSequenceNumber(),this.sequence=this._baseAccount.sequenceNumber()}}},"./src/horizon/assets_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AssetsCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e),this.url.segment("assets")}forCode(e){return this.url.setQuery("asset_code",e),this}forIssuer(e){return this.url.setQuery("asset_issuer",e),this}}},"./src/horizon/call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CallBuilder:()=>c});var n=r("./node_modules/urijs/src/URI.js"),o=r.n(n),s=r("./node_modules/urijs/src/URITemplate.js"),i=r.n(s),a=r("./src/errors/index.ts"),u=r("./src/horizon/horizon_axios_client.ts");const l=["transaction"];r.g;class c{constructor(e,t=""){this.url=e.clone(),this.filter=[],this.originalSegments=this.url.segment()||[],this.neighborRoot=t}call(){return this.checkFilter(),this._sendNormalRequest(this.url).then((e=>this._parseResponse(e)))}stream(e={}){throw new Error("Streaming requires eventsource to be enabled. If you need this functionality, compile with USE_EVENTSOURCE=true.")}cursor(e){return this.url.setQuery("cursor",e),this}limit(e){return this.url.setQuery("limit",e.toString()),this}order(e){return this.url.setQuery("order",e),this}join(e){return this.url.setQuery("join",e),this}forEndpoint(e,t){if(""===this.neighborRoot)throw new Error("Invalid usage: neighborRoot not set in constructor");return this.filter.push([e,t,this.neighborRoot]),this}checkFilter(){if(this.filter.length>=2)throw new a.BadRequestError("Too many filters specified",this.filter);if(1===this.filter.length){const e=this.originalSegments.concat(this.filter[0]);this.url.segment(e)}}_requestFnForLink(e){return async(t={})=>{let r;if(e.templated){const n=i()(e.href);r=o()(n.expand(t))}else r=o()(e.href);const n=await this._sendNormalRequest(r);return this._parseResponse(n)}}_parseRecord(e){return e._links?(Object.keys(e._links).forEach((t=>{const r=e._links[t];let n=!1;if(void 0!==e[t]&&(e[`${t}_attr`]=e[t],n=!0),n&&l.indexOf(t)>=0){const r=this._parseRecord(e[t]);e[t]=async()=>r}else e[t]=this._requestFnForLink(r)})),e):e}async _sendNormalRequest(e){let t=e;return""===t.authority()&&(t=t.authority(this.url.authority())),""===t.protocol()&&(t=t.protocol(this.url.protocol())),u.AxiosClient.get(t.toString()).then((e=>e.data)).catch(this._handleNetworkError)}_parseResponse(e){return e._embedded&&e._embedded.records?this._toCollectionPage(e):this._parseRecord(e)}_toCollectionPage(e){for(let t=0;t<e._embedded.records.length;t+=1)e._embedded.records[t]=this._parseRecord(e._embedded.records[t]);return{records:e._embedded.records,next:async()=>{const t=await this._sendNormalRequest(o()(e._links.next.href));return this._toCollectionPage(t)},prev:async()=>{const t=await this._sendNormalRequest(o()(e._links.prev.href));return this._toCollectionPage(t)}}}async _handleNetworkError(e){return e.response&&e.response.status?404===e.response.status?Promise.reject(new a.NotFoundError(e.response.statusText??"Not Found",e.response.data)):Promise.reject(new a.NetworkError(e.response.statusText??"Unknown",e.response.data)):Promise.reject(new Error(e.message))}}},"./src/horizon/claimable_balances_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ClaimableBalanceCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e),this.url.segment("claimable_balances")}claimableBalance(e){const t=new n.CallBuilder(this.url.clone());return t.filter.push([e]),t}sponsor(e){return this.url.setQuery("sponsor",e),this}claimant(e){return this.url.setQuery("claimant",e),this}asset(e){return this.url.setQuery("asset",e.toString()),this}}},"./src/horizon/effect_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{EffectCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e,"effects"),this.url.segment("effects")}forAccount(e){return this.forEndpoint("accounts",e)}forLedger(e){return this.forEndpoint("ledgers",e.toString())}forTransaction(e){return this.forEndpoint("transactions",e)}forOperation(e){return this.forEndpoint("operations",e)}forLiquidityPool(e){return this.forEndpoint("liquidity_pools",e)}}},"./src/horizon/friendbot_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{FriendbotBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e,t){super(e),this.url.segment("friendbot"),this.url.setQuery("addr",t)}}},"./src/horizon/horizon_api.ts":(e,t,r)=>{"use strict";let n;r.r(t),r.d(t,{HorizonApi:()=>n}),function(e){let t=function(e){return e.constantProduct="constant_product",e}({});e.LiquidityPoolType=t;let r=function(e){return e.createAccount="create_account",e.payment="payment",e.pathPayment="path_payment_strict_receive",e.createPassiveOffer="create_passive_sell_offer",e.manageOffer="manage_sell_offer",e.setOptions="set_options",e.changeTrust="change_trust",e.allowTrust="allow_trust",e.accountMerge="account_merge",e.inflation="inflation",e.manageData="manage_data",e.bumpSequence="bump_sequence",e.manageBuyOffer="manage_buy_offer",e.pathPaymentStrictSend="path_payment_strict_send",e.createClaimableBalance="create_claimable_balance",e.claimClaimableBalance="claim_claimable_balance",e.beginSponsoringFutureReserves="begin_sponsoring_future_reserves",e.endSponsoringFutureReserves="end_sponsoring_future_reserves",e.revokeSponsorship="revoke_sponsorship",e.clawback="clawback",e.clawbackClaimableBalance="clawback_claimable_balance",e.setTrustLineFlags="set_trust_line_flags",e.liquidityPoolDeposit="liquidity_pool_deposit",e.liquidityPoolWithdraw="liquidity_pool_withdraw",e.invokeHostFunction="invoke_host_function",e.bumpFootprintExpiration="bump_footprint_expiration",e.restoreFootprint="restore_footprint",e}({});e.OperationResponseType=r;let n=function(e){return e[e.createAccount=0]="createAccount",e[e.payment=1]="payment",e[e.pathPayment=2]="pathPayment",e[e.createPassiveOffer=3]="createPassiveOffer",e[e.manageOffer=4]="manageOffer",e[e.setOptions=5]="setOptions",e[e.changeTrust=6]="changeTrust",e[e.allowTrust=7]="allowTrust",e[e.accountMerge=8]="accountMerge",e[e.inflation=9]="inflation",e[e.manageData=10]="manageData",e[e.bumpSequence=11]="bumpSequence",e[e.manageBuyOffer=12]="manageBuyOffer",e[e.pathPaymentStrictSend=13]="pathPaymentStrictSend",e[e.createClaimableBalance=14]="createClaimableBalance",e[e.claimClaimableBalance=15]="claimClaimableBalance",e[e.beginSponsoringFutureReserves=16]="beginSponsoringFutureReserves",e[e.endSponsoringFutureReserves=17]="endSponsoringFutureReserves",e[e.revokeSponsorship=18]="revokeSponsorship",e[e.clawback=19]="clawback",e[e.clawbackClaimableBalance=20]="clawbackClaimableBalance",e[e.setTrustLineFlags=21]="setTrustLineFlags",e[e.liquidityPoolDeposit=22]="liquidityPoolDeposit",e[e.liquidityPoolWithdraw=23]="liquidityPoolWithdraw",e[e.invokeHostFunction=24]="invokeHostFunction",e[e.bumpFootprintExpiration=25]="bumpFootprintExpiration",e[e.restoreFootprint=26]="restoreFootprint",e}({});e.OperationResponseTypeI=n;let o=function(e){return e.TX_FAILED="tx_failed",e.TX_BAD_SEQ="tx_bad_seq",e.TX_BAD_AUTH="tx_bad_auth",e.TX_BAD_AUTH_EXTRA="tx_bad_auth_extra",e.TX_FEE_BUMP_INNER_SUCCESS="tx_fee_bump_inner_success",e.TX_FEE_BUMP_INNER_FAILED="tx_fee_bump_inner_failed",e.TX_NOT_SUPPORTED="tx_not_supported",e.TX_SUCCESS="tx_success",e.TX_TOO_EARLY="tx_too_early",e.TX_TOO_LATE="tx_too_late",e.TX_MISSING_OPERATION="tx_missing_operation",e.TX_INSUFFICIENT_BALANCE="tx_insufficient_balance",e.TX_NO_SOURCE_ACCOUNT="tx_no_source_account",e.TX_INSUFFICIENT_FEE="tx_insufficient_fee",e.TX_INTERNAL_ERROR="tx_internal_error",e}({});e.TransactionFailedResultCodes=o}(n||(n={}))},"./src/horizon/horizon_axios_client.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AxiosClient:()=>u,SERVER_TIME_MAP:()=>a,default:()=>c,getCurrentServerTime:()=>d,version:()=>i});var n=r("./node_modules/urijs/src/URI.js"),o=r.n(n),s=r("./src/http-client/index.ts");const i="13.1.0",a={},u=(0,s.create)({headers:{"X-Client-Name":"js-stellar-sdk","X-Client-Version":i}});function l(e){return Math.floor(e/1e3)}u.interceptors.response.use((e=>{const t=o()(e.config.url).hostname();let r=0;if(e.headers instanceof Headers){const t=e.headers.get("date");t&&(r=l(Date.parse(t)))}else if("object"==typeof e.headers&&"date"in e.headers){const t=e.headers;"string"==typeof t.date&&(r=l(Date.parse(t.date)))}const n=l((new Date).getTime());return Number.isNaN(r)||(a[t]={serverTime:r,localTimeRecorded:n}),e}));const c=u;function d(e){const t=a[e];if(!t||!t.localTimeRecorded||!t.serverTime)return null;const{serverTime:r,localTimeRecorded:n}=t,o=l((new Date).getTime());return o-n>300?null:o-n+r}},"./src/horizon/index.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AccountResponse:()=>s.AccountResponse,AxiosClient:()=>a.default,HorizonApi:()=>n.HorizonApi,SERVER_TIME_MAP:()=>a.SERVER_TIME_MAP,Server:()=>i.HorizonServer,ServerApi:()=>o.ServerApi,default:()=>u,getCurrentServerTime:()=>a.getCurrentServerTime});var n=r("./src/horizon/horizon_api.ts"),o=r("./src/horizon/server_api.ts"),s=r("./src/horizon/account_response.ts"),i=r("./src/horizon/server.ts"),a=r("./src/horizon/horizon_axios_client.ts");const u=(e=r.hmd(e)).exports},"./src/horizon/ledger_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{LedgerCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e),this.url.segment("ledgers")}ledger(e){return this.filter.push(["ledgers",e.toString()]),this}}},"./src/horizon/liquidity_pool_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{LiquidityPoolCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e),this.url.segment("liquidity_pools")}forAssets(...e){const t=e.map((e=>e.toString())).join(",");return this.url.setQuery("reserves",t),this}forAccount(e){return this.url.setQuery("account",e),this}liquidityPoolId(e){if(!e.match(/[a-fA-F0-9]{64}/))throw new TypeError(`${e} does not look like a liquidity pool ID`);const t=new n.CallBuilder(this.url.clone());return t.filter.push([e.toLowerCase()]),t}}},"./src/horizon/offer_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{OfferCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e,"offers"),this.url.segment("offers")}offer(e){const t=new n.CallBuilder(this.url.clone());return t.filter.push([e]),t}forAccount(e){return this.forEndpoint("accounts",e)}buying(e){return e.isNative()?this.url.setQuery("buying_asset_type","native"):(this.url.setQuery("buying_asset_type",e.getAssetType()),this.url.setQuery("buying_asset_code",e.getCode()),this.url.setQuery("buying_asset_issuer",e.getIssuer())),this}selling(e){return e.isNative()?this.url.setQuery("selling_asset_type","native"):(this.url.setQuery("selling_asset_type",e.getAssetType()),this.url.setQuery("selling_asset_code",e.getCode()),this.url.setQuery("selling_asset_issuer",e.getIssuer())),this}sponsor(e){return this.url.setQuery("sponsor",e),this}seller(e){return this.url.setQuery("seller",e),this}}},"./src/horizon/operation_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{OperationCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e,"operations"),this.url.segment("operations")}operation(e){const t=new n.CallBuilder(this.url.clone());return t.filter.push([e]),t}forAccount(e){return this.forEndpoint("accounts",e)}forClaimableBalance(e){return this.forEndpoint("claimable_balances",e)}forLedger(e){return this.forEndpoint("ledgers",e.toString())}forTransaction(e){return this.forEndpoint("transactions",e)}forLiquidityPool(e){return this.forEndpoint("liquidity_pools",e)}includeFailed(e){return this.url.setQuery("include_failed",e.toString()),this}}},"./src/horizon/orderbook_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{OrderbookCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e,t,r){super(e),this.url.segment("order_book"),t.isNative()?this.url.setQuery("selling_asset_type","native"):(this.url.setQuery("selling_asset_type",t.getAssetType()),this.url.setQuery("selling_asset_code",t.getCode()),this.url.setQuery("selling_asset_issuer",t.getIssuer())),r.isNative()?this.url.setQuery("buying_asset_type","native"):(this.url.setQuery("buying_asset_type",r.getAssetType()),this.url.setQuery("buying_asset_code",r.getCode()),this.url.setQuery("buying_asset_issuer",r.getIssuer()))}}},"./src/horizon/payment_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{PaymentCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e,"payments"),this.url.segment("payments")}forAccount(e){return this.forEndpoint("accounts",e)}forLedger(e){return this.forEndpoint("ledgers",e.toString())}forTransaction(e){return this.forEndpoint("transactions",e)}}},"./src/horizon/server.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{HorizonServer:()=>C,SUBMIT_TRANSACTION_TIMEOUT:()=>P});var n=r("./node_modules/bignumber.js/bignumber.mjs"),o=r("./node_modules/@stellar/stellar-base/lib/index.js"),s=r("./node_modules/urijs/src/URI.js"),i=r.n(s),a=r("./src/horizon/call_builder.ts"),u=r("./src/config.ts"),l=r("./src/errors/index.ts"),c=r("./src/horizon/account_call_builder.ts"),d=r("./src/horizon/account_response.ts"),p=r("./src/horizon/assets_call_builder.ts"),f=r("./src/horizon/claimable_balances_call_builder.ts"),h=r("./src/horizon/effect_call_builder.ts"),y=r("./src/horizon/friendbot_builder.ts"),m=r("./src/horizon/ledger_call_builder.ts"),g=r("./src/horizon/liquidity_pool_call_builder.ts"),v=r("./src/horizon/offer_call_builder.ts"),b=r("./src/horizon/operation_call_builder.ts"),w=r("./src/horizon/orderbook_call_builder.ts"),S=r("./src/horizon/payment_call_builder.ts"),_=r("./src/horizon/strict_receive_path_call_builder.ts"),T=r("./src/horizon/strict_send_path_call_builder.ts"),E=r("./src/horizon/trade_aggregation_call_builder.ts"),k=r("./src/horizon/trades_call_builder.ts"),A=r("./src/horizon/transaction_call_builder.ts"),x=r("./src/horizon/horizon_axios_client.ts");const P=6e4;function O(e){return new n.default(e).div(1e7).toString()}class C{constructor(e,t={}){this.serverURL=i()(e);const r=void 0===t.allowHttp?u.Config.isAllowHttp():t.allowHttp,n={};if(t.appName&&(n["X-App-Name"]=t.appName),t.appVersion&&(n["X-App-Version"]=t.appVersion),t.authToken&&(n["X-Auth-Token"]=t.authToken),t.headers&&Object.assign(n,t.headers),Object.keys(n).length>0&&x.default.interceptors.request.use((e=>(e.headers=e.headers||{},e.headers=Object.assign(e.headers,n),e))),"https"!==this.serverURL.protocol()&&!r)throw new Error("Cannot connect to insecure horizon server")}async fetchTimebounds(e,t=!1){const r=(0,x.getCurrentServerTime)(this.serverURL.hostname());return r?{minTime:0,maxTime:r+e}:t?{minTime:0,maxTime:Math.floor((new Date).getTime()/1e3)+e}:(await x.default.get(i()(this.serverURL).toString()),this.fetchTimebounds(e,!0))}async fetchBaseFee(){const e=await this.feeStats();return parseInt(e.last_ledger_base_fee,10)||100}async feeStats(){const e=new a.CallBuilder(i()(this.serverURL));return e.filter.push(["fee_stats"]),e.call()}async root(){return new a.CallBuilder(i()(this.serverURL)).call()}async submitTransaction(e,t={skipMemoRequiredCheck:!1}){t.skipMemoRequiredCheck||await this.checkMemoRequired(e);const r=encodeURIComponent(e.toEnvelope().toXDR().toString("base64"));return x.default.post(i()(this.serverURL).segment("transactions").toString(),`tx=${r}`,{timeout:P}).then((e=>{if(!e.data.result_xdr)return e.data;const t=o.xdr.TransactionResult.fromXDR(e.data.result_xdr,"base64").result().value();let r,s;return t.length&&(r=t.map(((e,t)=>{if("manageBuyOffer"!==e.value().switch().name&&"manageSellOffer"!==e.value().switch().name)return null;s=!0;let r=new n.default(0),i=new n.default(0);const a=e.value().value().success(),u=a.offersClaimed().map((e=>{const t=e.value();let s="";switch(e.switch()){case o.xdr.ClaimAtomType.claimAtomTypeV0():s=o.StrKey.encodeEd25519PublicKey(t.sellerEd25519());break;case o.xdr.ClaimAtomType.claimAtomTypeOrderBook():s=o.StrKey.encodeEd25519PublicKey(t.sellerId().ed25519());break;default:throw new Error(`Invalid offer result type: ${e.switch()}`)}const a=new n.default(t.amountBought().toString()),u=new n.default(t.amountSold().toString());r=r.plus(u),i=i.plus(a);const l=o.Asset.fromOperation(t.assetSold()),c=o.Asset.fromOperation(t.assetBought()),d={type:l.getAssetType(),assetCode:l.getCode(),issuer:l.getIssuer()},p={type:c.getAssetType(),assetCode:c.getCode(),issuer:c.getIssuer()};return{sellerId:s,offerId:t.offerId().toString(),assetSold:d,amountSold:O(u),assetBought:p,amountBought:O(a)}})),l=a.offer().switch().name;let c;if("function"==typeof a.offer().value&&a.offer().value()){const e=a.offer().value();c={offerId:e.offerId().toString(),selling:{},buying:{},amount:O(e.amount().toString()),price:{n:e.price().n(),d:e.price().d()}};const t=o.Asset.fromOperation(e.selling());c.selling={type:t.getAssetType(),assetCode:t.getCode(),issuer:t.getIssuer()};const r=o.Asset.fromOperation(e.buying());c.buying={type:r.getAssetType(),assetCode:r.getCode(),issuer:r.getIssuer()}}return{offersClaimed:u,effect:l,operationIndex:t,currentOffer:c,amountBought:O(r),amountSold:O(i),isFullyOpen:!u.length&&"manageOfferDeleted"!==l,wasPartiallyFilled:!!u.length&&"manageOfferDeleted"!==l,wasImmediatelyFilled:!!u.length&&"manageOfferDeleted"===l,wasImmediatelyDeleted:!u.length&&"manageOfferDeleted"===l}})).filter((e=>!!e))),{...e.data,offerResults:s?r:void 0}})).catch((e=>e instanceof Error?Promise.reject(e):Promise.reject(new l.BadResponseError(`Transaction submission failed. Server responded: ${e.status} ${e.statusText}`,e.data))))}async submitAsyncTransaction(e,t={skipMemoRequiredCheck:!1}){t.skipMemoRequiredCheck||await this.checkMemoRequired(e);const r=encodeURIComponent(e.toEnvelope().toXDR().toString("base64"));return x.default.post(i()(this.serverURL).segment("transactions_async").toString(),`tx=${r}`).then((e=>e.data)).catch((e=>e instanceof Error?Promise.reject(e):Promise.reject(new l.BadResponseError(`Transaction submission failed. Server responded: ${e.status} ${e.statusText}`,e.data))))}accounts(){return new c.AccountCallBuilder(i()(this.serverURL))}claimableBalances(){return new f.ClaimableBalanceCallBuilder(i()(this.serverURL))}ledgers(){return new m.LedgerCallBuilder(i()(this.serverURL))}transactions(){return new A.TransactionCallBuilder(i()(this.serverURL))}offers(){return new v.OfferCallBuilder(i()(this.serverURL))}orderbook(e,t){return new w.OrderbookCallBuilder(i()(this.serverURL),e,t)}trades(){return new k.TradesCallBuilder(i()(this.serverURL))}operations(){return new b.OperationCallBuilder(i()(this.serverURL))}liquidityPools(){return new g.LiquidityPoolCallBuilder(i()(this.serverURL))}strictReceivePaths(e,t,r){return new _.StrictReceivePathCallBuilder(i()(this.serverURL),e,t,r)}strictSendPaths(e,t,r){return new T.StrictSendPathCallBuilder(i()(this.serverURL),e,t,r)}payments(){return new S.PaymentCallBuilder(i()(this.serverURL))}effects(){return new h.EffectCallBuilder(i()(this.serverURL))}friendbot(e){return new y.FriendbotBuilder(i()(this.serverURL),e)}assets(){return new p.AssetsCallBuilder(i()(this.serverURL))}async loadAccount(e){const t=await this.accounts().accountId(e).call();return new d.AccountResponse(t)}tradeAggregation(e,t,r,n,o,s){return new E.TradeAggregationCallBuilder(i()(this.serverURL),e,t,r,n,o,s)}async checkMemoRequired(e){if(e instanceof o.FeeBumpTransaction&&(e=e.innerTransaction),"none"!==e.memo.type)return;const t=new Set;for(let r=0;r<e.operations.length;r+=1){const n=e.operations[r];switch(n.type){case"payment":case"pathPaymentStrictReceive":case"pathPaymentStrictSend":case"accountMerge":break;default:continue}const o=n.destination;if(!t.has(o)&&(t.add(o),!o.startsWith("M")))try{if("MQ=="===(await this.loadAccount(o)).data_attr["config.memo_required"])throw new l.AccountRequiresMemoError("account requires memo",o,r)}catch(e){if(e instanceof l.AccountRequiresMemoError)throw e;if(!(e instanceof l.NotFoundError))throw e;continue}}}}},"./src/horizon/server_api.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ServerApi:()=>s});var n=r("./src/horizon/horizon_api.ts"),o=r("./src/horizon/types/effects.ts");let s;!function(e){e.EffectType=o.EffectType;let t=function(e){return e.all="all",e.liquidityPools="liquidity_pool",e.orderbook="orderbook",e}({});e.TradeType=t;n.HorizonApi.OperationResponseType,n.HorizonApi.OperationResponseTypeI}(s||(s={}))},"./src/horizon/strict_receive_path_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{StrictReceivePathCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e,t,r,n){if(super(e),this.url.segment("paths/strict-receive"),"string"==typeof t)this.url.setQuery("source_account",t);else{const e=t.map((e=>e.isNative()?"native":`${e.getCode()}:${e.getIssuer()}`)).join(",");this.url.setQuery("source_assets",e)}this.url.setQuery("destination_amount",n),r.isNative()?this.url.setQuery("destination_asset_type","native"):(this.url.setQuery("destination_asset_type",r.getAssetType()),this.url.setQuery("destination_asset_code",r.getCode()),this.url.setQuery("destination_asset_issuer",r.getIssuer()))}}},"./src/horizon/strict_send_path_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{StrictSendPathCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e,t,r,n){if(super(e),this.url.segment("paths/strict-send"),t.isNative()?this.url.setQuery("source_asset_type","native"):(this.url.setQuery("source_asset_type",t.getAssetType()),this.url.setQuery("source_asset_code",t.getCode()),this.url.setQuery("source_asset_issuer",t.getIssuer())),this.url.setQuery("source_amount",r),"string"==typeof n)this.url.setQuery("destination_account",n);else{const e=n.map((e=>e.isNative()?"native":`${e.getCode()}:${e.getIssuer()}`)).join(",");this.url.setQuery("destination_assets",e)}}}},"./src/horizon/trade_aggregation_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{TradeAggregationCallBuilder:()=>i});var n=r("./src/horizon/call_builder.ts"),o=r("./src/errors/index.ts");const s=[6e4,3e5,9e5,36e5,864e5,6048e5];class i extends n.CallBuilder{constructor(e,t,r,n,s,i,a){if(super(e),this.url.segment("trade_aggregations"),t.isNative()?this.url.setQuery("base_asset_type","native"):(this.url.setQuery("base_asset_type",t.getAssetType()),this.url.setQuery("base_asset_code",t.getCode()),this.url.setQuery("base_asset_issuer",t.getIssuer())),r.isNative()?this.url.setQuery("counter_asset_type","native"):(this.url.setQuery("counter_asset_type",r.getAssetType()),this.url.setQuery("counter_asset_code",r.getCode()),this.url.setQuery("counter_asset_issuer",r.getIssuer())),"number"!=typeof n||"number"!=typeof s)throw new o.BadRequestError("Invalid time bounds",[n,s]);if(this.url.setQuery("start_time",n.toString()),this.url.setQuery("end_time",s.toString()),!this.isValidResolution(i))throw new o.BadRequestError("Invalid resolution",i);if(this.url.setQuery("resolution",i.toString()),!this.isValidOffset(a,i))throw new o.BadRequestError("Invalid offset",a);this.url.setQuery("offset",a.toString())}isValidResolution(e){return s.some((t=>t===e))}isValidOffset(e,t){const r=36e5;return!(e>t||e>=24*r||e%r!=0)}}},"./src/horizon/trades_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{TradesCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e,"trades"),this.url.segment("trades")}forAssetPair(e,t){return e.isNative()?this.url.setQuery("base_asset_type","native"):(this.url.setQuery("base_asset_type",e.getAssetType()),this.url.setQuery("base_asset_code",e.getCode()),this.url.setQuery("base_asset_issuer",e.getIssuer())),t.isNative()?this.url.setQuery("counter_asset_type","native"):(this.url.setQuery("counter_asset_type",t.getAssetType()),this.url.setQuery("counter_asset_code",t.getCode()),this.url.setQuery("counter_asset_issuer",t.getIssuer())),this}forOffer(e){return this.url.setQuery("offer_id",e),this}forType(e){return this.url.setQuery("trade_type",e),this}forAccount(e){return this.forEndpoint("accounts",e)}forLiquidityPool(e){return this.forEndpoint("liquidity_pools",e)}}},"./src/horizon/transaction_call_builder.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{TransactionCallBuilder:()=>o});var n=r("./src/horizon/call_builder.ts");class o extends n.CallBuilder{constructor(e){super(e,"transactions"),this.url.segment("transactions")}transaction(e){const t=new n.CallBuilder(this.url.clone());return t.filter.push([e]),t}forAccount(e){return this.forEndpoint("accounts",e)}forClaimableBalance(e){return this.forEndpoint("claimable_balances",e)}forLedger(e){return this.forEndpoint("ledgers",e.toString())}forLiquidityPool(e){return this.forEndpoint("liquidity_pools",e)}includeFailed(e){return this.url.setQuery("include_failed",e.toString()),this}}},"./src/horizon/types/effects.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{EffectType:()=>n});let n=function(e){return e[e.account_created=0]="account_created",e[e.account_removed=1]="account_removed",e[e.account_credited=2]="account_credited",e[e.account_debited=3]="account_debited",e[e.account_thresholds_updated=4]="account_thresholds_updated",e[e.account_home_domain_updated=5]="account_home_domain_updated",e[e.account_flags_updated=6]="account_flags_updated",e[e.account_inflation_destination_updated=7]="account_inflation_destination_updated",e[e.signer_created=10]="signer_created",e[e.signer_removed=11]="signer_removed",e[e.signer_updated=12]="signer_updated",e[e.trustline_created=20]="trustline_created",e[e.trustline_removed=21]="trustline_removed",e[e.trustline_updated=22]="trustline_updated",e[e.trustline_authorized=23]="trustline_authorized",e[e.trustline_deauthorized=24]="trustline_deauthorized",e[e.trustline_authorized_to_maintain_liabilities=25]="trustline_authorized_to_maintain_liabilities",e[e.trustline_flags_updated=26]="trustline_flags_updated",e[e.offer_created=30]="offer_created",e[e.offer_removed=31]="offer_removed",e[e.offer_updated=32]="offer_updated",e[e.trade=33]="trade",e[e.data_created=40]="data_created",e[e.data_removed=41]="data_removed",e[e.data_updated=42]="data_updated",e[e.sequence_bumped=43]="sequence_bumped",e[e.claimable_balance_created=50]="claimable_balance_created",e[e.claimable_balance_claimant_created=51]="claimable_balance_claimant_created",e[e.claimable_balance_claimed=52]="claimable_balance_claimed",e[e.account_sponsorship_created=60]="account_sponsorship_created",e[e.account_sponsorship_updated=61]="account_sponsorship_updated",e[e.account_sponsorship_removed=62]="account_sponsorship_removed",e[e.trustline_sponsorship_created=63]="trustline_sponsorship_created",e[e.trustline_sponsorship_updated=64]="trustline_sponsorship_updated",e[e.trustline_sponsorship_removed=65]="trustline_sponsorship_removed",e[e.data_sponsorship_created=66]="data_sponsorship_created",e[e.data_sponsorship_updated=67]="data_sponsorship_updated",e[e.data_sponsorship_removed=68]="data_sponsorship_removed",e[e.claimable_balance_sponsorship_created=69]="claimable_balance_sponsorship_created",e[e.claimable_balance_sponsorship_updated=70]="claimable_balance_sponsorship_updated",e[e.claimable_balance_sponsorship_removed=71]="claimable_balance_sponsorship_removed",e[e.signer_sponsorship_created=72]="signer_sponsorship_created",e[e.signer_sponsorship_updated=73]="signer_sponsorship_updated",e[e.signer_sponsorship_removed=74]="signer_sponsorship_removed",e[e.claimable_balance_clawed_back=80]="claimable_balance_clawed_back",e[e.liquidity_pool_deposited=90]="liquidity_pool_deposited",e[e.liquidity_pool_withdrew=91]="liquidity_pool_withdrew",e[e.liquidity_pool_trade=92]="liquidity_pool_trade",e[e.liquidity_pool_created=93]="liquidity_pool_created",e[e.liquidity_pool_removed=94]="liquidity_pool_removed",e[e.liquidity_pool_revoked=95]="liquidity_pool_revoked",e[e.contract_credited=96]="contract_credited",e[e.contract_debited=97]="contract_debited",e}({})},"./src/http-client/fetch-client.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{create:()=>a,fetchClient:()=>u});var n=r("./node_modules/feaxios/dist/index.mjs"),o=r("./src/http-client/types.ts");class s{handlers=[];use(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}forEach(e){this.handlers.forEach((t=>{null!==t&&e(t)}))}}function i(e){const t=e||{};return t.headers=new Headers(t.headers||{}),t.headers.set("Content-Type","application/x-www-form-urlencoded"),t}function a(e={}){const t={...e,headers:e.headers||{}},r=n.default.create(t),u=new s,l=new s;return{interceptors:{request:u,response:l},defaults:{...t,adapter:e=>r.request(e)},create(e){return a({...this.defaults,...e})},makeRequest(e){return new Promise(((t,r)=>{const n=new AbortController;e.signal=n.signal,e.cancelToken&&e.cancelToken.promise.then((()=>{n.abort(),r(new Error("Request canceled"))}));let o=e;if(u.handlers.length>0){const e=u.handlers.filter((e=>null!==e)).flatMap((e=>[e.fulfilled,e.rejected]));for(let t=0,n=e.length;t<n;t+=2){const n=e[t],s=e[t+1];try{n&&(o=n(o))}catch(e){return s&&s?.(e),void r(e)}}}const s=o.adapter||this.defaults.adapter;if(!s)throw new Error("No adapter available");let i=s(o).then((e=>({data:e.data,headers:e.headers,config:e.config,status:e.status,statusText:e.statusText})));if(l.handlers.length>0){const e=l.handlers.filter((e=>null!==e)).flatMap((e=>[e.fulfilled,e.rejected]));for(let t=0,r=e.length;t<r;t+=2)i=i.then((r=>{const n=e[t];return"function"==typeof n?n(r):r}),(r=>{const n=e[t+1];if("function"==typeof n)return n(r);throw r})).then((e=>e))}i.then(t).catch(r)}))},get(e,t){return this.makeRequest({...this.defaults,...t,url:e,method:"get"})},delete(e,t){return this.makeRequest({...this.defaults,...t,url:e,method:"delete"})},head(e,t){return this.makeRequest({...this.defaults,...t,url:e,method:"head"})},options(e,t){return this.makeRequest({...this.defaults,...t,url:e,method:"options"})},post(e,t,r){return this.makeRequest({...this.defaults,...r,url:e,method:"post",data:t})},put(e,t,r){return this.makeRequest({...this.defaults,...r,url:e,method:"put",data:t})},patch(e,t,r){return this.makeRequest({...this.defaults,...r,url:e,method:"patch",data:t})},postForm(e,t,r){const n=i(r);return this.makeRequest({...this.defaults,...n,url:e,method:"post",data:t})},putForm(e,t,r){const n=i(r);return this.makeRequest({...this.defaults,...n,url:e,method:"put",data:t})},patchForm(e,t,r){const n=i(r);return this.makeRequest({...this.defaults,...n,url:e,method:"patch",data:t})},CancelToken:o.CancelToken,isCancel:e=>e instanceof Error&&"Request canceled"===e.message}}const u=a()},"./src/http-client/index.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CancelToken:()=>n.CancelToken,create:()=>s,httpClient:()=>o});var n=r("./src/http-client/types.ts");let o,s;{const e=r("./src/http-client/fetch-client.ts");o=e.fetchClient,s=e.create}},"./src/http-client/types.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CancelToken:()=>n});class n{throwIfRequested(){if(this.reason)throw new Error(this.reason)}constructor(e){let t;this.promise=new Promise((e=>{t=e})),e((e=>{this.reason=e,t()}))}}},"./src/index.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AccountRequiresMemoError:()=>n.AccountRequiresMemoError,BadRequestError:()=>n.BadRequestError,BadResponseError:()=>n.BadResponseError,Config:()=>o.Config,Federation:()=>a,Friendbot:()=>l,Horizon:()=>c,NetworkError:()=>n.NetworkError,NotFoundError:()=>n.NotFoundError,StellarToml:()=>i,Utils:()=>s.Utils,WebAuth:()=>u,contract:()=>p,default:()=>y,rpc:()=>d});var n=r("./src/errors/index.ts"),o=r("./src/config.ts"),s=r("./src/utils.ts"),i=r("./src/stellartoml/index.ts"),a=r("./src/federation/index.ts"),u=r("./src/webauth/index.ts"),l=r("./src/friendbot/index.ts"),c=r("./src/horizon/index.ts"),d=r("./src/rpc/index.ts"),p=r("./src/contract/index.ts"),f=r("./node_modules/@stellar/stellar-base/lib/index.js"),h={};for(const e in f)["default","Config","Utils","StellarToml","Federation","WebAuth","Friendbot","Horizon","rpc","contract","AccountRequiresMemoError","BadRequestError","BadResponseError","NetworkError","NotFoundError"].indexOf(e)<0&&(h[e]=()=>f[e]);r.d(t,h);const y=(e=r.hmd(e)).exports;void 0===r.g.__USE_AXIOS__&&(r.g.__USE_AXIOS__=!0),void 0===r.g.__USE_EVENTSOURCE__&&(r.g.__USE_EVENTSOURCE__=!1)},"./src/rpc/api.ts":(e,t,r)=>{"use strict";let n;r.r(t),r.d(t,{Api:()=>n}),function(e){let t=function(e){return e.SUCCESS="SUCCESS",e.NOT_FOUND="NOT_FOUND",e.FAILED="FAILED",e}({});function r(e){return"transactionData"in e}e.GetTransactionStatus=t,e.isSimulationError=function(e){return"error"in e},e.isSimulationSuccess=r,e.isSimulationRestore=function(e){return r(e)&&"restorePreamble"in e&&!!e.restorePreamble.transactionData},e.isSimulationRaw=function(e){return!e._parsed}}(n||(n={}))},"./src/rpc/axios.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{AxiosClient:()=>s,default:()=>i,version:()=>o});var n=r("./src/http-client/index.ts");const o="13.1.0",s=(0,n.create)({headers:{"X-Client-Name":"js-soroban-client","X-Client-Version":o}}),i=s},"./src/rpc/index.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Api:()=>n.Api,AxiosClient:()=>s.default,BasicSleepStrategy:()=>o.BasicSleepStrategy,Durability:()=>o.Durability,LinearSleepStrategy:()=>o.LinearSleepStrategy,Server:()=>o.RpcServer,assembleTransaction:()=>a.assembleTransaction,default:()=>u,parseRawEvents:()=>i.parseRawEvents,parseRawSimulation:()=>i.parseRawSimulation});var n=r("./src/rpc/api.ts"),o=r("./src/rpc/server.ts"),s=r("./src/rpc/axios.ts"),i=r("./src/rpc/parsers.ts"),a=r("./src/rpc/transaction.ts");const u=(e=r.hmd(e)).exports},"./src/rpc/jsonrpc.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{postObject:()=>o});var n=r("./src/rpc/axios.ts");async function o(e,t,r=null){const o=await n.default.post(e,{jsonrpc:"2.0",id:1,method:t,params:r});if(s=o.data,i="error",s.hasOwnProperty(i))throw o.data.error;return o.data?.result;var s,i}},"./src/rpc/parsers.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{parseRawEvents:()=>u,parseRawLedgerEntries:()=>l,parseRawSendTransaction:()=>s,parseRawSimulation:()=>c,parseRawTransactions:()=>a,parseTransactionInfo:()=>i});var n=r("./node_modules/@stellar/stellar-base/lib/index.js"),o=r("./src/rpc/api.ts");function s(e){const{errorResultXdr:t,diagnosticEventsXdr:r}=e;return delete e.errorResultXdr,delete e.diagnosticEventsXdr,t?{...e,...void 0!==r&&r.length>0&&{diagnosticEvents:r.map((e=>n.xdr.DiagnosticEvent.fromXDR(e,"base64")))},errorResult:n.xdr.TransactionResult.fromXDR(t,"base64")}:{...e}}function i(e){const t=n.xdr.TransactionMeta.fromXDR(e.resultMetaXdr,"base64"),r={ledger:e.ledger,createdAt:e.createdAt,applicationOrder:e.applicationOrder,feeBump:e.feeBump,envelopeXdr:n.xdr.TransactionEnvelope.fromXDR(e.envelopeXdr,"base64"),resultXdr:n.xdr.TransactionResult.fromXDR(e.resultXdr,"base64"),resultMetaXdr:t};return 3===t.switch()&&null!==t.v3().sorobanMeta()&&(r.returnValue=t.v3().sorobanMeta()?.returnValue()),"diagnosticEventsXdr"in e&&e.diagnosticEventsXdr&&(r.diagnosticEventsXdr=e.diagnosticEventsXdr.map((e=>n.xdr.DiagnosticEvent.fromXDR(e,"base64")))),r}function a(e){return{status:e.status,txHash:e.txHash,...i(e)}}function u(e){return{latestLedger:e.latestLedger,cursor:e.cursor,events:(e.events??[]).map((e=>{const t={...e};return delete t.contractId,{...t,...""!==e.contractId&&{contractId:new n.Contract(e.contractId)},topic:e.topic.map((e=>n.xdr.ScVal.fromXDR(e,"base64"))),value:n.xdr.ScVal.fromXDR(e.value,"base64")}}))}}function l(e){return{latestLedger:e.latestLedger,entries:(e.entries??[]).map((e=>{if(!e.key||!e.xdr)throw new TypeError(`invalid ledger entry: ${JSON.stringify(e)}`);return{lastModifiedLedgerSeq:e.lastModifiedLedgerSeq,key:n.xdr.LedgerKey.fromXDR(e.key,"base64"),val:n.xdr.LedgerEntryData.fromXDR(e.xdr,"base64"),...void 0!==e.liveUntilLedgerSeq&&{liveUntilLedgerSeq:e.liveUntilLedgerSeq}}}))}}function c(e){if(!o.Api.isSimulationRaw(e))return e;const t={_parsed:!0,id:e.id,latestLedger:e.latestLedger,events:e.events?.map((e=>n.xdr.DiagnosticEvent.fromXDR(e,"base64")))??[]};return"string"==typeof e.error?{...t,error:e.error}:function(e,t){const r={...t,transactionData:new n.SorobanDataBuilder(e.transactionData),minResourceFee:e.minResourceFee,...(e.results?.length??!1)&&{result:e.results.map((e=>({auth:(e.auth??[]).map((e=>n.xdr.SorobanAuthorizationEntry.fromXDR(e,"base64"))),retval:e.xdr?n.xdr.ScVal.fromXDR(e.xdr,"base64"):n.xdr.ScVal.scvVoid()})))[0]},...(e.stateChanges?.length??!1)&&{stateChanges:e.stateChanges?.map((e=>({type:e.type,key:n.xdr.LedgerKey.fromXDR(e.key,"base64"),before:e.before?n.xdr.LedgerEntry.fromXDR(e.before,"base64"):null,after:e.after?n.xdr.LedgerEntry.fromXDR(e.after,"base64"):null})))}};return e.restorePreamble&&""!==e.restorePreamble.transactionData?{...r,restorePreamble:{minResourceFee:e.restorePreamble.minResourceFee,transactionData:new n.SorobanDataBuilder(e.restorePreamble.transactionData)}}:r}(e,t)}},"./src/rpc/server.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{BasicSleepStrategy:()=>y,Durability:()=>h,LinearSleepStrategy:()=>m,RpcServer:()=>g,SUBMIT_TRANSACTION_TIMEOUT:()=>f});var n=r("./node_modules/urijs/src/URI.js"),o=r.n(n),s=r("./node_modules/@stellar/stellar-base/lib/index.js"),i=r("./src/rpc/axios.ts"),a=r("./src/rpc/jsonrpc.ts"),u=r("./src/rpc/api.ts"),l=r("./src/rpc/transaction.ts"),c=r("./src/rpc/parsers.ts"),d=r("./src/utils.ts"),p=r("./node_modules/buffer/index.js").Buffer;const f=6e4;let h=function(e){return e.Temporary="temporary",e.Persistent="persistent",e}({});const y=e=>1e3,m=e=>1e3*e;class g{constructor(e,t={}){if(this.serverURL=o()(e),t.headers&&0!==Object.keys(t.headers).length&&i.default.interceptors.request.use((e=>(e.headers=Object.assign(e.headers,t.headers),e))),"https"!==this.serverURL.protocol()&&!t.allowHttp)throw new Error("Cannot connect to insecure Soroban RPC server if `allowHttp` isn't set")}async getAccount(e){const t=s.xdr.LedgerKey.account(new s.xdr.LedgerKeyAccount({accountId:s.Keypair.fromPublicKey(e).xdrPublicKey()})),r=await this.getLedgerEntries(t);if(0===r.entries.length)return Promise.reject({code:404,message:`Account not found: ${e}`});const n=r.entries[0].val.account();return new s.Account(e,n.seqNum().toString())}async getHealth(){return a.postObject(this.serverURL.toString(),"getHealth")}async getContractData(e,t,r=h.Persistent){let n,o;if("string"==typeof e)n=new s.Contract(e).address().toScAddress();else if(e instanceof s.Address)n=e.toScAddress();else{if(!(e instanceof s.Contract))throw new TypeError(`unknown contract type: ${e}`);n=e.address().toScAddress()}switch(r){case h.Temporary:o=s.xdr.ContractDataDurability.temporary();break;case h.Persistent:o=s.xdr.ContractDataDurability.persistent();break;default:throw new TypeError(`invalid durability: ${r}`)}const i=s.xdr.LedgerKey.contractData(new s.xdr.LedgerKeyContractData({key:t,contract:n,durability:o}));return this.getLedgerEntries(i).then((e=>0===e.entries.length?Promise.reject({code:404,message:`Contract data not found. Contract: ${s.Address.fromScAddress(n).toString()}, Key: ${t.toXDR("base64")}, Durability: ${r}`}):e.entries[0]))}async getContractWasmByContractId(e){const t=new s.Contract(e).getFootprint(),r=await this.getLedgerEntries(t);if(!r.entries.length||!r.entries[0]?.val)return Promise.reject({code:404,message:"Could not obtain contract hash from server"});const n=r.entries[0].val.contractData().val().instance().executable().wasmHash();return this.getContractWasmByHash(n)}async getContractWasmByHash(e,t=void 0){const r="string"==typeof e?p.from(e,t):e,n=s.xdr.LedgerKey.contractCode(new s.xdr.LedgerKeyContractCode({hash:r})),o=await this.getLedgerEntries(n);if(!o.entries.length||!o.entries[0]?.val)return Promise.reject({code:404,message:"Could not obtain contract wasm from server"});return o.entries[0].val.contractCode().code()}async getLedgerEntries(...e){return this._getLedgerEntries(...e).then(c.parseRawLedgerEntries)}async _getLedgerEntries(...e){return a.postObject(this.serverURL.toString(),"getLedgerEntries",{keys:e.map((e=>e.toXDR("base64")))})}async pollTransaction(e,t){let r,n=(t?.attempts??0)<1?30:t?.attempts??30;for(let o=1;o<n;o++){if(r=await this.getTransaction(e),r.status!==u.Api.GetTransactionStatus.NOT_FOUND)return r;await d.Utils.sleep((t?.sleepStrategy??y)(o))}return r}async getTransaction(e){return this._getTransaction(e).then((t=>{const r={};t.status!==u.Api.GetTransactionStatus.NOT_FOUND&&Object.assign(r,(0,c.parseTransactionInfo)(t));return{status:t.status,txHash:e,latestLedger:t.latestLedger,latestLedgerCloseTime:t.latestLedgerCloseTime,oldestLedger:t.oldestLedger,oldestLedgerCloseTime:t.oldestLedgerCloseTime,...r}}))}async _getTransaction(e){return a.postObject(this.serverURL.toString(),"getTransaction",{hash:e})}async getTransactions(e){return this._getTransactions(e).then((e=>({transactions:e.transactions.map(c.parseRawTransactions),latestLedger:e.latestLedger,latestLedgerCloseTimestamp:e.latestLedgerCloseTimestamp,oldestLedger:e.oldestLedger,oldestLedgerCloseTimestamp:e.oldestLedgerCloseTimestamp,cursor:e.cursor})))}async _getTransactions(e){return a.postObject(this.serverURL.toString(),"getTransactions",e)}async getEvents(e){return this._getEvents(e).then(c.parseRawEvents)}async _getEvents(e){return a.postObject(this.serverURL.toString(),"getEvents",{filters:e.filters??[],pagination:{...e.cursor&&{cursor:e.cursor},...e.limit&&{limit:e.limit}},...e.startLedger&&{startLedger:e.startLedger},...e.endLedger&&{endLedger:e.endLedger}})}async getNetwork(){return a.postObject(this.serverURL.toString(),"getNetwork")}async getLatestLedger(){return a.postObject(this.serverURL.toString(),"getLatestLedger")}async simulateTransaction(e,t){return this._simulateTransaction(e,t).then(c.parseRawSimulation)}async _simulateTransaction(e,t){return a.postObject(this.serverURL.toString(),"simulateTransaction",{transaction:e.toXDR(),...void 0!==t&&{resourceConfig:{instructionLeeway:t.cpuInstructions}}})}async prepareTransaction(e){const t=await this.simulateTransaction(e);if(u.Api.isSimulationError(t))throw new Error(t.error);return(0,l.assembleTransaction)(e,t).build()}async sendTransaction(e){return this._sendTransaction(e).then(c.parseRawSendTransaction)}async _sendTransaction(e){return a.postObject(this.serverURL.toString(),"sendTransaction",{transaction:e.toXDR()})}async requestAirdrop(e,t){const r="string"==typeof e?e:e.accountId();if(!(t=t||(await this.getNetwork()).friendbotUrl))throw new Error("No friendbot URL configured for current network");try{const n=await i.default.post(`${t}?addr=${encodeURIComponent(r)}`);let o;if(n.data.result_meta_xdr)o=s.xdr.TransactionMeta.fromXDR(n.data.result_meta_xdr,"base64");else{const t=await this.getTransaction(n.data.hash);if(t.status!==u.Api.GetTransactionStatus.SUCCESS)throw new Error(`Funding account ${e} failed`);o=t.resultMetaXdr}const a=function(e){let t=[];switch(e.switch()){case 0:t=e.operations();break;case 1:case 2:case 3:t=e.value().operations();break;default:throw new Error("Unexpected transaction meta switch value")}const r=t.flatMap((e=>e.changes())).find((e=>e.switch()===s.xdr.LedgerEntryChangeType.ledgerEntryCreated()&&e.created().data().switch()===s.xdr.LedgerEntryType.account()))?.created()?.data()?.account()?.seqNum()?.toString();if(r)return r;throw new Error("No account created in transaction")}(o);return new s.Account(r,a)}catch(e){if(400===e.response?.status&&e.response.detail?.includes("createAccountAlreadyExist"))return this.getAccount(r);throw e}}async getFeeStats(){return a.postObject(this.serverURL.toString(),"getFeeStats")}async getVersionInfo(){return a.postObject(this.serverURL.toString(),"getVersionInfo")}async getSACBalance(e,t,r){if(!s.StrKey.isValidContract(e))throw new TypeError(`expected contract ID, got ${e}`);const n=r??await this.getNetwork().then((e=>e.passphrase)),o=t.contractId(n),i=s.xdr.ScVal.scvVec([(0,s.nativeToScVal)("Balance",{type:"symbol"}),(0,s.nativeToScVal)(e,{type:"address"})]),a=s.xdr.LedgerKey.contractData(new s.xdr.LedgerKeyContractData({contract:new s.Address(o).toScAddress(),durability:s.xdr.ContractDataDurability.persistent(),key:i})),u=await this.getLedgerEntries(a);if(0===u.entries.length)return{latestLedger:u.latestLedger};const{lastModifiedLedgerSeq:l,liveUntilLedgerSeq:c,val:d}=u.entries[0];if(d.switch().value!==s.xdr.LedgerEntryType.contractData().value)return{latestLedger:u.latestLedger};const p=(0,s.scValToNative)(d.contractData().val());return{latestLedger:u.latestLedger,balanceEntry:{liveUntilLedgerSeq:c,lastModifiedLedgerSeq:l,amount:p.amount.toString(),authorized:p.authorized,clawback:p.clawback}}}}},"./src/rpc/transaction.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{assembleTransaction:()=>i});var n=r("./node_modules/@stellar/stellar-base/lib/index.js"),o=r("./src/rpc/api.ts"),s=r("./src/rpc/parsers.ts");function i(e,t){if("innerTransaction"in e)return i(e.innerTransaction,t);if(!function(e){if(1!==e.operations.length)return!1;switch(e.operations[0].type){case"invokeHostFunction":case"extendFootprintTtl":case"restoreFootprint":return!0;default:return!1}}(e))throw new TypeError("unsupported transaction: must contain exactly one invokeHostFunction, extendFootprintTtl, or restoreFootprint operation");const r=(0,s.parseRawSimulation)(t);if(!o.Api.isSimulationSuccess(r))throw new Error(`simulation incorrect: ${JSON.stringify(r)}`);const a=parseInt(e.fee)||0,u=parseInt(r.minResourceFee)||0,l=n.TransactionBuilder.cloneFrom(e,{fee:(a+u).toString(),sorobanData:r.transactionData.build(),networkPassphrase:e.networkPassphrase});if("invokeHostFunction"===e.operations[0].type){l.clearOperations();const t=e.operations[0],o=t.auth??[];l.addOperation(n.Operation.invokeHostFunction({source:t.source,func:t.func,auth:o.length>0?o:r.result.auth}))}return l}},"./src/stellartoml/index.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Api:()=>{},Resolver:()=>l,STELLAR_TOML_MAX_SIZE:()=>a});var n=r("./node_modules/toml/index.js"),o=r.n(n),s=r("./src/http-client/index.ts"),i=r("./src/config.ts");const a=102400,u=s.httpClient.CancelToken;class l{static async resolve(e,t={}){const r=void 0===t.allowHttp?i.Config.isAllowHttp():t.allowHttp,n=void 0===t.timeout?i.Config.getTimeout():t.timeout,l=r?"http":"https";return s.httpClient.get(`${l}://${e}/.well-known/stellar.toml`,{maxRedirects:t.allowedRedirects??0,maxContentLength:a,cancelToken:n?new u((e=>setTimeout((()=>e(`timeout of ${n}ms exceeded`)),n))):void 0,timeout:n}).then((e=>{try{const t=o().parse(e.data);return Promise.resolve(t)}catch(e){return Promise.reject(new Error(`stellar.toml is invalid - Parsing error on line ${e.line}, column ${e.column}: ${e.message}`))}})).catch((e=>{throw e.message.match(/^maxContentLength size/)?new Error(`stellar.toml file exceeds allowed size of ${a}`):e}))}}},"./src/utils.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Utils:()=>n});class n{static validateTimebounds(e,t=0){if(!e.timeBounds)return!1;const r=Math.floor(Date.now()/1e3),{minTime:n,maxTime:o}=e.timeBounds;return r>=Number.parseInt(n,10)-t&&r<=Number.parseInt(o,10)+t}static sleep(e){return new Promise((t=>setTimeout(t,e)))}}},"./src/webauth/errors.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{InvalidChallengeError:()=>n});class n extends Error{constructor(e){const t=new.target.prototype;super(e),this.__proto__=t,this.constructor=n,this.name="InvalidChallengeError"}}},"./src/webauth/index.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{InvalidChallengeError:()=>o.InvalidChallengeError,buildChallengeTx:()=>n.buildChallengeTx,gatherTxSigners:()=>n.gatherTxSigners,readChallengeTx:()=>n.readChallengeTx,verifyChallengeTxSigners:()=>n.verifyChallengeTxSigners,verifyChallengeTxThreshold:()=>n.verifyChallengeTxThreshold,verifyTxSignedBy:()=>n.verifyTxSignedBy});var n=r("./src/webauth/utils.ts"),o=r("./src/webauth/errors.ts")},"./src/webauth/utils.ts":(e,t,r)=>{"use strict";r.r(t),r.d(t,{buildChallengeTx:()=>l,gatherTxSigners:()=>h,readChallengeTx:()=>c,verifyChallengeTxSigners:()=>p,verifyChallengeTxThreshold:()=>d,verifyTxSignedBy:()=>f});var n=r("./node_modules/randombytes/browser.js"),o=r.n(n),s=r("./node_modules/@stellar/stellar-base/lib/index.js"),i=r("./src/utils.ts"),a=r("./src/webauth/errors.ts"),u=r("./node_modules/buffer/index.js").Buffer;function l(e,t,r,n=300,i,a,u=null,l=null,c=null){if(t.startsWith("M")&&u)throw Error("memo cannot be used if clientAccountID is a muxed account");const d=new s.Account(e.publicKey(),"-1"),p=Math.floor(Date.now()/1e3),f=o()(48).toString("base64"),h=new s.TransactionBuilder(d,{fee:s.BASE_FEE,networkPassphrase:i,timebounds:{minTime:p,maxTime:p+n}}).addOperation(s.Operation.manageData({name:`${r} auth`,value:f,source:t})).addOperation(s.Operation.manageData({name:"web_auth_domain",value:a,source:d.accountId()}));if(l){if(!c)throw Error("clientSigningKey is required if clientDomain is provided");h.addOperation(s.Operation.manageData({name:"client_domain",value:l,source:c}))}u&&h.addMemo(s.Memo.id(u));const y=h.build();return y.sign(e),y.toEnvelope().toXDR("base64").toString()}function c(e,t,r,n,o){if(t.startsWith("M"))throw Error("Invalid serverAccountID: multiplexed accounts are not supported.");let l;try{l=new s.Transaction(e,r)}catch{try{l=new s.FeeBumpTransaction(e,r)}catch{throw new a.InvalidChallengeError("Invalid challenge: unable to deserialize challengeTx transaction string")}throw new a.InvalidChallengeError("Invalid challenge: expected a Transaction but received a FeeBumpTransaction")}if(0!==Number.parseInt(l.sequence,10))throw new a.InvalidChallengeError("The transaction sequence number should be zero");if(l.source!==t)throw new a.InvalidChallengeError("The transaction source account is not equal to the server's account");if(l.operations.length<1)throw new a.InvalidChallengeError("The transaction should contain at least one operation");const[c,...d]=l.operations;if(!c.source)throw new a.InvalidChallengeError("The transaction's operation should contain a source account");const p=c.source;let h,y=null;if(l.memo.type!==s.MemoNone){if(p.startsWith("M"))throw new a.InvalidChallengeError("The transaction has a memo but the client account ID is a muxed account");if(l.memo.type!==s.MemoID)throw new a.InvalidChallengeError("The transaction's memo must be of type `id`");y=l.memo.value}if("manageData"!==c.type)throw new a.InvalidChallengeError("The transaction's operation type should be 'manageData'");if(l.timeBounds&&Number.parseInt(l.timeBounds?.maxTime,10)===s.TimeoutInfinite)throw new a.InvalidChallengeError("The transaction requires non-infinite timebounds");if(!i.Utils.validateTimebounds(l,300))throw new a.InvalidChallengeError("The transaction has expired");if(void 0===c.value)throw new a.InvalidChallengeError("The transaction's operation values should not be null");if(!c.value)throw new a.InvalidChallengeError("The transaction's operation value should not be null");if(48!==u.from(c.value.toString(),"base64").length)throw new a.InvalidChallengeError("The transaction's operation value should be a 64 bytes base64 random string");if(!n)throw new a.InvalidChallengeError("Invalid homeDomains: a home domain must be provided for verification");if("string"==typeof n)`${n} auth`===c.name&&(h=n);else{if(!Array.isArray(n))throw new a.InvalidChallengeError(`Invalid homeDomains: homeDomains type is ${typeof n} but should be a string or an array`);h=n.find((e=>`${e} auth`===c.name))}if(!h)throw new a.InvalidChallengeError("Invalid homeDomains: the transaction's operation key name does not match the expected home domain");for(const e of d){if("manageData"!==e.type)throw new a.InvalidChallengeError("The transaction has operations that are not of type 'manageData'");if(e.source!==t&&"client_domain"!==e.name)throw new a.InvalidChallengeError("The transaction has operations that are unrecognized");if("web_auth_domain"===e.name){if(void 0===e.value)throw new a.InvalidChallengeError("'web_auth_domain' operation value should not be null");if(e.value.compare(u.from(o)))throw new a.InvalidChallengeError(`'web_auth_domain' operation value does not match ${o}`)}}if(!f(l,t))throw new a.InvalidChallengeError(`Transaction not signed by server: '${t}'`);return{tx:l,clientAccountID:p,matchedHomeDomain:h,memo:y}}function d(e,t,r,n,o,s,i){const u=p(e,t,r,o.map((e=>e.key)),s,i);let l=0;for(const e of u){l+=o.find((t=>t.key===e))?.weight||0}if(l<n)throw new a.InvalidChallengeError(`signers with weight ${l} do not meet threshold ${n}"`);return u}function p(e,t,r,n,o,i){const{tx:u}=c(e,t,r,o,i);let l;try{l=s.Keypair.fromPublicKey(t)}catch(e){throw new Error(`Couldn't infer keypair from the provided 'serverAccountID': ${e.message}`)}const d=new Set;for(const e of n)e!==l.publicKey()&&"G"===e.charAt(0)&&d.add(e);if(0===d.size)throw new a.InvalidChallengeError("No verifiable client signers provided, at least one G... address must be provided");let p;for(const e of u.operations)if("manageData"===e.type&&"client_domain"===e.name){if(p)throw new a.InvalidChallengeError("Found more than one client_domain operation");p=e.source}const f=[l.publicKey(),...Array.from(d)];p&&f.push(p);const y=h(u,f);let m=!1,g=!1;for(const e of y)e===l.publicKey()&&(m=!0),e===p&&(g=!0);if(!m)throw new a.InvalidChallengeError(`Transaction not signed by server: '${l.publicKey()}'`);if(p&&!g)throw new a.InvalidChallengeError("Transaction not signed by the source account of the 'client_domain' ManageData operation");if(1===y.length)throw new a.InvalidChallengeError("None of the given signers match the transaction signatures");if(y.length!==u.signatures.length)throw new a.InvalidChallengeError("Transaction has unrecognized signatures");return y.splice(y.indexOf(l.publicKey()),1),p&&y.splice(y.indexOf(p),1),y}function f(e,t){return 0!==h(e,[t]).length}function h(e,t){const r=e.hash(),n=[...e.signatures],o=new Set;for(const e of t){if(0===n.length)break;let t;try{t=s.Keypair.fromPublicKey(e)}catch(e){throw new a.InvalidChallengeError(`Signer is not a valid address: ${e.message}`)}for(let s=0;s<n.length;s++){const i=n[s];if(i.hint().equals(t.signatureHint())&&t.verify(r,i.signature())){o.add(e),n.splice(s,1);break}}}return Array.from(o)}},"./node_modules/base32.js/base32.js":(e,t)=>{"use strict";var r=function(e,t){return t||(t={}),e.split("").forEach((function(e,r){e in t||(t[e]=r)})),t},n={alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",charmap:{0:14,1:8}};n.charmap=r(n.alphabet,n.charmap);var o={alphabet:"0123456789ABCDEFGHJKMNPQRSTVWXYZ",charmap:{O:0,I:1,L:1}};o.charmap=r(o.alphabet,o.charmap);var s={alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",charmap:{}};function i(e){if(this.buf=[],this.shift=8,this.carry=0,e){switch(e.type){case"rfc4648":this.charmap=t.rfc4648.charmap;break;case"crockford":this.charmap=t.crockford.charmap;break;case"base32hex":this.charmap=t.base32hex.charmap;break;default:throw new Error("invalid type")}e.charmap&&(this.charmap=e.charmap)}}function a(e){if(this.buf="",this.shift=3,this.carry=0,e){switch(e.type){case"rfc4648":this.alphabet=t.rfc4648.alphabet;break;case"crockford":this.alphabet=t.crockford.alphabet;break;case"base32hex":this.alphabet=t.base32hex.alphabet;break;default:throw new Error("invalid type")}e.alphabet?this.alphabet=e.alphabet:e.lc&&(this.alphabet=this.alphabet.toLowerCase())}}s.charmap=r(s.alphabet,s.charmap),i.prototype.charmap=n.charmap,i.prototype.write=function(e){var t=this.charmap,r=this.buf,n=this.shift,o=this.carry;return e.toUpperCase().split("").forEach((function(e){if("="!=e){var s=255&t[e];(n-=5)>0?o|=s<<n:n<0?(r.push(o|s>>-n),o=s<<(n+=8)&255):(r.push(o|s),n=8,o=0)}})),this.shift=n,this.carry=o,this},i.prototype.finalize=function(e){return e&&this.write(e),8!==this.shift&&0!==this.carry&&(this.buf.push(this.carry),this.shift=8,this.carry=0),this.buf},a.prototype.alphabet=n.alphabet,a.prototype.write=function(e){var t,r,n,o=this.shift,s=this.carry;for(n=0;n<e.length;n++)t=s|(r=e[n])>>o,this.buf+=this.alphabet[31&t],o>5&&(t=r>>(o-=5),this.buf+=this.alphabet[31&t]),s=r<<(o=5-o),o=8-o;return this.shift=o,this.carry=s,this},a.prototype.finalize=function(e){return e&&this.write(e),3!==this.shift&&(this.buf+=this.alphabet[31&this.carry],this.shift=3,this.carry=0),this.buf},t.encode=function(e,t){return new a(t).finalize(e)},t.decode=function(e,t){return new i(t).finalize(e)},t.Decoder=i,t.Encoder=a,t.charmap=r,t.crockford=o,t.rfc4648=n,t.base32hex=s},"./node_modules/base64-js/index.js":(e,t)=>{"use strict";t.byteLength=function(e){var t=a(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,s=a(e),i=s[0],u=s[1],l=new o(function(e,t,r){return 3*(t+r)/4-r}(0,i,u)),c=0,d=u>0?i-4:i;for(r=0;r<d;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],l[c++]=t>>16&255,l[c++]=t>>8&255,l[c++]=255&t;2===u&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,l[c++]=255&t);1===u&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,l[c++]=t>>8&255,l[c++]=255&t);return l},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,s=[],i=16383,a=0,l=n-o;a<l;a+=i)s.push(u(e,a,a+i>l?l:a+i));1===o?(t=e[n-1],s.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],s.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return s.join("")};for(var r=[],n=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0;i<64;++i)r[i]=s[i],n[s.charCodeAt(i)]=i;function a(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function u(e,t,n){for(var o,s,i=[],a=t;a<n;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),i.push(r[(s=o)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return i.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},"./node_modules/bignumber.js/bignumber.js":function(e,t,r){var n;!function(){"use strict";var o,s=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,i=Math.ceil,a=Math.floor,u="[BigNumber Error] ",l=u+"Number primitive has more than 15 significant digits: ",c=1e14,d=14,p=9007199254740991,f=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],h=1e7,y=1e9;function m(e){var t=0|e;return e>0||e===t?t:t-1}function g(e){for(var t,r,n=1,o=e.length,s=e[0]+"";n<o;){for(t=e[n++]+"",r=d-t.length;r--;t="0"+t);s+=t}for(o=s.length;48===s.charCodeAt(--o););return s.slice(0,o+1||1)}function v(e,t){var r,n,o=e.c,s=t.c,i=e.s,a=t.s,u=e.e,l=t.e;if(!i||!a)return null;if(r=o&&!o[0],n=s&&!s[0],r||n)return r?n?0:-a:i;if(i!=a)return i;if(r=i<0,n=u==l,!o||!s)return n?0:!o^r?1:-1;if(!n)return u>l^r?1:-1;for(a=(u=o.length)<(l=s.length)?u:l,i=0;i<a;i++)if(o[i]!=s[i])return o[i]>s[i]^r?1:-1;return u==l?0:u>l^r?1:-1}function b(e,t,r,n){if(e<t||e>r||e!==a(e))throw Error(u+(n||"Argument")+("number"==typeof e?e<t||e>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function w(e){var t=e.c.length-1;return m(e.e/d)==t&&e.c[t]%2!=0}function S(e,t){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function _(e,t,r){var n,o;if(t<0){for(o=r+".";++t;o+=r);e=o+e}else if(++t>(n=e.length)){for(o=r,t-=n;--t;o+=r);e+=o}else t<n&&(e=e.slice(0,t)+"."+e.slice(t));return e}o=function e(t){var r,n,o,T,E,k,A,x,P,O,C=z.prototype={constructor:z,toString:null,valueOf:null},I=new z(1),R=20,B=4,j=-7,U=21,L=-1e7,N=1e7,M=!1,F=1,D=0,V={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:"\xa0",suffix:""},q="0123456789abcdefghijklmnopqrstuvwxyz",K=!0;function z(e,t){var r,i,u,c,f,h,y,m,g=this;if(!(g instanceof z))return new z(e,t);if(null==t){if(e&&!0===e._isBigNumber)return g.s=e.s,void(!e.c||e.e>N?g.c=g.e=null:e.e<L?g.c=[g.e=0]:(g.e=e.e,g.c=e.c.slice()));if((h="number"==typeof e)&&0*e==0){if(g.s=1/e<0?(e=-e,-1):1,e===~~e){for(c=0,f=e;f>=10;f/=10,c++);return void(c>N?g.c=g.e=null:(g.e=c,g.c=[e]))}m=String(e)}else{if(!s.test(m=String(e)))return o(g,m,h);g.s=45==m.charCodeAt(0)?(m=m.slice(1),-1):1}(c=m.indexOf("."))>-1&&(m=m.replace(".","")),(f=m.search(/e/i))>0?(c<0&&(c=f),c+=+m.slice(f+1),m=m.substring(0,f)):c<0&&(c=m.length)}else{if(b(t,2,q.length,"Base"),10==t&&K)return Q(g=new z(e),R+g.e+1,B);if(m=String(e),h="number"==typeof e){if(0*e!=0)return o(g,m,h,t);if(g.s=1/e<0?(m=m.slice(1),-1):1,z.DEBUG&&m.replace(/^0\.0*|\./,"").length>15)throw Error(l+e)}else g.s=45===m.charCodeAt(0)?(m=m.slice(1),-1):1;for(r=q.slice(0,t),c=f=0,y=m.length;f<y;f++)if(r.indexOf(i=m.charAt(f))<0){if("."==i){if(f>c){c=y;continue}}else if(!u&&(m==m.toUpperCase()&&(m=m.toLowerCase())||m==m.toLowerCase()&&(m=m.toUpperCase()))){u=!0,f=-1,c=0;continue}return o(g,String(e),h,t)}h=!1,(c=(m=n(m,t,10,g.s)).indexOf("."))>-1?m=m.replace(".",""):c=m.length}for(f=0;48===m.charCodeAt(f);f++);for(y=m.length;48===m.charCodeAt(--y););if(m=m.slice(f,++y)){if(y-=f,h&&z.DEBUG&&y>15&&(e>p||e!==a(e)))throw Error(l+g.s*e);if((c=c-f-1)>N)g.c=g.e=null;else if(c<L)g.c=[g.e=0];else{if(g.e=c,g.c=[],f=(c+1)%d,c<0&&(f+=d),f<y){for(f&&g.c.push(+m.slice(0,f)),y-=d;f<y;)g.c.push(+m.slice(f,f+=d));f=d-(m=m.slice(f)).length}else f-=y;for(;f--;m+="0");g.c.push(+m)}}else g.c=[g.e=0]}function H(e,t,r,n){var o,s,i,a,u;if(null==r?r=B:b(r,0,8),!e.c)return e.toString();if(o=e.c[0],i=e.e,null==t)u=g(e.c),u=1==n||2==n&&(i<=j||i>=U)?S(u,i):_(u,i,"0");else if(s=(e=Q(new z(e),t,r)).e,a=(u=g(e.c)).length,1==n||2==n&&(t<=s||s<=j)){for(;a<t;u+="0",a++);u=S(u,s)}else if(t-=i,u=_(u,s,"0"),s+1>a){if(--t>0)for(u+=".";t--;u+="0");}else if((t+=s-a)>0)for(s+1==a&&(u+=".");t--;u+="0");return e.s<0&&o?"-"+u:u}function X(e,t){for(var r,n,o=1,s=new z(e[0]);o<e.length;o++)(!(n=new z(e[o])).s||(r=v(s,n))===t||0===r&&s.s===t)&&(s=n);return s}function $(e,t,r){for(var n=1,o=t.length;!t[--o];t.pop());for(o=t[0];o>=10;o/=10,n++);return(r=n+r*d-1)>N?e.c=e.e=null:r<L?e.c=[e.e=0]:(e.e=r,e.c=t),e}function Q(e,t,r,n){var o,s,u,l,p,h,y,m=e.c,g=f;if(m){e:{for(o=1,l=m[0];l>=10;l/=10,o++);if((s=t-o)<0)s+=d,u=t,p=m[h=0],y=a(p/g[o-u-1]%10);else if((h=i((s+1)/d))>=m.length){if(!n)break e;for(;m.length<=h;m.push(0));p=y=0,o=1,u=(s%=d)-d+1}else{for(p=l=m[h],o=1;l>=10;l/=10,o++);y=(u=(s%=d)-d+o)<0?0:a(p/g[o-u-1]%10)}if(n=n||t<0||null!=m[h+1]||(u<0?p:p%g[o-u-1]),n=r<4?(y||n)&&(0==r||r==(e.s<0?3:2)):y>5||5==y&&(4==r||n||6==r&&(s>0?u>0?p/g[o-u]:0:m[h-1])%10&1||r==(e.s<0?8:7)),t<1||!m[0])return m.length=0,n?(t-=e.e+1,m[0]=g[(d-t%d)%d],e.e=-t||0):m[0]=e.e=0,e;if(0==s?(m.length=h,l=1,h--):(m.length=h+1,l=g[d-s],m[h]=u>0?a(p/g[o-u]%g[u])*l:0),n)for(;;){if(0==h){for(s=1,u=m[0];u>=10;u/=10,s++);for(u=m[0]+=l,l=1;u>=10;u/=10,l++);s!=l&&(e.e++,m[0]==c&&(m[0]=1));break}if(m[h]+=l,m[h]!=c)break;m[h--]=0,l=1}for(s=m.length;0===m[--s];m.pop());}e.e>N?e.c=e.e=null:e.e<L&&(e.c=[e.e=0])}return e}function W(e){var t,r=e.e;return null===r?e.toString():(t=g(e.c),t=r<=j||r>=U?S(t,r):_(t,r,"0"),e.s<0?"-"+t:t)}return z.clone=e,z.ROUND_UP=0,z.ROUND_DOWN=1,z.ROUND_CEIL=2,z.ROUND_FLOOR=3,z.ROUND_HALF_UP=4,z.ROUND_HALF_DOWN=5,z.ROUND_HALF_EVEN=6,z.ROUND_HALF_CEIL=7,z.ROUND_HALF_FLOOR=8,z.EUCLID=9,z.config=z.set=function(e){var t,r;if(null!=e){if("object"!=typeof e)throw Error(u+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(b(r=e[t],0,y,t),R=r),e.hasOwnProperty(t="ROUNDING_MODE")&&(b(r=e[t],0,8,t),B=r),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((r=e[t])&&r.pop?(b(r[0],-y,0,t),b(r[1],0,y,t),j=r[0],U=r[1]):(b(r,-y,y,t),j=-(U=r<0?-r:r))),e.hasOwnProperty(t="RANGE"))if((r=e[t])&&r.pop)b(r[0],-y,-1,t),b(r[1],1,y,t),L=r[0],N=r[1];else{if(b(r,-y,y,t),!r)throw Error(u+t+" cannot be zero: "+r);L=-(N=r<0?-r:r)}if(e.hasOwnProperty(t="CRYPTO")){if((r=e[t])!==!!r)throw Error(u+t+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw M=!r,Error(u+"crypto unavailable");M=r}else M=r}if(e.hasOwnProperty(t="MODULO_MODE")&&(b(r=e[t],0,9,t),F=r),e.hasOwnProperty(t="POW_PRECISION")&&(b(r=e[t],0,y,t),D=r),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(r=e[t]))throw Error(u+t+" not an object: "+r);V=r}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(r=e[t])||/^.?$|[+\-.\s]|(.).*\1/.test(r))throw Error(u+t+" invalid: "+r);K="0123456789"==r.slice(0,10),q=r}}return{DECIMAL_PLACES:R,ROUNDING_MODE:B,EXPONENTIAL_AT:[j,U],RANGE:[L,N],CRYPTO:M,MODULO_MODE:F,POW_PRECISION:D,FORMAT:V,ALPHABET:q}},z.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!z.DEBUG)return!0;var t,r,n=e.c,o=e.e,s=e.s;e:if("[object Array]"=={}.toString.call(n)){if((1===s||-1===s)&&o>=-y&&o<=y&&o===a(o)){if(0===n[0]){if(0===o&&1===n.length)return!0;break e}if((t=(o+1)%d)<1&&(t+=d),String(n[0]).length==t){for(t=0;t<n.length;t++)if((r=n[t])<0||r>=c||r!==a(r))break e;if(0!==r)return!0}}}else if(null===n&&null===o&&(null===s||1===s||-1===s))return!0;throw Error(u+"Invalid BigNumber: "+e)},z.maximum=z.max=function(){return X(arguments,-1)},z.minimum=z.min=function(){return X(arguments,1)},z.random=(T=9007199254740992,E=Math.random()*T&2097151?function(){return a(Math.random()*T)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,r,n,o,s,l=0,c=[],p=new z(I);if(null==e?e=R:b(e,0,y),o=i(e/d),M)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(o*=2));l<o;)(s=131072*t[l]+(t[l+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),t[l]=r[0],t[l+1]=r[1]):(c.push(s%1e14),l+=2);l=o/2}else{if(!crypto.randomBytes)throw M=!1,Error(u+"crypto unavailable");for(t=crypto.randomBytes(o*=7);l<o;)(s=281474976710656*(31&t[l])+1099511627776*t[l+1]+4294967296*t[l+2]+16777216*t[l+3]+(t[l+4]<<16)+(t[l+5]<<8)+t[l+6])>=9e15?crypto.randomBytes(7).copy(t,l):(c.push(s%1e14),l+=7);l=o/7}if(!M)for(;l<o;)(s=E())<9e15&&(c[l++]=s%1e14);for(o=c[--l],e%=d,o&&e&&(s=f[d-e],c[l]=a(o/s)*s);0===c[l];c.pop(),l--);if(l<0)c=[n=0];else{for(n=-1;0===c[0];c.splice(0,1),n-=d);for(l=1,s=c[0];s>=10;s/=10,l++);l<d&&(n-=d-l)}return p.e=n,p.c=c,p}),z.sum=function(){for(var e=1,t=arguments,r=new z(t[0]);e<t.length;)r=r.plus(t[e++]);return r},n=function(){var e="0123456789";function t(e,t,r,n){for(var o,s,i=[0],a=0,u=e.length;a<u;){for(s=i.length;s--;i[s]*=t);for(i[0]+=n.indexOf(e.charAt(a++)),o=0;o<i.length;o++)i[o]>r-1&&(null==i[o+1]&&(i[o+1]=0),i[o+1]+=i[o]/r|0,i[o]%=r)}return i.reverse()}return function(n,o,s,i,a){var u,l,c,d,p,f,h,y,m=n.indexOf("."),v=R,b=B;for(m>=0&&(d=D,D=0,n=n.replace(".",""),f=(y=new z(o)).pow(n.length-m),D=d,y.c=t(_(g(f.c),f.e,"0"),10,s,e),y.e=y.c.length),c=d=(h=t(n,o,s,a?(u=q,e):(u=e,q))).length;0==h[--d];h.pop());if(!h[0])return u.charAt(0);if(m<0?--c:(f.c=h,f.e=c,f.s=i,h=(f=r(f,y,v,b,s)).c,p=f.r,c=f.e),m=h[l=c+v+1],d=s/2,p=p||l<0||null!=h[l+1],p=b<4?(null!=m||p)&&(0==b||b==(f.s<0?3:2)):m>d||m==d&&(4==b||p||6==b&&1&h[l-1]||b==(f.s<0?8:7)),l<1||!h[0])n=p?_(u.charAt(1),-v,u.charAt(0)):u.charAt(0);else{if(h.length=l,p)for(--s;++h[--l]>s;)h[l]=0,l||(++c,h=[1].concat(h));for(d=h.length;!h[--d];);for(m=0,n="";m<=d;n+=u.charAt(h[m++]));n=_(n,c,u.charAt(0))}return n}}(),r=function(){function e(e,t,r){var n,o,s,i,a=0,u=e.length,l=t%h,c=t/h|0;for(e=e.slice();u--;)a=((o=l*(s=e[u]%h)+(n=c*s+(i=e[u]/h|0)*l)%h*h+a)/r|0)+(n/h|0)+c*i,e[u]=o%r;return a&&(e=[a].concat(e)),e}function t(e,t,r,n){var o,s;if(r!=n)s=r>n?1:-1;else for(o=s=0;o<r;o++)if(e[o]!=t[o]){s=e[o]>t[o]?1:-1;break}return s}function r(e,t,r,n){for(var o=0;r--;)e[r]-=o,o=e[r]<t[r]?1:0,e[r]=o*n+e[r]-t[r];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(n,o,s,i,u){var l,p,f,h,y,g,v,b,w,S,_,T,E,k,A,x,P,O=n.s==o.s?1:-1,C=n.c,I=o.c;if(!(C&&C[0]&&I&&I[0]))return new z(n.s&&o.s&&(C?!I||C[0]!=I[0]:I)?C&&0==C[0]||!I?0*O:O/0:NaN);for(w=(b=new z(O)).c=[],O=s+(p=n.e-o.e)+1,u||(u=c,p=m(n.e/d)-m(o.e/d),O=O/d|0),f=0;I[f]==(C[f]||0);f++);if(I[f]>(C[f]||0)&&p--,O<0)w.push(1),h=!0;else{for(k=C.length,x=I.length,f=0,O+=2,(y=a(u/(I[0]+1)))>1&&(I=e(I,y,u),C=e(C,y,u),x=I.length,k=C.length),E=x,_=(S=C.slice(0,x)).length;_<x;S[_++]=0);P=I.slice(),P=[0].concat(P),A=I[0],I[1]>=u/2&&A++;do{if(y=0,(l=t(I,S,x,_))<0){if(T=S[0],x!=_&&(T=T*u+(S[1]||0)),(y=a(T/A))>1)for(y>=u&&(y=u-1),v=(g=e(I,y,u)).length,_=S.length;1==t(g,S,v,_);)y--,r(g,x<v?P:I,v,u),v=g.length,l=1;else 0==y&&(l=y=1),v=(g=I.slice()).length;if(v<_&&(g=[0].concat(g)),r(S,g,_,u),_=S.length,-1==l)for(;t(I,S,x,_)<1;)y++,r(S,x<_?P:I,_,u),_=S.length}else 0===l&&(y++,S=[0]);w[f++]=y,S[0]?S[_++]=C[E]||0:(S=[C[E]],_=1)}while((E++<k||null!=S[0])&&O--);h=null!=S[0],w[0]||w.splice(0,1)}if(u==c){for(f=1,O=w[0];O>=10;O/=10,f++);Q(b,s+(b.e=f+p*d-1)+1,i,h)}else b.e=p,b.r=+h;return b}}(),k=/^(-?)0([xbo])(?=\w[\w.]*$)/i,A=/^([^.]+)\.$/,x=/^\.([^.]+)$/,P=/^-?(Infinity|NaN)$/,O=/^\s*\+(?=[\w.])|^\s+|\s+$/g,o=function(e,t,r,n){var o,s=r?t:t.replace(O,"");if(P.test(s))e.s=isNaN(s)?null:s<0?-1:1;else{if(!r&&(s=s.replace(k,(function(e,t,r){return o="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=o?e:t})),n&&(o=n,s=s.replace(A,"$1").replace(x,"0.$1")),t!=s))return new z(s,o);if(z.DEBUG)throw Error(u+"Not a"+(n?" base "+n:"")+" number: "+t);e.s=null}e.c=e.e=null},C.absoluteValue=C.abs=function(){var e=new z(this);return e.s<0&&(e.s=1),e},C.comparedTo=function(e,t){return v(this,new z(e,t))},C.decimalPlaces=C.dp=function(e,t){var r,n,o,s=this;if(null!=e)return b(e,0,y),null==t?t=B:b(t,0,8),Q(new z(s),e+s.e+1,t);if(!(r=s.c))return null;if(n=((o=r.length-1)-m(this.e/d))*d,o=r[o])for(;o%10==0;o/=10,n--);return n<0&&(n=0),n},C.dividedBy=C.div=function(e,t){return r(this,new z(e,t),R,B)},C.dividedToIntegerBy=C.idiv=function(e,t){return r(this,new z(e,t),0,1)},C.exponentiatedBy=C.pow=function(e,t){var r,n,o,s,l,c,p,f,h=this;if((e=new z(e)).c&&!e.isInteger())throw Error(u+"Exponent not an integer: "+W(e));if(null!=t&&(t=new z(t)),l=e.e>14,!h.c||!h.c[0]||1==h.c[0]&&!h.e&&1==h.c.length||!e.c||!e.c[0])return f=new z(Math.pow(+W(h),l?e.s*(2-w(e)):+W(e))),t?f.mod(t):f;if(c=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new z(NaN);(n=!c&&h.isInteger()&&t.isInteger())&&(h=h.mod(t))}else{if(e.e>9&&(h.e>0||h.e<-1||(0==h.e?h.c[0]>1||l&&h.c[1]>=24e7:h.c[0]<8e13||l&&h.c[0]<=9999975e7)))return s=h.s<0&&w(e)?-0:0,h.e>-1&&(s=1/s),new z(c?1/s:s);D&&(s=i(D/d+2))}for(l?(r=new z(.5),c&&(e.s=1),p=w(e)):p=(o=Math.abs(+W(e)))%2,f=new z(I);;){if(p){if(!(f=f.times(h)).c)break;s?f.c.length>s&&(f.c.length=s):n&&(f=f.mod(t))}if(o){if(0===(o=a(o/2)))break;p=o%2}else if(Q(e=e.times(r),e.e+1,1),e.e>14)p=w(e);else{if(0===(o=+W(e)))break;p=o%2}h=h.times(h),s?h.c&&h.c.length>s&&(h.c.length=s):n&&(h=h.mod(t))}return n?f:(c&&(f=I.div(f)),t?f.mod(t):s?Q(f,D,B,undefined):f)},C.integerValue=function(e){var t=new z(this);return null==e?e=B:b(e,0,8),Q(t,t.e+1,e)},C.isEqualTo=C.eq=function(e,t){return 0===v(this,new z(e,t))},C.isFinite=function(){return!!this.c},C.isGreaterThan=C.gt=function(e,t){return v(this,new z(e,t))>0},C.isGreaterThanOrEqualTo=C.gte=function(e,t){return 1===(t=v(this,new z(e,t)))||0===t},C.isInteger=function(){return!!this.c&&m(this.e/d)>this.c.length-2},C.isLessThan=C.lt=function(e,t){return v(this,new z(e,t))<0},C.isLessThanOrEqualTo=C.lte=function(e,t){return-1===(t=v(this,new z(e,t)))||0===t},C.isNaN=function(){return!this.s},C.isNegative=function(){return this.s<0},C.isPositive=function(){return this.s>0},C.isZero=function(){return!!this.c&&0==this.c[0]},C.minus=function(e,t){var r,n,o,s,i=this,a=i.s;if(t=(e=new z(e,t)).s,!a||!t)return new z(NaN);if(a!=t)return e.s=-t,i.plus(e);var u=i.e/d,l=e.e/d,p=i.c,f=e.c;if(!u||!l){if(!p||!f)return p?(e.s=-t,e):new z(f?i:NaN);if(!p[0]||!f[0])return f[0]?(e.s=-t,e):new z(p[0]?i:3==B?-0:0)}if(u=m(u),l=m(l),p=p.slice(),a=u-l){for((s=a<0)?(a=-a,o=p):(l=u,o=f),o.reverse(),t=a;t--;o.push(0));o.reverse()}else for(n=(s=(a=p.length)<(t=f.length))?a:t,a=t=0;t<n;t++)if(p[t]!=f[t]){s=p[t]<f[t];break}if(s&&(o=p,p=f,f=o,e.s=-e.s),(t=(n=f.length)-(r=p.length))>0)for(;t--;p[r++]=0);for(t=c-1;n>a;){if(p[--n]<f[n]){for(r=n;r&&!p[--r];p[r]=t);--p[r],p[n]+=c}p[n]-=f[n]}for(;0==p[0];p.splice(0,1),--l);return p[0]?$(e,p,l):(e.s=3==B?-1:1,e.c=[e.e=0],e)},C.modulo=C.mod=function(e,t){var n,o,s=this;return e=new z(e,t),!s.c||!e.s||e.c&&!e.c[0]?new z(NaN):!e.c||s.c&&!s.c[0]?new z(s):(9==F?(o=e.s,e.s=1,n=r(s,e,0,3),e.s=o,n.s*=o):n=r(s,e,0,F),(e=s.minus(n.times(e))).c[0]||1!=F||(e.s=s.s),e)},C.multipliedBy=C.times=function(e,t){var r,n,o,s,i,a,u,l,p,f,y,g,v,b,w,S=this,_=S.c,T=(e=new z(e,t)).c;if(!(_&&T&&_[0]&&T[0]))return!S.s||!e.s||_&&!_[0]&&!T||T&&!T[0]&&!_?e.c=e.e=e.s=null:(e.s*=S.s,_&&T?(e.c=[0],e.e=0):e.c=e.e=null),e;for(n=m(S.e/d)+m(e.e/d),e.s*=S.s,(u=_.length)<(f=T.length)&&(v=_,_=T,T=v,o=u,u=f,f=o),o=u+f,v=[];o--;v.push(0));for(b=c,w=h,o=f;--o>=0;){for(r=0,y=T[o]%w,g=T[o]/w|0,s=o+(i=u);s>o;)r=((l=y*(l=_[--i]%w)+(a=g*l+(p=_[i]/w|0)*y)%w*w+v[s]+r)/b|0)+(a/w|0)+g*p,v[s--]=l%b;v[s]=r}return r?++n:v.splice(0,1),$(e,v,n)},C.negated=function(){var e=new z(this);return e.s=-e.s||null,e},C.plus=function(e,t){var r,n=this,o=n.s;if(t=(e=new z(e,t)).s,!o||!t)return new z(NaN);if(o!=t)return e.s=-t,n.minus(e);var s=n.e/d,i=e.e/d,a=n.c,u=e.c;if(!s||!i){if(!a||!u)return new z(o/0);if(!a[0]||!u[0])return u[0]?e:new z(a[0]?n:0*o)}if(s=m(s),i=m(i),a=a.slice(),o=s-i){for(o>0?(i=s,r=u):(o=-o,r=a),r.reverse();o--;r.push(0));r.reverse()}for((o=a.length)-(t=u.length)<0&&(r=u,u=a,a=r,t=o),o=0;t;)o=(a[--t]=a[t]+u[t]+o)/c|0,a[t]=c===a[t]?0:a[t]%c;return o&&(a=[o].concat(a),++i),$(e,a,i)},C.precision=C.sd=function(e,t){var r,n,o,s=this;if(null!=e&&e!==!!e)return b(e,1,y),null==t?t=B:b(t,0,8),Q(new z(s),e,t);if(!(r=s.c))return null;if(n=(o=r.length-1)*d+1,o=r[o]){for(;o%10==0;o/=10,n--);for(o=r[0];o>=10;o/=10,n++);}return e&&s.e+1>n&&(n=s.e+1),n},C.shiftedBy=function(e){return b(e,-9007199254740991,p),this.times("1e"+e)},C.squareRoot=C.sqrt=function(){var e,t,n,o,s,i=this,a=i.c,u=i.s,l=i.e,c=R+4,d=new z("0.5");if(1!==u||!a||!a[0])return new z(!u||u<0&&(!a||a[0])?NaN:a?i:1/0);if(0==(u=Math.sqrt(+W(i)))||u==1/0?(((t=g(a)).length+l)%2==0&&(t+="0"),u=Math.sqrt(+t),l=m((l+1)/2)-(l<0||l%2),n=new z(t=u==1/0?"5e"+l:(t=u.toExponential()).slice(0,t.indexOf("e")+1)+l)):n=new z(u+""),n.c[0])for((u=(l=n.e)+c)<3&&(u=0);;)if(s=n,n=d.times(s.plus(r(i,s,c,1))),g(s.c).slice(0,u)===(t=g(n.c)).slice(0,u)){if(n.e<l&&--u,"9999"!=(t=t.slice(u-3,u+1))&&(o||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(Q(n,n.e+R+2,1),e=!n.times(n).eq(i));break}if(!o&&(Q(s,s.e+R+2,0),s.times(s).eq(i))){n=s;break}c+=4,u+=4,o=1}return Q(n,n.e+R+1,B,e)},C.toExponential=function(e,t){return null!=e&&(b(e,0,y),e++),H(this,e,t,1)},C.toFixed=function(e,t){return null!=e&&(b(e,0,y),e=e+this.e+1),H(this,e,t)},C.toFormat=function(e,t,r){var n,o=this;if(null==r)null!=e&&t&&"object"==typeof t?(r=t,t=null):e&&"object"==typeof e?(r=e,e=t=null):r=V;else if("object"!=typeof r)throw Error(u+"Argument not an object: "+r);if(n=o.toFixed(e,t),o.c){var s,i=n.split("."),a=+r.groupSize,l=+r.secondaryGroupSize,c=r.groupSeparator||"",d=i[0],p=i[1],f=o.s<0,h=f?d.slice(1):d,y=h.length;if(l&&(s=a,a=l,l=s,y-=s),a>0&&y>0){for(s=y%a||a,d=h.substr(0,s);s<y;s+=a)d+=c+h.substr(s,a);l>0&&(d+=c+h.slice(s)),f&&(d="-"+d)}n=p?d+(r.decimalSeparator||"")+((l=+r.fractionGroupSize)?p.replace(new RegExp("\\d{"+l+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):p):d}return(r.prefix||"")+n+(r.suffix||"")},C.toFraction=function(e){var t,n,o,s,i,a,l,c,p,h,y,m,v=this,b=v.c;if(null!=e&&(!(l=new z(e)).isInteger()&&(l.c||1!==l.s)||l.lt(I)))throw Error(u+"Argument "+(l.isInteger()?"out of range: ":"not an integer: ")+W(l));if(!b)return new z(v);for(t=new z(I),p=n=new z(I),o=c=new z(I),m=g(b),i=t.e=m.length-v.e-1,t.c[0]=f[(a=i%d)<0?d+a:a],e=!e||l.comparedTo(t)>0?i>0?t:p:l,a=N,N=1/0,l=new z(m),c.c[0]=0;h=r(l,t,0,1),1!=(s=n.plus(h.times(o))).comparedTo(e);)n=o,o=s,p=c.plus(h.times(s=p)),c=s,t=l.minus(h.times(s=t)),l=s;return s=r(e.minus(n),o,0,1),c=c.plus(s.times(p)),n=n.plus(s.times(o)),c.s=p.s=v.s,y=r(p,o,i*=2,B).minus(v).abs().comparedTo(r(c,n,i,B).minus(v).abs())<1?[p,o]:[c,n],N=a,y},C.toNumber=function(){return+W(this)},C.toPrecision=function(e,t){return null!=e&&b(e,1,y),H(this,e,t,2)},C.toString=function(e){var t,r=this,o=r.s,s=r.e;return null===s?o?(t="Infinity",o<0&&(t="-"+t)):t="NaN":(null==e?t=s<=j||s>=U?S(g(r.c),s):_(g(r.c),s,"0"):10===e&&K?t=_(g((r=Q(new z(r),R+s+1,B)).c),r.e,"0"):(b(e,2,q.length,"Base"),t=n(_(g(r.c),s,"0"),10,e,o,!0)),o<0&&r.c[0]&&(t="-"+t)),t},C.valueOf=C.toJSON=function(){return W(this)},C._isBigNumber=!0,null!=t&&z.set(t),z}(),o.default=o.BigNumber=o,void 0===(n=function(){return o}.call(t,r,t,e))||(e.exports=n)}()},"./node_modules/buffer/index.js":(e,t,r)=>{"use strict";const n=r("./node_modules/base64-js/index.js"),o=r("./node_modules/ieee754/index.js"),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50;const i=2147483647;function a(e){if(e>i)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,u.prototype),t}function u(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return d(e)}return l(e,t,r)}function l(e,t,r){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!u.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|y(e,t);let n=a(r);const o=n.write(e,t);o!==r&&(n=n.slice(0,o));return n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(W(e,Uint8Array)){const t=new Uint8Array(e);return f(t.buffer,t.byteOffset,t.byteLength)}return p(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(W(e,ArrayBuffer)||e&&W(e.buffer,ArrayBuffer))return f(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(W(e,SharedArrayBuffer)||e&&W(e.buffer,SharedArrayBuffer)))return f(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return u.from(n,t,r);const o=function(e){if(u.isBuffer(e)){const t=0|h(e.length),r=a(t);return 0===r.length||e.copy(r,0,0,t),r}if(void 0!==e.length)return"number"!=typeof e.length||G(e.length)?a(0):p(e);if("Buffer"===e.type&&Array.isArray(e.data))return p(e.data)}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return u.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function d(e){return c(e),a(e<0?0:0|h(e))}function p(e){const t=e.length<0?0:0|h(e.length),r=a(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function f(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,u.prototype),n}function h(e){if(e>=i)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i.toString(16)+" bytes");return 0|e}function y(e,t){if(u.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||W(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let o=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return X(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return $(e).length;default:if(o)return n?-1:X(e).length;t=(""+t).toLowerCase(),o=!0}}function m(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return C(this,t,r);case"utf8":case"utf-8":return A(this,t,r);case"ascii":return P(this,t,r);case"latin1":case"binary":return O(this,t,r);case"base64":return k(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function g(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function v(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),G(r=+r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:b(e,t,r,n,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):b(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function b(e,t,r,n,o){let s,i=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;i=2,a/=2,u/=2,r/=2}function l(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(o){let n=-1;for(s=r;s<a;s++)if(l(e,s)===l(t,-1===n?0:s-n)){if(-1===n&&(n=s),s-n+1===u)return n*i}else-1!==n&&(s-=s-n),n=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){let r=!0;for(let n=0;n<u;n++)if(l(e,s+n)!==l(t,n)){r=!1;break}if(r)return s}return-1}function w(e,t,r,n){r=Number(r)||0;const o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;const s=t.length;let i;for(n>s/2&&(n=s/2),i=0;i<n;++i){const n=parseInt(t.substr(2*i,2),16);if(G(n))return i;e[r+i]=n}return i}function S(e,t,r,n){return Q(X(t,e.length-r),e,r,n)}function _(e,t,r,n){return Q(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function T(e,t,r,n){return Q($(t),e,r,n)}function E(e,t,r,n){return Q(function(e,t){let r,n,o;const s=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)r=e.charCodeAt(i),n=r>>8,o=r%256,s.push(o),s.push(n);return s}(t,e.length-r),e,r,n)}function k(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function A(e,t,r){r=Math.min(e.length,r);const n=[];let o=t;for(;o<r;){const t=e[o];let s=null,i=t>239?4:t>223?3:t>191?2:1;if(o+i<=r){let r,n,a,u;switch(i){case 1:t<128&&(s=t);break;case 2:r=e[o+1],128==(192&r)&&(u=(31&t)<<6|63&r,u>127&&(s=u));break;case 3:r=e[o+1],n=e[o+2],128==(192&r)&&128==(192&n)&&(u=(15&t)<<12|(63&r)<<6|63&n,u>2047&&(u<55296||u>57343)&&(s=u));break;case 4:r=e[o+1],n=e[o+2],a=e[o+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(u=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,u>65535&&u<1114112&&(s=u))}}null===s?(s=65533,i=1):s>65535&&(s-=65536,n.push(s>>>10&1023|55296),s=56320|1023&s),n.push(s),o+=i}return function(e){const t=e.length;if(t<=x)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=x));return r}(n)}t.kMaxLength=i,u.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),u.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(u.prototype,"parent",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.buffer}}),Object.defineProperty(u.prototype,"offset",{enumerable:!0,get:function(){if(u.isBuffer(this))return this.byteOffset}}),u.poolSize=8192,u.from=function(e,t,r){return l(e,t,r)},Object.setPrototypeOf(u.prototype,Uint8Array.prototype),Object.setPrototypeOf(u,Uint8Array),u.alloc=function(e,t,r){return function(e,t,r){return c(e),e<=0?a(e):void 0!==t?"string"==typeof r?a(e).fill(t,r):a(e).fill(t):a(e)}(e,t,r)},u.allocUnsafe=function(e){return d(e)},u.allocUnsafeSlow=function(e){return d(e)},u.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==u.prototype},u.compare=function(e,t){if(W(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),W(t,Uint8Array)&&(t=u.from(t,t.offset,t.byteLength)),!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let o=0,s=Math.min(r,n);o<s;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=u.allocUnsafe(t);let o=0;for(r=0;r<e.length;++r){let t=e[r];if(W(t,Uint8Array))o+t.length>n.length?(u.isBuffer(t)||(t=u.from(t)),t.copy(n,o)):Uint8Array.prototype.set.call(n,t,o);else{if(!u.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,o)}o+=t.length}return n},u.byteLength=y,u.prototype._isBuffer=!0,u.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)g(this,t,t+1);return this},u.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},u.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},u.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?A(this,0,e):m.apply(this,arguments)},u.prototype.toLocaleString=u.prototype.toString,u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){let e="";const r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},s&&(u.prototype[s]=u.prototype.inspect),u.prototype.compare=function(e,t,r,n,o){if(W(e,Uint8Array)&&(e=u.from(e,e.offset,e.byteLength)),!u.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;let s=(o>>>=0)-(n>>>=0),i=(r>>>=0)-(t>>>=0);const a=Math.min(s,i),l=this.slice(n,o),c=e.slice(t,r);for(let e=0;e<a;++e)if(l[e]!==c[e]){s=l[e],i=c[e];break}return s<i?-1:i<s?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return v(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return v(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let s=!1;for(;;)switch(n){case"hex":return w(this,e,t,r);case"utf8":case"utf-8":return S(this,e,t,r);case"ascii":case"latin1":case"binary":return _(this,e,t,r);case"base64":return T(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,r);default:if(s)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const x=4096;function P(e,t,r){let n="";r=Math.min(e.length,r);for(let o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function O(e,t,r){let n="";r=Math.min(e.length,r);for(let o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function C(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let o="";for(let n=t;n<r;++n)o+=Y[e[n]];return o}function I(e,t,r){const n=e.slice(t,r);let o="";for(let e=0;e<n.length-1;e+=2)o+=String.fromCharCode(n[e]+256*n[e+1]);return o}function R(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function B(e,t,r,n,o,s){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<s)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function j(e,t,r,n,o){q(t,n,o,e,r,7);let s=Number(t&BigInt(4294967295));e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,r}function U(e,t,r,n,o){q(t,n,o,e,r,7);let s=Number(t&BigInt(4294967295));e[r+7]=s,s>>=8,e[r+6]=s,s>>=8,e[r+5]=s,s>>=8,e[r+4]=s;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=i,i>>=8,e[r+2]=i,i>>=8,e[r+1]=i,i>>=8,e[r]=i,r+8}function L(e,t,r,n,o,s){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function N(e,t,r,n,s){return t=+t,r>>>=0,s||L(e,0,r,4),o.write(e,t,r,n,23,4),r+4}function M(e,t,r,n,s){return t=+t,r>>>=0,s||L(e,0,r,8),o.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,u.prototype),n},u.prototype.readUintLE=u.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=this[e],o=1,s=0;for(;++s<t&&(o*=256);)n+=this[e+s]*o;return n},u.prototype.readUintBE=u.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=this[e+--t],o=1;for(;t>0&&(o*=256);)n+=this[e+--t]*o;return n},u.prototype.readUint8=u.prototype.readUInt8=function(e,t){return e>>>=0,t||R(e,1,this.length),this[e]},u.prototype.readUint16LE=u.prototype.readUInt16LE=function(e,t){return e>>>=0,t||R(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUint16BE=u.prototype.readUInt16BE=function(e,t){return e>>>=0,t||R(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUint32LE=u.prototype.readUInt32LE=function(e,t){return e>>>=0,t||R(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUint32BE=u.prototype.readUInt32BE=function(e,t){return e>>>=0,t||R(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readBigUInt64LE=J((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,o=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(o)<<BigInt(32))})),u.prototype.readBigUInt64BE=J((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],o=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(o)})),u.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=this[e],o=1,s=0;for(;++s<t&&(o*=256);)n+=this[e+s]*o;return o*=128,n>=o&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||R(e,t,this.length);let n=t,o=1,s=this[e+--n];for(;n>0&&(o*=256);)s+=this[e+--n]*o;return o*=128,s>=o&&(s-=Math.pow(2,8*t)),s},u.prototype.readInt8=function(e,t){return e>>>=0,t||R(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){e>>>=0,t||R(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){e>>>=0,t||R(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return e>>>=0,t||R(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return e>>>=0,t||R(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readBigInt64LE=J((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),u.prototype.readBigInt64BE=J((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||z(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),u.prototype.readFloatLE=function(e,t){return e>>>=0,t||R(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return e>>>=0,t||R(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return e>>>=0,t||R(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return e>>>=0,t||R(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUintLE=u.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){B(this,e,t,r,Math.pow(2,8*r)-1,0)}let o=1,s=0;for(this[t]=255&e;++s<r&&(o*=256);)this[t+s]=e/o&255;return t+r},u.prototype.writeUintBE=u.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){B(this,e,t,r,Math.pow(2,8*r)-1,0)}let o=r-1,s=1;for(this[t+o]=255&e;--o>=0&&(s*=256);)this[t+o]=e/s&255;return t+r},u.prototype.writeUint8=u.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,1,255,0),this[t]=255&e,t+1},u.prototype.writeUint16LE=u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeUint16BE=u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeUint32LE=u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},u.prototype.writeUint32BE=u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigUInt64LE=J((function(e,t=0){return j(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeBigUInt64BE=J((function(e,t=0){return U(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);B(this,e,t,r,n-1,-n)}let o=0,s=1,i=0;for(this[t]=255&e;++o<r&&(s*=256);)e<0&&0===i&&0!==this[t+o-1]&&(i=1),this[t+o]=(e/s|0)-i&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);B(this,e,t,r,n-1,-n)}let o=r-1,s=1,i=0;for(this[t+o]=255&e;--o>=0&&(s*=256);)e<0&&0===i&&0!==this[t+o+1]&&(i=1),this[t+o]=(e/s|0)-i&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||B(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},u.prototype.writeBigInt64LE=J((function(e,t=0){return j(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeBigInt64BE=J((function(e,t=0){return U(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),u.prototype.writeFloatLE=function(e,t,r){return N(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return N(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return M(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return M(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(!u.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const o=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),o},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{const s=u.isBuffer(e)?e:u.from(e,n),i=s.length;if(0===i)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<r-t;++o)this[o+t]=s[o%i]}return this};const F={};function D(e,t,r){F[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function V(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function q(e,t,r,n,o,s){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let o;throw o=s>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(s+1)}${n}`:`>= -(2${n} ** ${8*(s+1)-1}${n}) and < 2 ** ${8*(s+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new F.ERR_OUT_OF_RANGE("value",o,e)}!function(e,t,r){K(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||z(t,e.length-(r+1))}(n,o,s)}function K(e,t){if("number"!=typeof e)throw new F.ERR_INVALID_ARG_TYPE(t,"number",e)}function z(e,t,r){if(Math.floor(e)!==e)throw K(e,r),new F.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new F.ERR_BUFFER_OUT_OF_BOUNDS;throw new F.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}D("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),D("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),D("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,o=r;return Number.isInteger(r)&&Math.abs(r)>2**32?o=V(String(r)):"bigint"==typeof r&&(o=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(o=V(o)),o+="n"),n+=` It must be ${t}. Received ${o}`,n}),RangeError);const H=/[^+/0-9A-Za-z-_]/g;function X(e,t){let r;t=t||1/0;const n=e.length;let o=null;const s=[];for(let i=0;i<n;++i){if(r=e.charCodeAt(i),r>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(i+1===n){(t-=3)>-1&&s.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&s.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&s.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;s.push(r)}else if(r<2048){if((t-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function $(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(H,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Q(e,t,r,n){let o;for(o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}function W(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function G(e){return e!=e}const Y=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let o=0;o<16;++o)t[n+o]=e[r]+e[o]}return t}();function J(e){return"undefined"==typeof BigInt?Z:e}function Z(){throw new Error("BigInt not supported")}},"./node_modules/ieee754/index.js":(e,t)=>{t.read=function(e,t,r,n,o){var s,i,a=8*o-n-1,u=(1<<a)-1,l=u>>1,c=-7,d=r?o-1:0,p=r?-1:1,f=e[t+d];for(d+=p,s=f&(1<<-c)-1,f>>=-c,c+=a;c>0;s=256*s+e[t+d],d+=p,c-=8);for(i=s&(1<<-c)-1,s>>=-c,c+=n;c>0;i=256*i+e[t+d],d+=p,c-=8);if(0===s)s=1-l;else{if(s===u)return i?NaN:1/0*(f?-1:1);i+=Math.pow(2,n),s-=l}return(f?-1:1)*i*Math.pow(2,s-n)},t.write=function(e,t,r,n,o,s){var i,a,u,l=8*s-o-1,c=(1<<l)-1,d=c>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:s-1,h=n?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,i=c):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+d>=1?p/u:p*Math.pow(2,1-d))*u>=2&&(i++,u/=2),i+d>=c?(a=0,i=c):i+d>=1?(a=(t*u-1)*Math.pow(2,o),i+=d):(a=t*Math.pow(2,d-1)*Math.pow(2,o),i=0));o>=8;e[r+f]=255&a,f+=h,a/=256,o-=8);for(i=i<<o|a,l+=o;l>0;e[r+f]=255&i,f+=h,i/=256,l-=8);e[r+f-h]|=128*y}},"./node_modules/inherits/inherits_browser.js":e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},"./node_modules/randombytes/browser.js":(e,t,r)=>{"use strict";var n=65536,o=4294967295;var s=r("./node_modules/safe-buffer/index.js").Buffer,i=r.g.crypto||r.g.msCrypto;i&&i.getRandomValues?e.exports=function(e,t){if(e>o)throw new RangeError("requested too many random bytes");var r=s.allocUnsafe(e);if(e>0)if(e>n)for(var a=0;a<e;a+=n)i.getRandomValues(r.slice(a,a+n));else i.getRandomValues(r);if("function"==typeof t)return process.nextTick((function(){t(null,r)}));return r}:e.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}},"./node_modules/safe-buffer/index.js":(e,t,r)=>{var n=r("./node_modules/buffer/index.js"),o=n.Buffer;function s(e,t){for(var r in e)t[r]=e[r]}function i(e,t,r){return o(e,t,r)}o.from&&o.alloc&&o.allocUnsafe&&o.allocUnsafeSlow?e.exports=n:(s(n,t),t.Buffer=i),i.prototype=Object.create(o.prototype),s(o,i),i.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return o(e,t,r)},i.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=o(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},i.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return o(e)},i.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},"./node_modules/sha.js/hash.js":(e,t,r)=>{var n=r("./node_modules/safe-buffer/index.js").Buffer;function o(e,t){this._block=n.alloc(e),this._finalSize=t,this._blockSize=e,this._len=0}o.prototype.update=function(e,t){"string"==typeof e&&(t=t||"utf8",e=n.from(e,t));for(var r=this._block,o=this._blockSize,s=e.length,i=this._len,a=0;a<s;){for(var u=i%o,l=Math.min(s-a,o-u),c=0;c<l;c++)r[u+c]=e[a+c];a+=l,(i+=l)%o==0&&this._update(r)}return this._len+=s,this},o.prototype.digest=function(e){var t=this._len%this._blockSize;this._block[t]=128,this._block.fill(0,t+1),t>=this._finalSize&&(this._update(this._block),this._block.fill(0));var r=8*this._len;if(r<=4294967295)this._block.writeUInt32BE(r,this._blockSize-4);else{var n=(4294967295&r)>>>0,o=(r-n)/4294967296;this._block.writeUInt32BE(o,this._blockSize-8),this._block.writeUInt32BE(n,this._blockSize-4)}this._update(this._block);var s=this._hash();return e?s.toString(e):s},o.prototype._update=function(){throw new Error("_update must be implemented by subclass")},e.exports=o},"./node_modules/sha.js/index.js":(e,t,r)=>{var n=e.exports=function(e){e=e.toLowerCase();var t=n[e];if(!t)throw new Error(e+" is not supported (we accept pull requests)");return new t};n.sha=r("./node_modules/sha.js/sha.js"),n.sha1=r("./node_modules/sha.js/sha1.js"),n.sha224=r("./node_modules/sha.js/sha224.js"),n.sha256=r("./node_modules/sha.js/sha256.js"),n.sha384=r("./node_modules/sha.js/sha384.js"),n.sha512=r("./node_modules/sha.js/sha512.js")},"./node_modules/sha.js/sha.js":(e,t,r)=>{var n=r("./node_modules/inherits/inherits_browser.js"),o=r("./node_modules/sha.js/hash.js"),s=r("./node_modules/safe-buffer/index.js").Buffer,i=[1518500249,1859775393,-1894007588,-899497514],a=new Array(80);function u(){this.init(),this._w=a,o.call(this,64,56)}function l(e){return e<<30|e>>>2}function c(e,t,r,n){return 0===e?t&r|~t&n:2===e?t&r|t&n|r&n:t^r^n}n(u,o),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,o=0|this._b,s=0|this._c,a=0|this._d,u=0|this._e,d=0;d<16;++d)r[d]=e.readInt32BE(4*d);for(;d<80;++d)r[d]=r[d-3]^r[d-8]^r[d-14]^r[d-16];for(var p=0;p<80;++p){var f=~~(p/20),h=0|((t=n)<<5|t>>>27)+c(f,o,s,a)+u+r[p]+i[f];u=a,a=s,s=l(o),o=n,n=h}this._a=n+this._a|0,this._b=o+this._b|0,this._c=s+this._c|0,this._d=a+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var e=s.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=u},"./node_modules/sha.js/sha1.js":(e,t,r)=>{var n=r("./node_modules/inherits/inherits_browser.js"),o=r("./node_modules/sha.js/hash.js"),s=r("./node_modules/safe-buffer/index.js").Buffer,i=[1518500249,1859775393,-1894007588,-899497514],a=new Array(80);function u(){this.init(),this._w=a,o.call(this,64,56)}function l(e){return e<<5|e>>>27}function c(e){return e<<30|e>>>2}function d(e,t,r,n){return 0===e?t&r|~t&n:2===e?t&r|t&n|r&n:t^r^n}n(u,o),u.prototype.init=function(){return this._a=1732584193,this._b=4023233417,this._c=2562383102,this._d=271733878,this._e=3285377520,this},u.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,o=0|this._b,s=0|this._c,a=0|this._d,u=0|this._e,p=0;p<16;++p)r[p]=e.readInt32BE(4*p);for(;p<80;++p)r[p]=(t=r[p-3]^r[p-8]^r[p-14]^r[p-16])<<1|t>>>31;for(var f=0;f<80;++f){var h=~~(f/20),y=l(n)+d(h,o,s,a)+u+r[f]+i[h]|0;u=a,a=s,s=c(o),o=n,n=y}this._a=n+this._a|0,this._b=o+this._b|0,this._c=s+this._c|0,this._d=a+this._d|0,this._e=u+this._e|0},u.prototype._hash=function(){var e=s.allocUnsafe(20);return e.writeInt32BE(0|this._a,0),e.writeInt32BE(0|this._b,4),e.writeInt32BE(0|this._c,8),e.writeInt32BE(0|this._d,12),e.writeInt32BE(0|this._e,16),e},e.exports=u},"./node_modules/sha.js/sha224.js":(e,t,r)=>{var n=r("./node_modules/inherits/inherits_browser.js"),o=r("./node_modules/sha.js/sha256.js"),s=r("./node_modules/sha.js/hash.js"),i=r("./node_modules/safe-buffer/index.js").Buffer,a=new Array(64);function u(){this.init(),this._w=a,s.call(this,64,56)}n(u,o),u.prototype.init=function(){return this._a=3238371032,this._b=914150663,this._c=812702999,this._d=4144912697,this._e=4290775857,this._f=1750603025,this._g=1694076839,this._h=3204075428,this},u.prototype._hash=function(){var e=i.allocUnsafe(28);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e},e.exports=u},"./node_modules/sha.js/sha256.js":(e,t,r)=>{var n=r("./node_modules/inherits/inherits_browser.js"),o=r("./node_modules/sha.js/hash.js"),s=r("./node_modules/safe-buffer/index.js").Buffer,i=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],a=new Array(64);function u(){this.init(),this._w=a,o.call(this,64,56)}function l(e,t,r){return r^e&(t^r)}function c(e,t,r){return e&t|r&(e|t)}function d(e){return(e>>>2|e<<30)^(e>>>13|e<<19)^(e>>>22|e<<10)}function p(e){return(e>>>6|e<<26)^(e>>>11|e<<21)^(e>>>25|e<<7)}function f(e){return(e>>>7|e<<25)^(e>>>18|e<<14)^e>>>3}n(u,o),u.prototype.init=function(){return this._a=1779033703,this._b=3144134277,this._c=1013904242,this._d=2773480762,this._e=1359893119,this._f=2600822924,this._g=528734635,this._h=1541459225,this},u.prototype._update=function(e){for(var t,r=this._w,n=0|this._a,o=0|this._b,s=0|this._c,a=0|this._d,u=0|this._e,h=0|this._f,y=0|this._g,m=0|this._h,g=0;g<16;++g)r[g]=e.readInt32BE(4*g);for(;g<64;++g)r[g]=0|(((t=r[g-2])>>>17|t<<15)^(t>>>19|t<<13)^t>>>10)+r[g-7]+f(r[g-15])+r[g-16];for(var v=0;v<64;++v){var b=m+p(u)+l(u,h,y)+i[v]+r[v]|0,w=d(n)+c(n,o,s)|0;m=y,y=h,h=u,u=a+b|0,a=s,s=o,o=n,n=b+w|0}this._a=n+this._a|0,this._b=o+this._b|0,this._c=s+this._c|0,this._d=a+this._d|0,this._e=u+this._e|0,this._f=h+this._f|0,this._g=y+this._g|0,this._h=m+this._h|0},u.prototype._hash=function(){var e=s.allocUnsafe(32);return e.writeInt32BE(this._a,0),e.writeInt32BE(this._b,4),e.writeInt32BE(this._c,8),e.writeInt32BE(this._d,12),e.writeInt32BE(this._e,16),e.writeInt32BE(this._f,20),e.writeInt32BE(this._g,24),e.writeInt32BE(this._h,28),e},e.exports=u},"./node_modules/sha.js/sha384.js":(e,t,r)=>{var n=r("./node_modules/inherits/inherits_browser.js"),o=r("./node_modules/sha.js/sha512.js"),s=r("./node_modules/sha.js/hash.js"),i=r("./node_modules/safe-buffer/index.js").Buffer,a=new Array(160);function u(){this.init(),this._w=a,s.call(this,128,112)}n(u,o),u.prototype.init=function(){return this._ah=3418070365,this._bh=1654270250,this._ch=2438529370,this._dh=355462360,this._eh=1731405415,this._fh=2394180231,this._gh=3675008525,this._hh=1203062813,this._al=3238371032,this._bl=914150663,this._cl=812702999,this._dl=4144912697,this._el=4290775857,this._fl=1750603025,this._gl=1694076839,this._hl=3204075428,this},u.prototype._hash=function(){var e=i.allocUnsafe(48);function t(t,r,n){e.writeInt32BE(t,n),e.writeInt32BE(r,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),e},e.exports=u},"./node_modules/sha.js/sha512.js":(e,t,r)=>{var n=r("./node_modules/inherits/inherits_browser.js"),o=r("./node_modules/sha.js/hash.js"),s=r("./node_modules/safe-buffer/index.js").Buffer,i=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],a=new Array(160);function u(){this.init(),this._w=a,o.call(this,128,112)}function l(e,t,r){return r^e&(t^r)}function c(e,t,r){return e&t|r&(e|t)}function d(e,t){return(e>>>28|t<<4)^(t>>>2|e<<30)^(t>>>7|e<<25)}function p(e,t){return(e>>>14|t<<18)^(e>>>18|t<<14)^(t>>>9|e<<23)}function f(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^e>>>7}function h(e,t){return(e>>>1|t<<31)^(e>>>8|t<<24)^(e>>>7|t<<25)}function y(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^e>>>6}function m(e,t){return(e>>>19|t<<13)^(t>>>29|e<<3)^(e>>>6|t<<26)}function g(e,t){return e>>>0<t>>>0?1:0}n(u,o),u.prototype.init=function(){return this._ah=1779033703,this._bh=3144134277,this._ch=1013904242,this._dh=2773480762,this._eh=1359893119,this._fh=2600822924,this._gh=528734635,this._hh=1541459225,this._al=4089235720,this._bl=2227873595,this._cl=4271175723,this._dl=1595750129,this._el=2917565137,this._fl=725511199,this._gl=4215389547,this._hl=327033209,this},u.prototype._update=function(e){for(var t=this._w,r=0|this._ah,n=0|this._bh,o=0|this._ch,s=0|this._dh,a=0|this._eh,u=0|this._fh,v=0|this._gh,b=0|this._hh,w=0|this._al,S=0|this._bl,_=0|this._cl,T=0|this._dl,E=0|this._el,k=0|this._fl,A=0|this._gl,x=0|this._hl,P=0;P<32;P+=2)t[P]=e.readInt32BE(4*P),t[P+1]=e.readInt32BE(4*P+4);for(;P<160;P+=2){var O=t[P-30],C=t[P-30+1],I=f(O,C),R=h(C,O),B=y(O=t[P-4],C=t[P-4+1]),j=m(C,O),U=t[P-14],L=t[P-14+1],N=t[P-32],M=t[P-32+1],F=R+L|0,D=I+U+g(F,R)|0;D=(D=D+B+g(F=F+j|0,j)|0)+N+g(F=F+M|0,M)|0,t[P]=D,t[P+1]=F}for(var V=0;V<160;V+=2){D=t[V],F=t[V+1];var q=c(r,n,o),K=c(w,S,_),z=d(r,w),H=d(w,r),X=p(a,E),$=p(E,a),Q=i[V],W=i[V+1],G=l(a,u,v),Y=l(E,k,A),J=x+$|0,Z=b+X+g(J,x)|0;Z=(Z=(Z=Z+G+g(J=J+Y|0,Y)|0)+Q+g(J=J+W|0,W)|0)+D+g(J=J+F|0,F)|0;var ee=H+K|0,te=z+q+g(ee,H)|0;b=v,x=A,v=u,A=k,u=a,k=E,a=s+Z+g(E=T+J|0,T)|0,s=o,T=_,o=n,_=S,n=r,S=w,r=Z+te+g(w=J+ee|0,J)|0}this._al=this._al+w|0,this._bl=this._bl+S|0,this._cl=this._cl+_|0,this._dl=this._dl+T|0,this._el=this._el+E|0,this._fl=this._fl+k|0,this._gl=this._gl+A|0,this._hl=this._hl+x|0,this._ah=this._ah+r+g(this._al,w)|0,this._bh=this._bh+n+g(this._bl,S)|0,this._ch=this._ch+o+g(this._cl,_)|0,this._dh=this._dh+s+g(this._dl,T)|0,this._eh=this._eh+a+g(this._el,E)|0,this._fh=this._fh+u+g(this._fl,k)|0,this._gh=this._gh+v+g(this._gl,A)|0,this._hh=this._hh+b+g(this._hl,x)|0},u.prototype._hash=function(){var e=s.allocUnsafe(64);function t(t,r,n){e.writeInt32BE(t,n),e.writeInt32BE(r,n+4)}return t(this._ah,this._al,0),t(this._bh,this._bl,8),t(this._ch,this._cl,16),t(this._dh,this._dl,24),t(this._eh,this._el,32),t(this._fh,this._fl,40),t(this._gh,this._gl,48),t(this._hh,this._hl,56),e},e.exports=u},"./node_modules/toml/index.js":(e,t,r)=>{var n=r("./node_modules/toml/lib/parser.js"),o=r("./node_modules/toml/lib/compiler.js");e.exports={parse:function(e){var t=n.parse(e.toString());return o.compile(t)}}},"./node_modules/toml/lib/compiler.js":e=>{"use strict";e.exports={compile:function(e){var t=[],r=[],n="",o=Object.create(null),s=o;return function(e){for(var t,r=0;r<e.length;r++)switch((t=e[r]).type){case"Assign":a(t);break;case"ObjectPath":d(t);break;case"ArrayPath":p(t)}return o}(e);function i(e,t,r){var n=new Error(e);throw n.line=t,n.column=r,n}function a(e){var o,a=e.key,c=e.value,d=e.line,p=e.column;o=n?n+"."+a:a,void 0!==s[a]&&i("Cannot redefine existing key '"+o+"'.",d,p),s[a]=l(c),u(o)||(t.push(o),r.push(o))}function u(e){return-1!==t.indexOf(e)}function l(e){return"Array"===e.type?function(e){for(var t=null,r=0;r<e.length;r++){var n=e[r];null===t?t=n.type:n.type!==t&&i("Cannot add value of type "+n.type+" to array of type "+t+".",n.line,n.column)}return e.map(l)}(e.value):"InlineTable"===e.type?c(e.value):e.value}function c(e){for(var t=Object.create(null),r=0;r<e.length;r++){var n=e[r];"InlineTable"===n.value.type?t[n.key]=c(n.value.value):"InlineTableValue"===n.type&&(t[n.key]=l(n.value))}return t}function d(e){var r=e.value,a=r.map(h).join("."),l=e.line,c=e.column;u(a)&&i("Cannot redefine existing key '"+r+"'.",l,c),t.push(a),s=f(o,r,Object.create(null),l,c),n=r}function p(e){var r=e.value,a=r.map(h).join("."),l=e.line,c=e.column;if(u(a)||t.push(a),(t=t.filter((function(e){return 0!==e.indexOf(a)}))).push(a),s=f(o,r,[],l,c),n=a,s instanceof Array){var d=Object.create(null);s.push(d),s=d}else i("Cannot redefine existing key '"+r+"'.",l,c)}function f(e,t,n,o,s){for(var a=[],u="",l=(t.join("."),e),c=0;c<t.length;c++){var d=t[c];a.push(d),u=a.join("."),void 0===l[d]?c===t.length-1?l[d]=n:l[d]=Object.create(null):c!==t.length-1&&r.indexOf(u)>-1&&i("Cannot redefine existing key '"+u+"'.",o,s),(l=l[d])instanceof Array&&l.length&&c<t.length-1&&(l=l[l.length-1])}return l}function h(e){return e.indexOf(".")>-1?'"'+e+'"':e}}}},"./node_modules/toml/lib/parser.js":e=>{e.exports=function(){function e(e,t,r,n,o,s){this.message=e,this.expected=t,this.found=r,this.offset=n,this.line=o,this.column=s,this.name="SyntaxError"}return function(e,t){function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r}(e,Error),{SyntaxError:e,parse:function(t){var r,n=arguments.length>1?arguments[1]:{},o={},s={start:jt},i=jt,a=function(){return pr},u=o,l="#",c={type:"literal",value:"#",description:'"#"'},d=void 0,p={type:"any",description:"any character"},f="[",h={type:"literal",value:"[",description:'"["'},y="]",m={type:"literal",value:"]",description:'"]"'},g=function(e){fr(hr("ObjectPath",e,Ot,Ct))},v=function(e){fr(hr("ArrayPath",e,Ot,Ct))},b=function(e,t){return e.concat(t)},w=function(e){return[e]},S=function(e){return e},_=".",T={type:"literal",value:".",description:'"."'},E="=",k={type:"literal",value:"=",description:'"="'},A=function(e,t){fr(hr("Assign",t,Ot,Ct,e))},x=function(e){return e.join("")},P=function(e){return e.value},O='"""',C={type:"literal",value:'"""',description:'"\\"\\"\\""'},I=null,R=function(e){return hr("String",e.join(""),Ot,Ct)},B='"',j={type:"literal",value:'"',description:'"\\""'},U="'''",L={type:"literal",value:"'''",description:"\"'''\""},N="'",M={type:"literal",value:"'",description:'"\'"'},F=function(e){return e},D=function(e){return e},V="\\",q={type:"literal",value:"\\",description:'"\\\\"'},K=function(){return""},z="e",H={type:"literal",value:"e",description:'"e"'},X="E",$={type:"literal",value:"E",description:'"E"'},Q=function(e,t){return hr("Float",parseFloat(e+"e"+t),Ot,Ct)},W=function(e){return hr("Float",parseFloat(e),Ot,Ct)},G="+",Y={type:"literal",value:"+",description:'"+"'},J=function(e){return e.join("")},Z="-",ee={type:"literal",value:"-",description:'"-"'},te=function(e){return"-"+e.join("")},re=function(e){return hr("Integer",parseInt(e,10),Ot,Ct)},ne="true",oe={type:"literal",value:"true",description:'"true"'},se=function(){return hr("Boolean",!0,Ot,Ct)},ie="false",ae={type:"literal",value:"false",description:'"false"'},ue=function(){return hr("Boolean",!1,Ot,Ct)},le=function(){return hr("Array",[],Ot,Ct)},ce=function(e){return hr("Array",e?[e]:[],Ot,Ct)},de=function(e){return hr("Array",e,Ot,Ct)},pe=function(e,t){return hr("Array",e.concat(t),Ot,Ct)},fe=function(e){return e},he=",",ye={type:"literal",value:",",description:'","'},me="{",ge={type:"literal",value:"{",description:'"{"'},ve="}",be={type:"literal",value:"}",description:'"}"'},we=function(e){return hr("InlineTable",e,Ot,Ct)},Se=function(e,t){return hr("InlineTableValue",t,Ot,Ct,e)},_e=function(e){return"."+e},Te=function(e){return e.join("")},Ee=":",ke={type:"literal",value:":",description:'":"'},Ae=function(e){return e.join("")},xe="T",Pe={type:"literal",value:"T",description:'"T"'},Oe="Z",Ce={type:"literal",value:"Z",description:'"Z"'},Ie=function(e,t){return hr("Date",new Date(e+"T"+t+"Z"),Ot,Ct)},Re=function(e,t){return hr("Date",new Date(e+"T"+t),Ot,Ct)},Be=/^[ \t]/,je={type:"class",value:"[ \\t]",description:"[ \\t]"},Ue="\n",Le={type:"literal",value:"\n",description:'"\\n"'},Ne="\r",Me={type:"literal",value:"\r",description:'"\\r"'},Fe=/^[0-9a-f]/i,De={type:"class",value:"[0-9a-f]i",description:"[0-9a-f]i"},Ve=/^[0-9]/,qe={type:"class",value:"[0-9]",description:"[0-9]"},Ke="_",ze={type:"literal",value:"_",description:'"_"'},He=function(){return""},Xe=/^[A-Za-z0-9_\-]/,$e={type:"class",value:"[A-Za-z0-9_\\-]",description:"[A-Za-z0-9_\\-]"},Qe=function(e){return e.join("")},We='\\"',Ge={type:"literal",value:'\\"',description:'"\\\\\\""'},Ye=function(){return'"'},Je="\\\\",Ze={type:"literal",value:"\\\\",description:'"\\\\\\\\"'},et=function(){return"\\"},tt="\\b",rt={type:"literal",value:"\\b",description:'"\\\\b"'},nt=function(){return"\b"},ot="\\t",st={type:"literal",value:"\\t",description:'"\\\\t"'},it=function(){return"\t"},at="\\n",ut={type:"literal",value:"\\n",description:'"\\\\n"'},lt=function(){return"\n"},ct="\\f",dt={type:"literal",value:"\\f",description:'"\\\\f"'},pt=function(){return"\f"},ft="\\r",ht={type:"literal",value:"\\r",description:'"\\\\r"'},yt=function(){return"\r"},mt="\\U",gt={type:"literal",value:"\\U",description:'"\\\\U"'},vt=function(e){return function(e,t,r){var n=parseInt("0x"+e);if(!(!isFinite(n)||Math.floor(n)!=n||n<0||n>1114111||n>55295&&n<57344))return function(){var e,t,r=16384,n=[],o=-1,s=arguments.length;if(!s)return"";var i="";for(;++o<s;){var a=Number(arguments[o]);a<=65535?n.push(a):(e=55296+((a-=65536)>>10),t=a%1024+56320,n.push(e,t)),(o+1==s||n.length>r)&&(i+=String.fromCharCode.apply(null,n),n.length=0)}return i}(n);!function(e,t,r){var n=new Error(e);throw n.line=t,n.column=r,n}("Invalid Unicode escape code: "+e,t,r)}(e.join(""))},bt="\\u",wt={type:"literal",value:"\\u",description:'"\\\\u"'},St=0,_t=0,Tt=0,Et={line:1,column:1,seenCR:!1},kt=0,At=[],xt=0,Pt={};if("startRule"in n){if(!(n.startRule in s))throw new Error("Can't start parsing from rule \""+n.startRule+'".');i=s[n.startRule]}function Ot(){return It(_t).line}function Ct(){return It(_t).column}function It(e){return Tt!==e&&(Tt>e&&(Tt=0,Et={line:1,column:1,seenCR:!1}),function(e,r,n){var o,s;for(o=r;o<n;o++)"\n"===(s=t.charAt(o))?(e.seenCR||e.line++,e.column=1,e.seenCR=!1):"\r"===s||"\u2028"===s||"\u2029"===s?(e.line++,e.column=1,e.seenCR=!0):(e.column++,e.seenCR=!1)}(Et,Tt,e),Tt=e),Et}function Rt(e){St<kt||(St>kt&&(kt=St,At=[]),At.push(e))}function Bt(r,n,o){var s=It(o),i=o<t.length?t.charAt(o):null;return null!==n&&function(e){var t=1;for(e.sort((function(e,t){return e.description<t.description?-1:e.description>t.description?1:0}));t<e.length;)e[t-1]===e[t]?e.splice(t,1):t++}(n),new e(null!==r?r:function(e,t){var r,n=new Array(e.length);for(r=0;r<e.length;r++)n[r]=e[r].description;return"Expected "+(e.length>1?n.slice(0,-1).join(", ")+" or "+n[e.length-1]:n[0])+" but "+(t?'"'+function(e){function t(e){return e.charCodeAt(0).toString(16).toUpperCase()}return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\x08/g,"\\b").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\f/g,"\\f").replace(/\r/g,"\\r").replace(/[\x00-\x07\x0B\x0E\x0F]/g,(function(e){return"\\x0"+t(e)})).replace(/[\x10-\x1F\x80-\xFF]/g,(function(e){return"\\x"+t(e)})).replace(/[\u0180-\u0FFF]/g,(function(e){return"\\u0"+t(e)})).replace(/[\u1080-\uFFFF]/g,(function(e){return"\\u"+t(e)}))}(t)+'"':"end of input")+" found."}(n,i),n,i,o,s.line,s.column)}function jt(){var e,t,r,n=49*St+0,s=Pt[n];if(s)return St=s.nextPos,s.result;for(e=St,t=[],r=Ut();r!==o;)t.push(r),r=Ut();return t!==o&&(_t=e,t=a()),e=t,Pt[n]={nextPos:St,result:e},e}function Ut(){var e,r,n,s,i,a,l,c=49*St+1,d=Pt[c];if(d)return St=d.nextPos,d.result;for(e=St,r=[],n=nr();n!==o;)r.push(n),n=nr();if(r!==o)if(n=function(){var e,r=49*St+2,n=Pt[r];if(n)return St=n.nextPos,n.result;e=Lt(),e===o&&(e=function(){var e,r,n,s,i,a,l=49*St+4,c=Pt[l];if(c)return St=c.nextPos,c.result;e=St,91===t.charCodeAt(St)?(r=f,St++):(r=o,0===xt&&Rt(h));if(r!==o){for(n=[],s=nr();s!==o;)n.push(s),s=nr();if(n!==o)if((s=Nt())!==o){for(i=[],a=nr();a!==o;)i.push(a),a=nr();i!==o?(93===t.charCodeAt(St)?(a=y,St++):(a=o,0===xt&&Rt(m)),a!==o?(_t=e,e=r=g(s)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u;else St=e,e=u}else St=e,e=u;return Pt[l]={nextPos:St,result:e},e}(),e===o&&(e=function(){var e,r,n,s,i,a,l,c,d=49*St+5,p=Pt[d];if(p)return St=p.nextPos,p.result;e=St,91===t.charCodeAt(St)?(r=f,St++):(r=o,0===xt&&Rt(h));if(r!==o)if(91===t.charCodeAt(St)?(n=f,St++):(n=o,0===xt&&Rt(h)),n!==o){for(s=[],i=nr();i!==o;)s.push(i),i=nr();if(s!==o)if((i=Nt())!==o){for(a=[],l=nr();l!==o;)a.push(l),l=nr();a!==o?(93===t.charCodeAt(St)?(l=y,St++):(l=o,0===xt&&Rt(m)),l!==o?(93===t.charCodeAt(St)?(c=y,St++):(c=o,0===xt&&Rt(m)),c!==o?(_t=e,e=r=v(i)):(St=e,e=u)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u;else St=e,e=u}else St=e,e=u;else St=e,e=u;return Pt[d]={nextPos:St,result:e},e}(),e===o&&(e=function(){var e,r,n,s,i,a,l=49*St+9,c=Pt[l];if(c)return St=c.nextPos,c.result;if(e=St,r=Dt(),r!==o){for(n=[],s=nr();s!==o;)n.push(s),s=nr();if(n!==o)if(61===t.charCodeAt(St)?(s=E,St++):(s=o,0===xt&&Rt(k)),s!==o){for(i=[],a=nr();a!==o;)i.push(a),a=nr();i!==o&&(a=qt())!==o?(_t=e,e=r=A(r,a)):(St=e,e=u)}else St=e,e=u;else St=e,e=u}else St=e,e=u;if(e===o)if(e=St,(r=Vt())!==o){for(n=[],s=nr();s!==o;)n.push(s),s=nr();if(n!==o)if(61===t.charCodeAt(St)?(s=E,St++):(s=o,0===xt&&Rt(k)),s!==o){for(i=[],a=nr();a!==o;)i.push(a),a=nr();i!==o&&(a=qt())!==o?(_t=e,e=r=A(r,a)):(St=e,e=u)}else St=e,e=u;else St=e,e=u}else St=e,e=u;return Pt[l]={nextPos:St,result:e},e}())));return Pt[r]={nextPos:St,result:e},e}(),n!==o){for(s=[],i=nr();i!==o;)s.push(i),i=nr();if(s!==o){for(i=[],a=Lt();a!==o;)i.push(a),a=Lt();if(i!==o){if(a=[],(l=or())!==o)for(;l!==o;)a.push(l),l=or();else a=u;a===o&&(a=ir()),a!==o?e=r=[r,n,s,i,a]:(St=e,e=u)}else St=e,e=u}else St=e,e=u}else St=e,e=u;else St=e,e=u;if(e===o){if(e=St,r=[],(n=nr())!==o)for(;n!==o;)r.push(n),n=nr();else r=u;if(r!==o){if(n=[],(s=or())!==o)for(;s!==o;)n.push(s),s=or();else n=u;n===o&&(n=ir()),n!==o?e=r=[r,n]:(St=e,e=u)}else St=e,e=u;e===o&&(e=or())}return Pt[c]={nextPos:St,result:e},e}function Lt(){var e,r,n,s,i,a,f=49*St+3,h=Pt[f];if(h)return St=h.nextPos,h.result;if(e=St,35===t.charCodeAt(St)?(r=l,St++):(r=o,0===xt&&Rt(c)),r!==o){for(n=[],s=St,i=St,xt++,(a=or())===o&&(a=ir()),xt--,a===o?i=d:(St=i,i=u),i!==o?(t.length>St?(a=t.charAt(St),St++):(a=o,0===xt&&Rt(p)),a!==o?s=i=[i,a]:(St=s,s=u)):(St=s,s=u);s!==o;)n.push(s),s=St,i=St,xt++,(a=or())===o&&(a=ir()),xt--,a===o?i=d:(St=i,i=u),i!==o?(t.length>St?(a=t.charAt(St),St++):(a=o,0===xt&&Rt(p)),a!==o?s=i=[i,a]:(St=s,s=u)):(St=s,s=u);n!==o?e=r=[r,n]:(St=e,e=u)}else St=e,e=u;return Pt[f]={nextPos:St,result:e},e}function Nt(){var e,t,r,n=49*St+6,s=Pt[n];if(s)return St=s.nextPos,s.result;if(e=St,t=[],(r=Ft())!==o)for(;r!==o;)t.push(r),r=Ft();else t=u;return t!==o&&(r=Mt())!==o?(_t=e,e=t=b(t,r)):(St=e,e=u),e===o&&(e=St,(t=Mt())!==o&&(_t=e,t=w(t)),e=t),Pt[n]={nextPos:St,result:e},e}function Mt(){var e,t,r,n,s,i=49*St+7,a=Pt[i];if(a)return St=a.nextPos,a.result;for(e=St,t=[],r=nr();r!==o;)t.push(r),r=nr();if(t!==o)if((r=Dt())!==o){for(n=[],s=nr();s!==o;)n.push(s),s=nr();n!==o?(_t=e,e=t=S(r)):(St=e,e=u)}else St=e,e=u;else St=e,e=u;if(e===o){for(e=St,t=[],r=nr();r!==o;)t.push(r),r=nr();if(t!==o)if((r=Vt())!==o){for(n=[],s=nr();s!==o;)n.push(s),s=nr();n!==o?(_t=e,e=t=S(r)):(St=e,e=u)}else St=e,e=u;else St=e,e=u}return Pt[i]={nextPos:St,result:e},e}function Ft(){var e,r,n,s,i,a,l,c=49*St+8,d=Pt[c];if(d)return St=d.nextPos,d.result;for(e=St,r=[],n=nr();n!==o;)r.push(n),n=nr();if(r!==o)if((n=Dt())!==o){for(s=[],i=nr();i!==o;)s.push(i),i=nr();if(s!==o)if(46===t.charCodeAt(St)?(i=_,St++):(i=o,0===xt&&Rt(T)),i!==o){for(a=[],l=nr();l!==o;)a.push(l),l=nr();a!==o?(_t=e,e=r=S(n)):(St=e,e=u)}else St=e,e=u;else St=e,e=u}else St=e,e=u;else St=e,e=u;if(e===o){for(e=St,r=[],n=nr();n!==o;)r.push(n),n=nr();if(r!==o)if((n=Vt())!==o){for(s=[],i=nr();i!==o;)s.push(i),i=nr();if(s!==o)if(46===t.charCodeAt(St)?(i=_,St++):(i=o,0===xt&&Rt(T)),i!==o){for(a=[],l=nr();l!==o;)a.push(l),l=nr();a!==o?(_t=e,e=r=S(n)):(St=e,e=u)}else St=e,e=u;else St=e,e=u}else St=e,e=u;else St=e,e=u}return Pt[c]={nextPos:St,result:e},e}function Dt(){var e,t,r,n=49*St+10,s=Pt[n];if(s)return St=s.nextPos,s.result;if(e=St,t=[],(r=lr())!==o)for(;r!==o;)t.push(r),r=lr();else t=u;return t!==o&&(_t=e,t=x(t)),e=t,Pt[n]={nextPos:St,result:e},e}function Vt(){var e,t,r=49*St+11,n=Pt[r];return n?(St=n.nextPos,n.result):(e=St,(t=Kt())!==o&&(_t=e,t=P(t)),(e=t)===o&&(e=St,(t=zt())!==o&&(_t=e,t=P(t)),e=t),Pt[r]={nextPos:St,result:e},e)}function qt(){var e,r=49*St+12,n=Pt[r];return n?(St=n.nextPos,n.result):(e=function(){var e,r=49*St+13,n=Pt[r];if(n)return St=n.nextPos,n.result;e=function(){var e,r,n,s,i,a=49*St+14,l=Pt[a];if(l)return St=l.nextPos,l.result;e=St,t.substr(St,3)===O?(r=O,St+=3):(r=o,0===xt&&Rt(C));if(r!==o)if((n=or())===o&&(n=I),n!==o){for(s=[],i=$t();i!==o;)s.push(i),i=$t();s!==o?(t.substr(St,3)===O?(i=O,St+=3):(i=o,0===xt&&Rt(C)),i!==o?(_t=e,e=r=R(s)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u;else St=e,e=u;return Pt[a]={nextPos:St,result:e},e}(),e===o&&(e=Kt())===o&&(e=function(){var e,r,n,s,i,a=49*St+16,l=Pt[a];if(l)return St=l.nextPos,l.result;e=St,t.substr(St,3)===U?(r=U,St+=3):(r=o,0===xt&&Rt(L));if(r!==o)if((n=or())===o&&(n=I),n!==o){for(s=[],i=Qt();i!==o;)s.push(i),i=Qt();s!==o?(t.substr(St,3)===U?(i=U,St+=3):(i=o,0===xt&&Rt(L)),i!==o?(_t=e,e=r=R(s)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u;else St=e,e=u;return Pt[a]={nextPos:St,result:e},e}(),e===o&&(e=zt()));return Pt[r]={nextPos:St,result:e},e}(),e===o&&(e=function(){var e,r,n,s,i,a=49*St+38,l=Pt[a];if(l)return St=l.nextPos,l.result;e=St,(r=rr())!==o?(84===t.charCodeAt(St)?(n=xe,St++):(n=o,0===xt&&Rt(Pe)),n!==o?(s=function(){var e,r,n,s,i,a,l,c,d,p,f,h=49*St+36,y=Pt[h];if(y)return St=y.nextPos,y.result;e=St,r=St,n=ur(),n!==o&&(s=ur())!==o?(58===t.charCodeAt(St)?(i=Ee,St++):(i=o,0===xt&&Rt(ke)),i!==o&&(a=ur())!==o&&(l=ur())!==o?(58===t.charCodeAt(St)?(c=Ee,St++):(c=o,0===xt&&Rt(ke)),c!==o&&(d=ur())!==o&&(p=ur())!==o?((f=tr())===o&&(f=I),f!==o?r=n=[n,s,i,a,l,c,d,p,f]:(St=r,r=u)):(St=r,r=u)):(St=r,r=u)):(St=r,r=u);r!==o&&(_t=e,r=Ae(r));return e=r,Pt[h]={nextPos:St,result:e},e}(),s!==o?(90===t.charCodeAt(St)?(i=Oe,St++):(i=o,0===xt&&Rt(Ce)),i!==o?(_t=e,e=r=Ie(r,s)):(St=e,e=u)):(St=e,e=u)):(St=e,e=u)):(St=e,e=u);e===o&&(e=St,(r=rr())!==o?(84===t.charCodeAt(St)?(n=xe,St++):(n=o,0===xt&&Rt(Pe)),n!==o?(s=function(){var e,r,n,s,i,a,l,c,d,p,f,h,y,m,g,v,b,w=49*St+37,S=Pt[w];if(S)return St=S.nextPos,S.result;e=St,r=St,n=ur(),n!==o&&(s=ur())!==o?(58===t.charCodeAt(St)?(i=Ee,St++):(i=o,0===xt&&Rt(ke)),i!==o&&(a=ur())!==o&&(l=ur())!==o?(58===t.charCodeAt(St)?(c=Ee,St++):(c=o,0===xt&&Rt(ke)),c!==o&&(d=ur())!==o&&(p=ur())!==o?((f=tr())===o&&(f=I),f!==o?(45===t.charCodeAt(St)?(h=Z,St++):(h=o,0===xt&&Rt(ee)),h===o&&(43===t.charCodeAt(St)?(h=G,St++):(h=o,0===xt&&Rt(Y))),h!==o&&(y=ur())!==o&&(m=ur())!==o?(58===t.charCodeAt(St)?(g=Ee,St++):(g=o,0===xt&&Rt(ke)),g!==o&&(v=ur())!==o&&(b=ur())!==o?r=n=[n,s,i,a,l,c,d,p,f,h,y,m,g,v,b]:(St=r,r=u)):(St=r,r=u)):(St=r,r=u)):(St=r,r=u)):(St=r,r=u)):(St=r,r=u);r!==o&&(_t=e,r=Ae(r));return e=r,Pt[w]={nextPos:St,result:e},e}(),s!==o?(_t=e,e=r=Re(r,s)):(St=e,e=u)):(St=e,e=u)):(St=e,e=u));return Pt[a]={nextPos:St,result:e},e}(),e===o&&(e=function(){var e,r,n,s,i=49*St+23,a=Pt[i];if(a)return St=a.nextPos,a.result;e=St,(r=Wt())===o&&(r=Gt());r!==o?(101===t.charCodeAt(St)?(n=z,St++):(n=o,0===xt&&Rt(H)),n===o&&(69===t.charCodeAt(St)?(n=X,St++):(n=o,0===xt&&Rt($))),n!==o&&(s=Gt())!==o?(_t=e,e=r=Q(r,s)):(St=e,e=u)):(St=e,e=u);e===o&&(e=St,(r=Wt())!==o&&(_t=e,r=W(r)),e=r);return Pt[i]={nextPos:St,result:e},e}(),e===o&&(e=function(){var e,t,r=49*St+25,n=Pt[r];if(n)return St=n.nextPos,n.result;e=St,(t=Gt())!==o&&(_t=e,t=re(t));return e=t,Pt[r]={nextPos:St,result:e},e}(),e===o&&(e=function(){var e,r,n=49*St+27,s=Pt[n];if(s)return St=s.nextPos,s.result;e=St,t.substr(St,4)===ne?(r=ne,St+=4):(r=o,0===xt&&Rt(oe));r!==o&&(_t=e,r=se());e=r,e===o&&(e=St,t.substr(St,5)===ie?(r=ie,St+=5):(r=o,0===xt&&Rt(ae)),r!==o&&(_t=e,r=ue()),e=r);return Pt[n]={nextPos:St,result:e},e}(),e===o&&(e=function(){var e,r,n,s,i,a=49*St+28,l=Pt[a];if(l)return St=l.nextPos,l.result;e=St,91===t.charCodeAt(St)?(r=f,St++):(r=o,0===xt&&Rt(h));if(r!==o){for(n=[],s=Zt();s!==o;)n.push(s),s=Zt();n!==o?(93===t.charCodeAt(St)?(s=y,St++):(s=o,0===xt&&Rt(m)),s!==o?(_t=e,e=r=le()):(St=e,e=u)):(St=e,e=u)}else St=e,e=u;if(e===o&&(e=St,91===t.charCodeAt(St)?(r=f,St++):(r=o,0===xt&&Rt(h)),r!==o?((n=Yt())===o&&(n=I),n!==o?(93===t.charCodeAt(St)?(s=y,St++):(s=o,0===xt&&Rt(m)),s!==o?(_t=e,e=r=ce(n)):(St=e,e=u)):(St=e,e=u)):(St=e,e=u),e===o)){if(e=St,91===t.charCodeAt(St)?(r=f,St++):(r=o,0===xt&&Rt(h)),r!==o){if(n=[],(s=Jt())!==o)for(;s!==o;)n.push(s),s=Jt();else n=u;n!==o?(93===t.charCodeAt(St)?(s=y,St++):(s=o,0===xt&&Rt(m)),s!==o?(_t=e,e=r=de(n)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u;if(e===o)if(e=St,91===t.charCodeAt(St)?(r=f,St++):(r=o,0===xt&&Rt(h)),r!==o){if(n=[],(s=Jt())!==o)for(;s!==o;)n.push(s),s=Jt();else n=u;n!==o&&(s=Yt())!==o?(93===t.charCodeAt(St)?(i=y,St++):(i=o,0===xt&&Rt(m)),i!==o?(_t=e,e=r=pe(n,s)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u}return Pt[a]={nextPos:St,result:e},e}(),e===o&&(e=function(){var e,r,n,s,i,a,l=49*St+32,c=Pt[l];if(c)return St=c.nextPos,c.result;e=St,123===t.charCodeAt(St)?(r=me,St++):(r=o,0===xt&&Rt(ge));if(r!==o){for(n=[],s=nr();s!==o;)n.push(s),s=nr();if(n!==o){for(s=[],i=er();i!==o;)s.push(i),i=er();if(s!==o){for(i=[],a=nr();a!==o;)i.push(a),a=nr();i!==o?(125===t.charCodeAt(St)?(a=ve,St++):(a=o,0===xt&&Rt(be)),a!==o?(_t=e,e=r=we(s)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u}else St=e,e=u}else St=e,e=u;return Pt[l]={nextPos:St,result:e},e}())))))),Pt[r]={nextPos:St,result:e},e)}function Kt(){var e,r,n,s,i=49*St+15,a=Pt[i];if(a)return St=a.nextPos,a.result;if(e=St,34===t.charCodeAt(St)?(r=B,St++):(r=o,0===xt&&Rt(j)),r!==o){for(n=[],s=Ht();s!==o;)n.push(s),s=Ht();n!==o?(34===t.charCodeAt(St)?(s=B,St++):(s=o,0===xt&&Rt(j)),s!==o?(_t=e,e=r=R(n)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u;return Pt[i]={nextPos:St,result:e},e}function zt(){var e,r,n,s,i=49*St+17,a=Pt[i];if(a)return St=a.nextPos,a.result;if(e=St,39===t.charCodeAt(St)?(r=N,St++):(r=o,0===xt&&Rt(M)),r!==o){for(n=[],s=Xt();s!==o;)n.push(s),s=Xt();n!==o?(39===t.charCodeAt(St)?(s=N,St++):(s=o,0===xt&&Rt(M)),s!==o?(_t=e,e=r=R(n)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u;return Pt[i]={nextPos:St,result:e},e}function Ht(){var e,r,n,s=49*St+18,i=Pt[s];return i?(St=i.nextPos,i.result):((e=dr())===o&&(e=St,r=St,xt++,34===t.charCodeAt(St)?(n=B,St++):(n=o,0===xt&&Rt(j)),xt--,n===o?r=d:(St=r,r=u),r!==o?(t.length>St?(n=t.charAt(St),St++):(n=o,0===xt&&Rt(p)),n!==o?(_t=e,e=r=F(n)):(St=e,e=u)):(St=e,e=u)),Pt[s]={nextPos:St,result:e},e)}function Xt(){var e,r,n,s=49*St+19,i=Pt[s];return i?(St=i.nextPos,i.result):(e=St,r=St,xt++,39===t.charCodeAt(St)?(n=N,St++):(n=o,0===xt&&Rt(M)),xt--,n===o?r=d:(St=r,r=u),r!==o?(t.length>St?(n=t.charAt(St),St++):(n=o,0===xt&&Rt(p)),n!==o?(_t=e,e=r=F(n)):(St=e,e=u)):(St=e,e=u),Pt[s]={nextPos:St,result:e},e)}function $t(){var e,r,n,s=49*St+20,i=Pt[s];return i?(St=i.nextPos,i.result):((e=dr())===o&&(e=function(){var e,r,n,s,i=49*St+21,a=Pt[i];if(a)return St=a.nextPos,a.result;e=St,92===t.charCodeAt(St)?(r=V,St++):(r=o,0===xt&&Rt(q));if(r!==o)if(or()!==o){for(n=[],s=sr();s!==o;)n.push(s),s=sr();n!==o?(_t=e,e=r=K()):(St=e,e=u)}else St=e,e=u;else St=e,e=u;return Pt[i]={nextPos:St,result:e},e}(),e===o&&(e=St,r=St,xt++,t.substr(St,3)===O?(n=O,St+=3):(n=o,0===xt&&Rt(C)),xt--,n===o?r=d:(St=r,r=u),r!==o?(t.length>St?(n=t.charAt(St),St++):(n=o,0===xt&&Rt(p)),n!==o?(_t=e,e=r=D(n)):(St=e,e=u)):(St=e,e=u))),Pt[s]={nextPos:St,result:e},e)}function Qt(){var e,r,n,s=49*St+22,i=Pt[s];return i?(St=i.nextPos,i.result):(e=St,r=St,xt++,t.substr(St,3)===U?(n=U,St+=3):(n=o,0===xt&&Rt(L)),xt--,n===o?r=d:(St=r,r=u),r!==o?(t.length>St?(n=t.charAt(St),St++):(n=o,0===xt&&Rt(p)),n!==o?(_t=e,e=r=F(n)):(St=e,e=u)):(St=e,e=u),Pt[s]={nextPos:St,result:e},e)}function Wt(){var e,r,n,s,i,a,l=49*St+24,c=Pt[l];return c?(St=c.nextPos,c.result):(e=St,43===t.charCodeAt(St)?(r=G,St++):(r=o,0===xt&&Rt(Y)),r===o&&(r=I),r!==o?(n=St,(s=cr())!==o?(46===t.charCodeAt(St)?(i=_,St++):(i=o,0===xt&&Rt(T)),i!==o&&(a=cr())!==o?n=s=[s,i,a]:(St=n,n=u)):(St=n,n=u),n!==o?(_t=e,e=r=J(n)):(St=e,e=u)):(St=e,e=u),e===o&&(e=St,45===t.charCodeAt(St)?(r=Z,St++):(r=o,0===xt&&Rt(ee)),r!==o?(n=St,(s=cr())!==o?(46===t.charCodeAt(St)?(i=_,St++):(i=o,0===xt&&Rt(T)),i!==o&&(a=cr())!==o?n=s=[s,i,a]:(St=n,n=u)):(St=n,n=u),n!==o?(_t=e,e=r=te(n)):(St=e,e=u)):(St=e,e=u)),Pt[l]={nextPos:St,result:e},e)}function Gt(){var e,r,n,s,i,a=49*St+26,l=Pt[a];if(l)return St=l.nextPos,l.result;if(e=St,43===t.charCodeAt(St)?(r=G,St++):(r=o,0===xt&&Rt(Y)),r===o&&(r=I),r!==o){if(n=[],(s=ur())!==o)for(;s!==o;)n.push(s),s=ur();else n=u;n!==o?(s=St,xt++,46===t.charCodeAt(St)?(i=_,St++):(i=o,0===xt&&Rt(T)),xt--,i===o?s=d:(St=s,s=u),s!==o?(_t=e,e=r=J(n)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u;if(e===o)if(e=St,45===t.charCodeAt(St)?(r=Z,St++):(r=o,0===xt&&Rt(ee)),r!==o){if(n=[],(s=ur())!==o)for(;s!==o;)n.push(s),s=ur();else n=u;n!==o?(s=St,xt++,46===t.charCodeAt(St)?(i=_,St++):(i=o,0===xt&&Rt(T)),xt--,i===o?s=d:(St=s,s=u),s!==o?(_t=e,e=r=te(n)):(St=e,e=u)):(St=e,e=u)}else St=e,e=u;return Pt[a]={nextPos:St,result:e},e}function Yt(){var e,t,r,n,s,i=49*St+29,a=Pt[i];if(a)return St=a.nextPos,a.result;for(e=St,t=[],r=Zt();r!==o;)t.push(r),r=Zt();if(t!==o)if((r=qt())!==o){for(n=[],s=Zt();s!==o;)n.push(s),s=Zt();n!==o?(_t=e,e=t=fe(r)):(St=e,e=u)}else St=e,e=u;else St=e,e=u;return Pt[i]={nextPos:St,result:e},e}function Jt(){var e,r,n,s,i,a,l,c=49*St+30,d=Pt[c];if(d)return St=d.nextPos,d.result;for(e=St,r=[],n=Zt();n!==o;)r.push(n),n=Zt();if(r!==o)if((n=qt())!==o){for(s=[],i=Zt();i!==o;)s.push(i),i=Zt();if(s!==o)if(44===t.charCodeAt(St)?(i=he,St++):(i=o,0===xt&&Rt(ye)),i!==o){for(a=[],l=Zt();l!==o;)a.push(l),l=Zt();a!==o?(_t=e,e=r=fe(n)):(St=e,e=u)}else St=e,e=u;else St=e,e=u}else St=e,e=u;else St=e,e=u;return Pt[c]={nextPos:St,result:e},e}function Zt(){var e,t=49*St+31,r=Pt[t];return r?(St=r.nextPos,r.result):((e=nr())===o&&(e=or())===o&&(e=Lt()),Pt[t]={nextPos:St,result:e},e)}function er(){var e,r,n,s,i,a,l,c,d,p,f,h=49*St+33,y=Pt[h];if(y)return St=y.nextPos,y.result;for(e=St,r=[],n=nr();n!==o;)r.push(n),n=nr();if(r!==o)if((n=Dt())!==o){for(s=[],i=nr();i!==o;)s.push(i),i=nr();if(s!==o)if(61===t.charCodeAt(St)?(i=E,St++):(i=o,0===xt&&Rt(k)),i!==o){for(a=[],l=nr();l!==o;)a.push(l),l=nr();if(a!==o)if((l=qt())!==o){for(c=[],d=nr();d!==o;)c.push(d),d=nr();if(c!==o)if(44===t.charCodeAt(St)?(d=he,St++):(d=o,0===xt&&Rt(ye)),d!==o){for(p=[],f=nr();f!==o;)p.push(f),f=nr();p!==o?(_t=e,e=r=Se(n,l)):(St=e,e=u)}else St=e,e=u;else St=e,e=u}else St=e,e=u;else St=e,e=u}else St=e,e=u;else St=e,e=u}else St=e,e=u;else St=e,e=u;if(e===o){for(e=St,r=[],n=nr();n!==o;)r.push(n),n=nr();if(r!==o)if((n=Dt())!==o){for(s=[],i=nr();i!==o;)s.push(i),i=nr();if(s!==o)if(61===t.charCodeAt(St)?(i=E,St++):(i=o,0===xt&&Rt(k)),i!==o){for(a=[],l=nr();l!==o;)a.push(l),l=nr();a!==o&&(l=qt())!==o?(_t=e,e=r=Se(n,l)):(St=e,e=u)}else St=e,e=u;else St=e,e=u}else St=e,e=u;else St=e,e=u}return Pt[h]={nextPos:St,result:e},e}function tr(){var e,r,n,s=49*St+34,i=Pt[s];return i?(St=i.nextPos,i.result):(e=St,46===t.charCodeAt(St)?(r=_,St++):(r=o,0===xt&&Rt(T)),r!==o&&(n=cr())!==o?(_t=e,e=r=_e(n)):(St=e,e=u),Pt[s]={nextPos:St,result:e},e)}function rr(){var e,r,n,s,i,a,l,c,d,p,f,h,y=49*St+35,m=Pt[y];return m?(St=m.nextPos,m.result):(e=St,r=St,(n=ur())!==o&&(s=ur())!==o&&(i=ur())!==o&&(a=ur())!==o?(45===t.charCodeAt(St)?(l=Z,St++):(l=o,0===xt&&Rt(ee)),l!==o&&(c=ur())!==o&&(d=ur())!==o?(45===t.charCodeAt(St)?(p=Z,St++):(p=o,0===xt&&Rt(ee)),p!==o&&(f=ur())!==o&&(h=ur())!==o?r=n=[n,s,i,a,l,c,d,p,f,h]:(St=r,r=u)):(St=r,r=u)):(St=r,r=u),r!==o&&(_t=e,r=Te(r)),e=r,Pt[y]={nextPos:St,result:e},e)}function nr(){var e,r=49*St+39,n=Pt[r];return n?(St=n.nextPos,n.result):(Be.test(t.charAt(St))?(e=t.charAt(St),St++):(e=o,0===xt&&Rt(je)),Pt[r]={nextPos:St,result:e},e)}function or(){var e,r,n,s=49*St+40,i=Pt[s];return i?(St=i.nextPos,i.result):(10===t.charCodeAt(St)?(e=Ue,St++):(e=o,0===xt&&Rt(Le)),e===o&&(e=St,13===t.charCodeAt(St)?(r=Ne,St++):(r=o,0===xt&&Rt(Me)),r!==o?(10===t.charCodeAt(St)?(n=Ue,St++):(n=o,0===xt&&Rt(Le)),n!==o?e=r=[r,n]:(St=e,e=u)):(St=e,e=u)),Pt[s]={nextPos:St,result:e},e)}function sr(){var e,t=49*St+41,r=Pt[t];return r?(St=r.nextPos,r.result):((e=or())===o&&(e=nr()),Pt[t]={nextPos:St,result:e},e)}function ir(){var e,r,n=49*St+42,s=Pt[n];return s?(St=s.nextPos,s.result):(e=St,xt++,t.length>St?(r=t.charAt(St),St++):(r=o,0===xt&&Rt(p)),xt--,r===o?e=d:(St=e,e=u),Pt[n]={nextPos:St,result:e},e)}function ar(){var e,r=49*St+43,n=Pt[r];return n?(St=n.nextPos,n.result):(Fe.test(t.charAt(St))?(e=t.charAt(St),St++):(e=o,0===xt&&Rt(De)),Pt[r]={nextPos:St,result:e},e)}function ur(){var e,r,n=49*St+44,s=Pt[n];return s?(St=s.nextPos,s.result):(Ve.test(t.charAt(St))?(e=t.charAt(St),St++):(e=o,0===xt&&Rt(qe)),e===o&&(e=St,95===t.charCodeAt(St)?(r=Ke,St++):(r=o,0===xt&&Rt(ze)),r!==o&&(_t=e,r=He()),e=r),Pt[n]={nextPos:St,result:e},e)}function lr(){var e,r=49*St+45,n=Pt[r];return n?(St=n.nextPos,n.result):(Xe.test(t.charAt(St))?(e=t.charAt(St),St++):(e=o,0===xt&&Rt($e)),Pt[r]={nextPos:St,result:e},e)}function cr(){var e,t,r,n=49*St+46,s=Pt[n];if(s)return St=s.nextPos,s.result;if(e=St,t=[],(r=ur())!==o)for(;r!==o;)t.push(r),r=ur();else t=u;return t!==o&&(_t=e,t=Qe(t)),e=t,Pt[n]={nextPos:St,result:e},e}function dr(){var e,r,n=49*St+47,s=Pt[n];return s?(St=s.nextPos,s.result):(e=St,t.substr(St,2)===We?(r=We,St+=2):(r=o,0===xt&&Rt(Ge)),r!==o&&(_t=e,r=Ye()),(e=r)===o&&(e=St,t.substr(St,2)===Je?(r=Je,St+=2):(r=o,0===xt&&Rt(Ze)),r!==o&&(_t=e,r=et()),(e=r)===o&&(e=St,t.substr(St,2)===tt?(r=tt,St+=2):(r=o,0===xt&&Rt(rt)),r!==o&&(_t=e,r=nt()),(e=r)===o&&(e=St,t.substr(St,2)===ot?(r=ot,St+=2):(r=o,0===xt&&Rt(st)),r!==o&&(_t=e,r=it()),(e=r)===o&&(e=St,t.substr(St,2)===at?(r=at,St+=2):(r=o,0===xt&&Rt(ut)),r!==o&&(_t=e,r=lt()),(e=r)===o&&(e=St,t.substr(St,2)===ct?(r=ct,St+=2):(r=o,0===xt&&Rt(dt)),r!==o&&(_t=e,r=pt()),(e=r)===o&&(e=St,t.substr(St,2)===ft?(r=ft,St+=2):(r=o,0===xt&&Rt(ht)),r!==o&&(_t=e,r=yt()),(e=r)===o&&(e=function(){var e,r,n,s,i,a,l,c,d,p,f,h=49*St+48,y=Pt[h];if(y)return St=y.nextPos,y.result;e=St,t.substr(St,2)===mt?(r=mt,St+=2):(r=o,0===xt&&Rt(gt));r!==o?(n=St,(s=ar())!==o&&(i=ar())!==o&&(a=ar())!==o&&(l=ar())!==o&&(c=ar())!==o&&(d=ar())!==o&&(p=ar())!==o&&(f=ar())!==o?n=s=[s,i,a,l,c,d,p,f]:(St=n,n=u),n!==o?(_t=e,e=r=vt(n)):(St=e,e=u)):(St=e,e=u);e===o&&(e=St,t.substr(St,2)===bt?(r=bt,St+=2):(r=o,0===xt&&Rt(wt)),r!==o?(n=St,(s=ar())!==o&&(i=ar())!==o&&(a=ar())!==o&&(l=ar())!==o?n=s=[s,i,a,l]:(St=n,n=u),n!==o?(_t=e,e=r=vt(n)):(St=e,e=u)):(St=e,e=u));return Pt[h]={nextPos:St,result:e},e}()))))))),Pt[n]={nextPos:St,result:e},e)}var pr=[];function fr(e){pr.push(e)}function hr(e,t,r,n,o){var s={type:e,value:t,line:r(),column:n()};return o&&(s.key=o),s}if((r=i())!==o&&St===t.length)return r;throw r!==o&&St<t.length&&Rt({type:"end",description:"end of input"}),Bt(null,At,kt)}}}()},"./node_modules/tweetnacl/nacl-fast.js":(e,t,r)=>{!function(e){"use strict";var t=function(e){var t,r=new Float64Array(16);if(e)for(t=0;t<e.length;t++)r[t]=e[t];return r},n=function(){throw new Error("no PRNG")},o=new Uint8Array(16),s=new Uint8Array(32);s[0]=9;var i=t(),a=t([1]),u=t([56129,1]),l=t([30883,4953,19914,30187,55467,16705,2637,112,59544,30585,16505,36039,65139,11119,27886,20995]),c=t([61785,9906,39828,60374,45398,33411,5274,224,53552,61171,33010,6542,64743,22239,55772,9222]),d=t([54554,36645,11616,51542,42930,38181,51040,26924,56412,64982,57905,49316,21502,52590,14035,8553]),p=t([26200,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214,26214]),f=t([41136,18958,6951,50414,58488,44335,6150,12099,55207,15867,153,11085,57099,20417,9344,11139]);function h(e,t,r,n){e[t]=r>>24&255,e[t+1]=r>>16&255,e[t+2]=r>>8&255,e[t+3]=255&r,e[t+4]=n>>24&255,e[t+5]=n>>16&255,e[t+6]=n>>8&255,e[t+7]=255&n}function y(e,t,r,n,o){var s,i=0;for(s=0;s<o;s++)i|=e[t+s]^r[n+s];return(1&i-1>>>8)-1}function m(e,t,r,n){return y(e,t,r,n,16)}function g(e,t,r,n){return y(e,t,r,n,32)}function v(e,t,r,n){!function(e,t,r,n){for(var o,s=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,i=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,a=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,u=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,l=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,c=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,d=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,p=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,f=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,h=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,y=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,m=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,g=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,v=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,b=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,w=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,S=s,_=i,T=a,E=u,k=l,A=c,x=d,P=p,O=f,C=h,I=y,R=m,B=g,j=v,U=b,L=w,N=0;N<20;N+=2)S^=(o=(B^=(o=(O^=(o=(k^=(o=S+B|0)<<7|o>>>25)+S|0)<<9|o>>>23)+k|0)<<13|o>>>19)+O|0)<<18|o>>>14,A^=(o=(_^=(o=(j^=(o=(C^=(o=A+_|0)<<7|o>>>25)+A|0)<<9|o>>>23)+C|0)<<13|o>>>19)+j|0)<<18|o>>>14,I^=(o=(x^=(o=(T^=(o=(U^=(o=I+x|0)<<7|o>>>25)+I|0)<<9|o>>>23)+U|0)<<13|o>>>19)+T|0)<<18|o>>>14,L^=(o=(R^=(o=(P^=(o=(E^=(o=L+R|0)<<7|o>>>25)+L|0)<<9|o>>>23)+E|0)<<13|o>>>19)+P|0)<<18|o>>>14,S^=(o=(E^=(o=(T^=(o=(_^=(o=S+E|0)<<7|o>>>25)+S|0)<<9|o>>>23)+_|0)<<13|o>>>19)+T|0)<<18|o>>>14,A^=(o=(k^=(o=(P^=(o=(x^=(o=A+k|0)<<7|o>>>25)+A|0)<<9|o>>>23)+x|0)<<13|o>>>19)+P|0)<<18|o>>>14,I^=(o=(C^=(o=(O^=(o=(R^=(o=I+C|0)<<7|o>>>25)+I|0)<<9|o>>>23)+R|0)<<13|o>>>19)+O|0)<<18|o>>>14,L^=(o=(U^=(o=(j^=(o=(B^=(o=L+U|0)<<7|o>>>25)+L|0)<<9|o>>>23)+B|0)<<13|o>>>19)+j|0)<<18|o>>>14;S=S+s|0,_=_+i|0,T=T+a|0,E=E+u|0,k=k+l|0,A=A+c|0,x=x+d|0,P=P+p|0,O=O+f|0,C=C+h|0,I=I+y|0,R=R+m|0,B=B+g|0,j=j+v|0,U=U+b|0,L=L+w|0,e[0]=S>>>0&255,e[1]=S>>>8&255,e[2]=S>>>16&255,e[3]=S>>>24&255,e[4]=_>>>0&255,e[5]=_>>>8&255,e[6]=_>>>16&255,e[7]=_>>>24&255,e[8]=T>>>0&255,e[9]=T>>>8&255,e[10]=T>>>16&255,e[11]=T>>>24&255,e[12]=E>>>0&255,e[13]=E>>>8&255,e[14]=E>>>16&255,e[15]=E>>>24&255,e[16]=k>>>0&255,e[17]=k>>>8&255,e[18]=k>>>16&255,e[19]=k>>>24&255,e[20]=A>>>0&255,e[21]=A>>>8&255,e[22]=A>>>16&255,e[23]=A>>>24&255,e[24]=x>>>0&255,e[25]=x>>>8&255,e[26]=x>>>16&255,e[27]=x>>>24&255,e[28]=P>>>0&255,e[29]=P>>>8&255,e[30]=P>>>16&255,e[31]=P>>>24&255,e[32]=O>>>0&255,e[33]=O>>>8&255,e[34]=O>>>16&255,e[35]=O>>>24&255,e[36]=C>>>0&255,e[37]=C>>>8&255,e[38]=C>>>16&255,e[39]=C>>>24&255,e[40]=I>>>0&255,e[41]=I>>>8&255,e[42]=I>>>16&255,e[43]=I>>>24&255,e[44]=R>>>0&255,e[45]=R>>>8&255,e[46]=R>>>16&255,e[47]=R>>>24&255,e[48]=B>>>0&255,e[49]=B>>>8&255,e[50]=B>>>16&255,e[51]=B>>>24&255,e[52]=j>>>0&255,e[53]=j>>>8&255,e[54]=j>>>16&255,e[55]=j>>>24&255,e[56]=U>>>0&255,e[57]=U>>>8&255,e[58]=U>>>16&255,e[59]=U>>>24&255,e[60]=L>>>0&255,e[61]=L>>>8&255,e[62]=L>>>16&255,e[63]=L>>>24&255}(e,t,r,n)}function b(e,t,r,n){!function(e,t,r,n){for(var o,s=255&n[0]|(255&n[1])<<8|(255&n[2])<<16|(255&n[3])<<24,i=255&r[0]|(255&r[1])<<8|(255&r[2])<<16|(255&r[3])<<24,a=255&r[4]|(255&r[5])<<8|(255&r[6])<<16|(255&r[7])<<24,u=255&r[8]|(255&r[9])<<8|(255&r[10])<<16|(255&r[11])<<24,l=255&r[12]|(255&r[13])<<8|(255&r[14])<<16|(255&r[15])<<24,c=255&n[4]|(255&n[5])<<8|(255&n[6])<<16|(255&n[7])<<24,d=255&t[0]|(255&t[1])<<8|(255&t[2])<<16|(255&t[3])<<24,p=255&t[4]|(255&t[5])<<8|(255&t[6])<<16|(255&t[7])<<24,f=255&t[8]|(255&t[9])<<8|(255&t[10])<<16|(255&t[11])<<24,h=255&t[12]|(255&t[13])<<8|(255&t[14])<<16|(255&t[15])<<24,y=255&n[8]|(255&n[9])<<8|(255&n[10])<<16|(255&n[11])<<24,m=255&r[16]|(255&r[17])<<8|(255&r[18])<<16|(255&r[19])<<24,g=255&r[20]|(255&r[21])<<8|(255&r[22])<<16|(255&r[23])<<24,v=255&r[24]|(255&r[25])<<8|(255&r[26])<<16|(255&r[27])<<24,b=255&r[28]|(255&r[29])<<8|(255&r[30])<<16|(255&r[31])<<24,w=255&n[12]|(255&n[13])<<8|(255&n[14])<<16|(255&n[15])<<24,S=0;S<20;S+=2)s^=(o=(g^=(o=(f^=(o=(l^=(o=s+g|0)<<7|o>>>25)+s|0)<<9|o>>>23)+l|0)<<13|o>>>19)+f|0)<<18|o>>>14,c^=(o=(i^=(o=(v^=(o=(h^=(o=c+i|0)<<7|o>>>25)+c|0)<<9|o>>>23)+h|0)<<13|o>>>19)+v|0)<<18|o>>>14,y^=(o=(d^=(o=(a^=(o=(b^=(o=y+d|0)<<7|o>>>25)+y|0)<<9|o>>>23)+b|0)<<13|o>>>19)+a|0)<<18|o>>>14,w^=(o=(m^=(o=(p^=(o=(u^=(o=w+m|0)<<7|o>>>25)+w|0)<<9|o>>>23)+u|0)<<13|o>>>19)+p|0)<<18|o>>>14,s^=(o=(u^=(o=(a^=(o=(i^=(o=s+u|0)<<7|o>>>25)+s|0)<<9|o>>>23)+i|0)<<13|o>>>19)+a|0)<<18|o>>>14,c^=(o=(l^=(o=(p^=(o=(d^=(o=c+l|0)<<7|o>>>25)+c|0)<<9|o>>>23)+d|0)<<13|o>>>19)+p|0)<<18|o>>>14,y^=(o=(h^=(o=(f^=(o=(m^=(o=y+h|0)<<7|o>>>25)+y|0)<<9|o>>>23)+m|0)<<13|o>>>19)+f|0)<<18|o>>>14,w^=(o=(b^=(o=(v^=(o=(g^=(o=w+b|0)<<7|o>>>25)+w|0)<<9|o>>>23)+g|0)<<13|o>>>19)+v|0)<<18|o>>>14;e[0]=s>>>0&255,e[1]=s>>>8&255,e[2]=s>>>16&255,e[3]=s>>>24&255,e[4]=c>>>0&255,e[5]=c>>>8&255,e[6]=c>>>16&255,e[7]=c>>>24&255,e[8]=y>>>0&255,e[9]=y>>>8&255,e[10]=y>>>16&255,e[11]=y>>>24&255,e[12]=w>>>0&255,e[13]=w>>>8&255,e[14]=w>>>16&255,e[15]=w>>>24&255,e[16]=d>>>0&255,e[17]=d>>>8&255,e[18]=d>>>16&255,e[19]=d>>>24&255,e[20]=p>>>0&255,e[21]=p>>>8&255,e[22]=p>>>16&255,e[23]=p>>>24&255,e[24]=f>>>0&255,e[25]=f>>>8&255,e[26]=f>>>16&255,e[27]=f>>>24&255,e[28]=h>>>0&255,e[29]=h>>>8&255,e[30]=h>>>16&255,e[31]=h>>>24&255}(e,t,r,n)}var w=new Uint8Array([101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107]);function S(e,t,r,n,o,s,i){var a,u,l=new Uint8Array(16),c=new Uint8Array(64);for(u=0;u<16;u++)l[u]=0;for(u=0;u<8;u++)l[u]=s[u];for(;o>=64;){for(v(c,l,i,w),u=0;u<64;u++)e[t+u]=r[n+u]^c[u];for(a=1,u=8;u<16;u++)a=a+(255&l[u])|0,l[u]=255&a,a>>>=8;o-=64,t+=64,n+=64}if(o>0)for(v(c,l,i,w),u=0;u<o;u++)e[t+u]=r[n+u]^c[u];return 0}function _(e,t,r,n,o){var s,i,a=new Uint8Array(16),u=new Uint8Array(64);for(i=0;i<16;i++)a[i]=0;for(i=0;i<8;i++)a[i]=n[i];for(;r>=64;){for(v(u,a,o,w),i=0;i<64;i++)e[t+i]=u[i];for(s=1,i=8;i<16;i++)s=s+(255&a[i])|0,a[i]=255&s,s>>>=8;r-=64,t+=64}if(r>0)for(v(u,a,o,w),i=0;i<r;i++)e[t+i]=u[i];return 0}function T(e,t,r,n,o){var s=new Uint8Array(32);b(s,n,o,w);for(var i=new Uint8Array(8),a=0;a<8;a++)i[a]=n[a+16];return _(e,t,r,i,s)}function E(e,t,r,n,o,s,i){var a=new Uint8Array(32);b(a,s,i,w);for(var u=new Uint8Array(8),l=0;l<8;l++)u[l]=s[l+16];return S(e,t,r,n,o,u,a)}var k=function(e){var t,r,n,o,s,i,a,u;this.buffer=new Uint8Array(16),this.r=new Uint16Array(10),this.h=new Uint16Array(10),this.pad=new Uint16Array(8),this.leftover=0,this.fin=0,t=255&e[0]|(255&e[1])<<8,this.r[0]=8191&t,r=255&e[2]|(255&e[3])<<8,this.r[1]=8191&(t>>>13|r<<3),n=255&e[4]|(255&e[5])<<8,this.r[2]=7939&(r>>>10|n<<6),o=255&e[6]|(255&e[7])<<8,this.r[3]=8191&(n>>>7|o<<9),s=255&e[8]|(255&e[9])<<8,this.r[4]=255&(o>>>4|s<<12),this.r[5]=s>>>1&8190,i=255&e[10]|(255&e[11])<<8,this.r[6]=8191&(s>>>14|i<<2),a=255&e[12]|(255&e[13])<<8,this.r[7]=8065&(i>>>11|a<<5),u=255&e[14]|(255&e[15])<<8,this.r[8]=8191&(a>>>8|u<<8),this.r[9]=u>>>5&127,this.pad[0]=255&e[16]|(255&e[17])<<8,this.pad[1]=255&e[18]|(255&e[19])<<8,this.pad[2]=255&e[20]|(255&e[21])<<8,this.pad[3]=255&e[22]|(255&e[23])<<8,this.pad[4]=255&e[24]|(255&e[25])<<8,this.pad[5]=255&e[26]|(255&e[27])<<8,this.pad[6]=255&e[28]|(255&e[29])<<8,this.pad[7]=255&e[30]|(255&e[31])<<8};function A(e,t,r,n,o,s){var i=new k(s);return i.update(r,n,o),i.finish(e,t),0}function x(e,t,r,n,o,s){var i=new Uint8Array(16);return A(i,0,r,n,o,s),m(e,t,i,0)}function P(e,t,r,n,o){var s;if(r<32)return-1;for(E(e,0,t,0,r,n,o),A(e,16,e,32,r-32,e),s=0;s<16;s++)e[s]=0;return 0}function O(e,t,r,n,o){var s,i=new Uint8Array(32);if(r<32)return-1;if(T(i,0,32,n,o),0!==x(t,16,t,32,r-32,i))return-1;for(E(e,0,t,0,r,n,o),s=0;s<32;s++)e[s]=0;return 0}function C(e,t){var r;for(r=0;r<16;r++)e[r]=0|t[r]}function I(e){var t,r,n=1;for(t=0;t<16;t++)r=e[t]+n+65535,n=Math.floor(r/65536),e[t]=r-65536*n;e[0]+=n-1+37*(n-1)}function R(e,t,r){for(var n,o=~(r-1),s=0;s<16;s++)n=o&(e[s]^t[s]),e[s]^=n,t[s]^=n}function B(e,r){var n,o,s,i=t(),a=t();for(n=0;n<16;n++)a[n]=r[n];for(I(a),I(a),I(a),o=0;o<2;o++){for(i[0]=a[0]-65517,n=1;n<15;n++)i[n]=a[n]-65535-(i[n-1]>>16&1),i[n-1]&=65535;i[15]=a[15]-32767-(i[14]>>16&1),s=i[15]>>16&1,i[14]&=65535,R(a,i,1-s)}for(n=0;n<16;n++)e[2*n]=255&a[n],e[2*n+1]=a[n]>>8}function j(e,t){var r=new Uint8Array(32),n=new Uint8Array(32);return B(r,e),B(n,t),g(r,0,n,0)}function U(e){var t=new Uint8Array(32);return B(t,e),1&t[0]}function L(e,t){var r;for(r=0;r<16;r++)e[r]=t[2*r]+(t[2*r+1]<<8);e[15]&=32767}function N(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]+r[n]}function M(e,t,r){for(var n=0;n<16;n++)e[n]=t[n]-r[n]}function F(e,t,r){var n,o,s=0,i=0,a=0,u=0,l=0,c=0,d=0,p=0,f=0,h=0,y=0,m=0,g=0,v=0,b=0,w=0,S=0,_=0,T=0,E=0,k=0,A=0,x=0,P=0,O=0,C=0,I=0,R=0,B=0,j=0,U=0,L=r[0],N=r[1],M=r[2],F=r[3],D=r[4],V=r[5],q=r[6],K=r[7],z=r[8],H=r[9],X=r[10],$=r[11],Q=r[12],W=r[13],G=r[14],Y=r[15];s+=(n=t[0])*L,i+=n*N,a+=n*M,u+=n*F,l+=n*D,c+=n*V,d+=n*q,p+=n*K,f+=n*z,h+=n*H,y+=n*X,m+=n*$,g+=n*Q,v+=n*W,b+=n*G,w+=n*Y,i+=(n=t[1])*L,a+=n*N,u+=n*M,l+=n*F,c+=n*D,d+=n*V,p+=n*q,f+=n*K,h+=n*z,y+=n*H,m+=n*X,g+=n*$,v+=n*Q,b+=n*W,w+=n*G,S+=n*Y,a+=(n=t[2])*L,u+=n*N,l+=n*M,c+=n*F,d+=n*D,p+=n*V,f+=n*q,h+=n*K,y+=n*z,m+=n*H,g+=n*X,v+=n*$,b+=n*Q,w+=n*W,S+=n*G,_+=n*Y,u+=(n=t[3])*L,l+=n*N,c+=n*M,d+=n*F,p+=n*D,f+=n*V,h+=n*q,y+=n*K,m+=n*z,g+=n*H,v+=n*X,b+=n*$,w+=n*Q,S+=n*W,_+=n*G,T+=n*Y,l+=(n=t[4])*L,c+=n*N,d+=n*M,p+=n*F,f+=n*D,h+=n*V,y+=n*q,m+=n*K,g+=n*z,v+=n*H,b+=n*X,w+=n*$,S+=n*Q,_+=n*W,T+=n*G,E+=n*Y,c+=(n=t[5])*L,d+=n*N,p+=n*M,f+=n*F,h+=n*D,y+=n*V,m+=n*q,g+=n*K,v+=n*z,b+=n*H,w+=n*X,S+=n*$,_+=n*Q,T+=n*W,E+=n*G,k+=n*Y,d+=(n=t[6])*L,p+=n*N,f+=n*M,h+=n*F,y+=n*D,m+=n*V,g+=n*q,v+=n*K,b+=n*z,w+=n*H,S+=n*X,_+=n*$,T+=n*Q,E+=n*W,k+=n*G,A+=n*Y,p+=(n=t[7])*L,f+=n*N,h+=n*M,y+=n*F,m+=n*D,g+=n*V,v+=n*q,b+=n*K,w+=n*z,S+=n*H,_+=n*X,T+=n*$,E+=n*Q,k+=n*W,A+=n*G,x+=n*Y,f+=(n=t[8])*L,h+=n*N,y+=n*M,m+=n*F,g+=n*D,v+=n*V,b+=n*q,w+=n*K,S+=n*z,_+=n*H,T+=n*X,E+=n*$,k+=n*Q,A+=n*W,x+=n*G,P+=n*Y,h+=(n=t[9])*L,y+=n*N,m+=n*M,g+=n*F,v+=n*D,b+=n*V,w+=n*q,S+=n*K,_+=n*z,T+=n*H,E+=n*X,k+=n*$,A+=n*Q,x+=n*W,P+=n*G,O+=n*Y,y+=(n=t[10])*L,m+=n*N,g+=n*M,v+=n*F,b+=n*D,w+=n*V,S+=n*q,_+=n*K,T+=n*z,E+=n*H,k+=n*X,A+=n*$,x+=n*Q,P+=n*W,O+=n*G,C+=n*Y,m+=(n=t[11])*L,g+=n*N,v+=n*M,b+=n*F,w+=n*D,S+=n*V,_+=n*q,T+=n*K,E+=n*z,k+=n*H,A+=n*X,x+=n*$,P+=n*Q,O+=n*W,C+=n*G,I+=n*Y,g+=(n=t[12])*L,v+=n*N,b+=n*M,w+=n*F,S+=n*D,_+=n*V,T+=n*q,E+=n*K,k+=n*z,A+=n*H,x+=n*X,P+=n*$,O+=n*Q,C+=n*W,I+=n*G,R+=n*Y,v+=(n=t[13])*L,b+=n*N,w+=n*M,S+=n*F,_+=n*D,T+=n*V,E+=n*q,k+=n*K,A+=n*z,x+=n*H,P+=n*X,O+=n*$,C+=n*Q,I+=n*W,R+=n*G,B+=n*Y,b+=(n=t[14])*L,w+=n*N,S+=n*M,_+=n*F,T+=n*D,E+=n*V,k+=n*q,A+=n*K,x+=n*z,P+=n*H,O+=n*X,C+=n*$,I+=n*Q,R+=n*W,B+=n*G,j+=n*Y,w+=(n=t[15])*L,i+=38*(_+=n*M),a+=38*(T+=n*F),u+=38*(E+=n*D),l+=38*(k+=n*V),c+=38*(A+=n*q),d+=38*(x+=n*K),p+=38*(P+=n*z),f+=38*(O+=n*H),h+=38*(C+=n*X),y+=38*(I+=n*$),m+=38*(R+=n*Q),g+=38*(B+=n*W),v+=38*(j+=n*G),b+=38*(U+=n*Y),s=(n=(s+=38*(S+=n*N))+(o=1)+65535)-65536*(o=Math.floor(n/65536)),i=(n=i+o+65535)-65536*(o=Math.floor(n/65536)),a=(n=a+o+65535)-65536*(o=Math.floor(n/65536)),u=(n=u+o+65535)-65536*(o=Math.floor(n/65536)),l=(n=l+o+65535)-65536*(o=Math.floor(n/65536)),c=(n=c+o+65535)-65536*(o=Math.floor(n/65536)),d=(n=d+o+65535)-65536*(o=Math.floor(n/65536)),p=(n=p+o+65535)-65536*(o=Math.floor(n/65536)),f=(n=f+o+65535)-65536*(o=Math.floor(n/65536)),h=(n=h+o+65535)-65536*(o=Math.floor(n/65536)),y=(n=y+o+65535)-65536*(o=Math.floor(n/65536)),m=(n=m+o+65535)-65536*(o=Math.floor(n/65536)),g=(n=g+o+65535)-65536*(o=Math.floor(n/65536)),v=(n=v+o+65535)-65536*(o=Math.floor(n/65536)),b=(n=b+o+65535)-65536*(o=Math.floor(n/65536)),w=(n=w+o+65535)-65536*(o=Math.floor(n/65536)),s=(n=(s+=o-1+37*(o-1))+(o=1)+65535)-65536*(o=Math.floor(n/65536)),i=(n=i+o+65535)-65536*(o=Math.floor(n/65536)),a=(n=a+o+65535)-65536*(o=Math.floor(n/65536)),u=(n=u+o+65535)-65536*(o=Math.floor(n/65536)),l=(n=l+o+65535)-65536*(o=Math.floor(n/65536)),c=(n=c+o+65535)-65536*(o=Math.floor(n/65536)),d=(n=d+o+65535)-65536*(o=Math.floor(n/65536)),p=(n=p+o+65535)-65536*(o=Math.floor(n/65536)),f=(n=f+o+65535)-65536*(o=Math.floor(n/65536)),h=(n=h+o+65535)-65536*(o=Math.floor(n/65536)),y=(n=y+o+65535)-65536*(o=Math.floor(n/65536)),m=(n=m+o+65535)-65536*(o=Math.floor(n/65536)),g=(n=g+o+65535)-65536*(o=Math.floor(n/65536)),v=(n=v+o+65535)-65536*(o=Math.floor(n/65536)),b=(n=b+o+65535)-65536*(o=Math.floor(n/65536)),w=(n=w+o+65535)-65536*(o=Math.floor(n/65536)),s+=o-1+37*(o-1),e[0]=s,e[1]=i,e[2]=a,e[3]=u,e[4]=l,e[5]=c,e[6]=d,e[7]=p,e[8]=f,e[9]=h,e[10]=y,e[11]=m,e[12]=g,e[13]=v,e[14]=b,e[15]=w}function D(e,t){F(e,t,t)}function V(e,r){var n,o=t();for(n=0;n<16;n++)o[n]=r[n];for(n=253;n>=0;n--)D(o,o),2!==n&&4!==n&&F(o,o,r);for(n=0;n<16;n++)e[n]=o[n]}function q(e,r){var n,o=t();for(n=0;n<16;n++)o[n]=r[n];for(n=250;n>=0;n--)D(o,o),1!==n&&F(o,o,r);for(n=0;n<16;n++)e[n]=o[n]}function K(e,r,n){var o,s,i=new Uint8Array(32),a=new Float64Array(80),l=t(),c=t(),d=t(),p=t(),f=t(),h=t();for(s=0;s<31;s++)i[s]=r[s];for(i[31]=127&r[31]|64,i[0]&=248,L(a,n),s=0;s<16;s++)c[s]=a[s],p[s]=l[s]=d[s]=0;for(l[0]=p[0]=1,s=254;s>=0;--s)R(l,c,o=i[s>>>3]>>>(7&s)&1),R(d,p,o),N(f,l,d),M(l,l,d),N(d,c,p),M(c,c,p),D(p,f),D(h,l),F(l,d,l),F(d,c,f),N(f,l,d),M(l,l,d),D(c,l),M(d,p,h),F(l,d,u),N(l,l,p),F(d,d,l),F(l,p,h),F(p,c,a),D(c,f),R(l,c,o),R(d,p,o);for(s=0;s<16;s++)a[s+16]=l[s],a[s+32]=d[s],a[s+48]=c[s],a[s+64]=p[s];var y=a.subarray(32),m=a.subarray(16);return V(y,y),F(m,m,y),B(e,m),0}function z(e,t){return K(e,t,s)}function H(e,t){return n(t,32),z(e,t)}function X(e,t,r){var n=new Uint8Array(32);return K(n,r,t),b(e,o,n,w)}k.prototype.blocks=function(e,t,r){for(var n,o,s,i,a,u,l,c,d,p,f,h,y,m,g,v,b,w,S,_=this.fin?0:2048,T=this.h[0],E=this.h[1],k=this.h[2],A=this.h[3],x=this.h[4],P=this.h[5],O=this.h[6],C=this.h[7],I=this.h[8],R=this.h[9],B=this.r[0],j=this.r[1],U=this.r[2],L=this.r[3],N=this.r[4],M=this.r[5],F=this.r[6],D=this.r[7],V=this.r[8],q=this.r[9];r>=16;)p=d=0,p+=(T+=8191&(n=255&e[t+0]|(255&e[t+1])<<8))*B,p+=(E+=8191&(n>>>13|(o=255&e[t+2]|(255&e[t+3])<<8)<<3))*(5*q),p+=(k+=8191&(o>>>10|(s=255&e[t+4]|(255&e[t+5])<<8)<<6))*(5*V),p+=(A+=8191&(s>>>7|(i=255&e[t+6]|(255&e[t+7])<<8)<<9))*(5*D),d=(p+=(x+=8191&(i>>>4|(a=255&e[t+8]|(255&e[t+9])<<8)<<12))*(5*F))>>>13,p&=8191,p+=(P+=a>>>1&8191)*(5*M),p+=(O+=8191&(a>>>14|(u=255&e[t+10]|(255&e[t+11])<<8)<<2))*(5*N),p+=(C+=8191&(u>>>11|(l=255&e[t+12]|(255&e[t+13])<<8)<<5))*(5*L),p+=(I+=8191&(l>>>8|(c=255&e[t+14]|(255&e[t+15])<<8)<<8))*(5*U),f=d+=(p+=(R+=c>>>5|_)*(5*j))>>>13,f+=T*j,f+=E*B,f+=k*(5*q),f+=A*(5*V),d=(f+=x*(5*D))>>>13,f&=8191,f+=P*(5*F),f+=O*(5*M),f+=C*(5*N),f+=I*(5*L),d+=(f+=R*(5*U))>>>13,f&=8191,h=d,h+=T*U,h+=E*j,h+=k*B,h+=A*(5*q),d=(h+=x*(5*V))>>>13,h&=8191,h+=P*(5*D),h+=O*(5*F),h+=C*(5*M),h+=I*(5*N),y=d+=(h+=R*(5*L))>>>13,y+=T*L,y+=E*U,y+=k*j,y+=A*B,d=(y+=x*(5*q))>>>13,y&=8191,y+=P*(5*V),y+=O*(5*D),y+=C*(5*F),y+=I*(5*M),m=d+=(y+=R*(5*N))>>>13,m+=T*N,m+=E*L,m+=k*U,m+=A*j,d=(m+=x*B)>>>13,m&=8191,m+=P*(5*q),m+=O*(5*V),m+=C*(5*D),m+=I*(5*F),g=d+=(m+=R*(5*M))>>>13,g+=T*M,g+=E*N,g+=k*L,g+=A*U,d=(g+=x*j)>>>13,g&=8191,g+=P*B,g+=O*(5*q),g+=C*(5*V),g+=I*(5*D),v=d+=(g+=R*(5*F))>>>13,v+=T*F,v+=E*M,v+=k*N,v+=A*L,d=(v+=x*U)>>>13,v&=8191,v+=P*j,v+=O*B,v+=C*(5*q),v+=I*(5*V),b=d+=(v+=R*(5*D))>>>13,b+=T*D,b+=E*F,b+=k*M,b+=A*N,d=(b+=x*L)>>>13,b&=8191,b+=P*U,b+=O*j,b+=C*B,b+=I*(5*q),w=d+=(b+=R*(5*V))>>>13,w+=T*V,w+=E*D,w+=k*F,w+=A*M,d=(w+=x*N)>>>13,w&=8191,w+=P*L,w+=O*U,w+=C*j,w+=I*B,S=d+=(w+=R*(5*q))>>>13,S+=T*q,S+=E*V,S+=k*D,S+=A*F,d=(S+=x*M)>>>13,S&=8191,S+=P*N,S+=O*L,S+=C*U,S+=I*j,T=p=8191&(d=(d=((d+=(S+=R*B)>>>13)<<2)+d|0)+(p&=8191)|0),E=f+=d>>>=13,k=h&=8191,A=y&=8191,x=m&=8191,P=g&=8191,O=v&=8191,C=b&=8191,I=w&=8191,R=S&=8191,t+=16,r-=16;this.h[0]=T,this.h[1]=E,this.h[2]=k,this.h[3]=A,this.h[4]=x,this.h[5]=P,this.h[6]=O,this.h[7]=C,this.h[8]=I,this.h[9]=R},k.prototype.finish=function(e,t){var r,n,o,s,i=new Uint16Array(10);if(this.leftover){for(s=this.leftover,this.buffer[s++]=1;s<16;s++)this.buffer[s]=0;this.fin=1,this.blocks(this.buffer,0,16)}for(r=this.h[1]>>>13,this.h[1]&=8191,s=2;s<10;s++)this.h[s]+=r,r=this.h[s]>>>13,this.h[s]&=8191;for(this.h[0]+=5*r,r=this.h[0]>>>13,this.h[0]&=8191,this.h[1]+=r,r=this.h[1]>>>13,this.h[1]&=8191,this.h[2]+=r,i[0]=this.h[0]+5,r=i[0]>>>13,i[0]&=8191,s=1;s<10;s++)i[s]=this.h[s]+r,r=i[s]>>>13,i[s]&=8191;for(i[9]-=8192,n=(1^r)-1,s=0;s<10;s++)i[s]&=n;for(n=~n,s=0;s<10;s++)this.h[s]=this.h[s]&n|i[s];for(this.h[0]=65535&(this.h[0]|this.h[1]<<13),this.h[1]=65535&(this.h[1]>>>3|this.h[2]<<10),this.h[2]=65535&(this.h[2]>>>6|this.h[3]<<7),this.h[3]=65535&(this.h[3]>>>9|this.h[4]<<4),this.h[4]=65535&(this.h[4]>>>12|this.h[5]<<1|this.h[6]<<14),this.h[5]=65535&(this.h[6]>>>2|this.h[7]<<11),this.h[6]=65535&(this.h[7]>>>5|this.h[8]<<8),this.h[7]=65535&(this.h[8]>>>8|this.h[9]<<5),o=this.h[0]+this.pad[0],this.h[0]=65535&o,s=1;s<8;s++)o=(this.h[s]+this.pad[s]|0)+(o>>>16)|0,this.h[s]=65535&o;e[t+0]=this.h[0]>>>0&255,e[t+1]=this.h[0]>>>8&255,e[t+2]=this.h[1]>>>0&255,e[t+3]=this.h[1]>>>8&255,e[t+4]=this.h[2]>>>0&255,e[t+5]=this.h[2]>>>8&255,e[t+6]=this.h[3]>>>0&255,e[t+7]=this.h[3]>>>8&255,e[t+8]=this.h[4]>>>0&255,e[t+9]=this.h[4]>>>8&255,e[t+10]=this.h[5]>>>0&255,e[t+11]=this.h[5]>>>8&255,e[t+12]=this.h[6]>>>0&255,e[t+13]=this.h[6]>>>8&255,e[t+14]=this.h[7]>>>0&255,e[t+15]=this.h[7]>>>8&255},k.prototype.update=function(e,t,r){var n,o;if(this.leftover){for((o=16-this.leftover)>r&&(o=r),n=0;n<o;n++)this.buffer[this.leftover+n]=e[t+n];if(r-=o,t+=o,this.leftover+=o,this.leftover<16)return;this.blocks(this.buffer,0,16),this.leftover=0}if(r>=16&&(o=r-r%16,this.blocks(e,t,o),t+=o,r-=o),r){for(n=0;n<r;n++)this.buffer[this.leftover+n]=e[t+n];this.leftover+=r}};var $=P,Q=O;var W=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function G(e,t,r,n){for(var o,s,i,a,u,l,c,d,p,f,h,y,m,g,v,b,w,S,_,T,E,k,A,x,P,O,C=new Int32Array(16),I=new Int32Array(16),R=e[0],B=e[1],j=e[2],U=e[3],L=e[4],N=e[5],M=e[6],F=e[7],D=t[0],V=t[1],q=t[2],K=t[3],z=t[4],H=t[5],X=t[6],$=t[7],Q=0;n>=128;){for(_=0;_<16;_++)T=8*_+Q,C[_]=r[T+0]<<24|r[T+1]<<16|r[T+2]<<8|r[T+3],I[_]=r[T+4]<<24|r[T+5]<<16|r[T+6]<<8|r[T+7];for(_=0;_<80;_++)if(o=R,s=B,i=j,a=U,u=L,l=N,c=M,F,p=D,f=V,h=q,y=K,m=z,g=H,v=X,$,A=65535&(k=$),x=k>>>16,P=65535&(E=F),O=E>>>16,A+=65535&(k=(z>>>14|L<<18)^(z>>>18|L<<14)^(L>>>9|z<<23)),x+=k>>>16,P+=65535&(E=(L>>>14|z<<18)^(L>>>18|z<<14)^(z>>>9|L<<23)),O+=E>>>16,A+=65535&(k=z&H^~z&X),x+=k>>>16,P+=65535&(E=L&N^~L&M),O+=E>>>16,A+=65535&(k=W[2*_+1]),x+=k>>>16,P+=65535&(E=W[2*_]),O+=E>>>16,E=C[_%16],x+=(k=I[_%16])>>>16,P+=65535&E,O+=E>>>16,P+=(x+=(A+=65535&k)>>>16)>>>16,A=65535&(k=S=65535&A|x<<16),x=k>>>16,P=65535&(E=w=65535&P|(O+=P>>>16)<<16),O=E>>>16,A+=65535&(k=(D>>>28|R<<4)^(R>>>2|D<<30)^(R>>>7|D<<25)),x+=k>>>16,P+=65535&(E=(R>>>28|D<<4)^(D>>>2|R<<30)^(D>>>7|R<<25)),O+=E>>>16,x+=(k=D&V^D&q^V&q)>>>16,P+=65535&(E=R&B^R&j^B&j),O+=E>>>16,d=65535&(P+=(x+=(A+=65535&k)>>>16)>>>16)|(O+=P>>>16)<<16,b=65535&A|x<<16,A=65535&(k=y),x=k>>>16,P=65535&(E=a),O=E>>>16,x+=(k=S)>>>16,P+=65535&(E=w),O+=E>>>16,B=o,j=s,U=i,L=a=65535&(P+=(x+=(A+=65535&k)>>>16)>>>16)|(O+=P>>>16)<<16,N=u,M=l,F=c,R=d,V=p,q=f,K=h,z=y=65535&A|x<<16,H=m,X=g,$=v,D=b,_%16==15)for(T=0;T<16;T++)E=C[T],A=65535&(k=I[T]),x=k>>>16,P=65535&E,O=E>>>16,E=C[(T+9)%16],A+=65535&(k=I[(T+9)%16]),x+=k>>>16,P+=65535&E,O+=E>>>16,w=C[(T+1)%16],A+=65535&(k=((S=I[(T+1)%16])>>>1|w<<31)^(S>>>8|w<<24)^(S>>>7|w<<25)),x+=k>>>16,P+=65535&(E=(w>>>1|S<<31)^(w>>>8|S<<24)^w>>>7),O+=E>>>16,w=C[(T+14)%16],x+=(k=((S=I[(T+14)%16])>>>19|w<<13)^(w>>>29|S<<3)^(S>>>6|w<<26))>>>16,P+=65535&(E=(w>>>19|S<<13)^(S>>>29|w<<3)^w>>>6),O+=E>>>16,O+=(P+=(x+=(A+=65535&k)>>>16)>>>16)>>>16,C[T]=65535&P|O<<16,I[T]=65535&A|x<<16;A=65535&(k=D),x=k>>>16,P=65535&(E=R),O=E>>>16,E=e[0],x+=(k=t[0])>>>16,P+=65535&E,O+=E>>>16,O+=(P+=(x+=(A+=65535&k)>>>16)>>>16)>>>16,e[0]=R=65535&P|O<<16,t[0]=D=65535&A|x<<16,A=65535&(k=V),x=k>>>16,P=65535&(E=B),O=E>>>16,E=e[1],x+=(k=t[1])>>>16,P+=65535&E,O+=E>>>16,O+=(P+=(x+=(A+=65535&k)>>>16)>>>16)>>>16,e[1]=B=65535&P|O<<16,t[1]=V=65535&A|x<<16,A=65535&(k=q),x=k>>>16,P=65535&(E=j),O=E>>>16,E=e[2],x+=(k=t[2])>>>16,P+=65535&E,O+=E>>>16,O+=(P+=(x+=(A+=65535&k)>>>16)>>>16)>>>16,e[2]=j=65535&P|O<<16,t[2]=q=65535&A|x<<16,A=65535&(k=K),x=k>>>16,P=65535&(E=U),O=E>>>16,E=e[3],x+=(k=t[3])>>>16,P+=65535&E,O+=E>>>16,O+=(P+=(x+=(A+=65535&k)>>>16)>>>16)>>>16,e[3]=U=65535&P|O<<16,t[3]=K=65535&A|x<<16,A=65535&(k=z),x=k>>>16,P=65535&(E=L),O=E>>>16,E=e[4],x+=(k=t[4])>>>16,P+=65535&E,O+=E>>>16,O+=(P+=(x+=(A+=65535&k)>>>16)>>>16)>>>16,e[4]=L=65535&P|O<<16,t[4]=z=65535&A|x<<16,A=65535&(k=H),x=k>>>16,P=65535&(E=N),O=E>>>16,E=e[5],x+=(k=t[5])>>>16,P+=65535&E,O+=E>>>16,O+=(P+=(x+=(A+=65535&k)>>>16)>>>16)>>>16,e[5]=N=65535&P|O<<16,t[5]=H=65535&A|x<<16,A=65535&(k=X),x=k>>>16,P=65535&(E=M),O=E>>>16,E=e[6],x+=(k=t[6])>>>16,P+=65535&E,O+=E>>>16,O+=(P+=(x+=(A+=65535&k)>>>16)>>>16)>>>16,e[6]=M=65535&P|O<<16,t[6]=X=65535&A|x<<16,A=65535&(k=$),x=k>>>16,P=65535&(E=F),O=E>>>16,E=e[7],x+=(k=t[7])>>>16,P+=65535&E,O+=E>>>16,O+=(P+=(x+=(A+=65535&k)>>>16)>>>16)>>>16,e[7]=F=65535&P|O<<16,t[7]=$=65535&A|x<<16,Q+=128,n-=128}return n}function Y(e,t,r){var n,o=new Int32Array(8),s=new Int32Array(8),i=new Uint8Array(256),a=r;for(o[0]=1779033703,o[1]=3144134277,o[2]=1013904242,o[3]=2773480762,o[4]=1359893119,o[5]=2600822924,o[6]=528734635,o[7]=1541459225,s[0]=4089235720,s[1]=2227873595,s[2]=4271175723,s[3]=1595750129,s[4]=2917565137,s[5]=725511199,s[6]=4215389547,s[7]=327033209,G(o,s,t,r),r%=128,n=0;n<r;n++)i[n]=t[a-r+n];for(i[r]=128,i[(r=256-128*(r<112?1:0))-9]=0,h(i,r-8,a/536870912|0,a<<3),G(o,s,i,r),n=0;n<8;n++)h(e,8*n,o[n],s[n]);return 0}function J(e,r){var n=t(),o=t(),s=t(),i=t(),a=t(),u=t(),l=t(),d=t(),p=t();M(n,e[1],e[0]),M(p,r[1],r[0]),F(n,n,p),N(o,e[0],e[1]),N(p,r[0],r[1]),F(o,o,p),F(s,e[3],r[3]),F(s,s,c),F(i,e[2],r[2]),N(i,i,i),M(a,o,n),M(u,i,s),N(l,i,s),N(d,o,n),F(e[0],a,u),F(e[1],d,l),F(e[2],l,u),F(e[3],a,d)}function Z(e,t,r){var n;for(n=0;n<4;n++)R(e[n],t[n],r)}function ee(e,r){var n=t(),o=t(),s=t();V(s,r[2]),F(n,r[0],s),F(o,r[1],s),B(e,o),e[31]^=U(n)<<7}function te(e,t,r){var n,o;for(C(e[0],i),C(e[1],a),C(e[2],a),C(e[3],i),o=255;o>=0;--o)Z(e,t,n=r[o/8|0]>>(7&o)&1),J(t,e),J(e,e),Z(e,t,n)}function re(e,r){var n=[t(),t(),t(),t()];C(n[0],d),C(n[1],p),C(n[2],a),F(n[3],d,p),te(e,n,r)}function ne(e,r,o){var s,i=new Uint8Array(64),a=[t(),t(),t(),t()];for(o||n(r,32),Y(i,r,32),i[0]&=248,i[31]&=127,i[31]|=64,re(a,i),ee(e,a),s=0;s<32;s++)r[s+32]=e[s];return 0}var oe=new Float64Array([237,211,245,92,26,99,18,88,214,156,247,162,222,249,222,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16]);function se(e,t){var r,n,o,s;for(n=63;n>=32;--n){for(r=0,o=n-32,s=n-12;o<s;++o)t[o]+=r-16*t[n]*oe[o-(n-32)],r=Math.floor((t[o]+128)/256),t[o]-=256*r;t[o]+=r,t[n]=0}for(r=0,o=0;o<32;o++)t[o]+=r-(t[31]>>4)*oe[o],r=t[o]>>8,t[o]&=255;for(o=0;o<32;o++)t[o]-=r*oe[o];for(n=0;n<32;n++)t[n+1]+=t[n]>>8,e[n]=255&t[n]}function ie(e){var t,r=new Float64Array(64);for(t=0;t<64;t++)r[t]=e[t];for(t=0;t<64;t++)e[t]=0;se(e,r)}function ae(e,r,n,o){var s,i,a=new Uint8Array(64),u=new Uint8Array(64),l=new Uint8Array(64),c=new Float64Array(64),d=[t(),t(),t(),t()];Y(a,o,32),a[0]&=248,a[31]&=127,a[31]|=64;var p=n+64;for(s=0;s<n;s++)e[64+s]=r[s];for(s=0;s<32;s++)e[32+s]=a[32+s];for(Y(l,e.subarray(32),n+32),ie(l),re(d,l),ee(e,d),s=32;s<64;s++)e[s]=o[s];for(Y(u,e,n+64),ie(u),s=0;s<64;s++)c[s]=0;for(s=0;s<32;s++)c[s]=l[s];for(s=0;s<32;s++)for(i=0;i<32;i++)c[s+i]+=u[s]*a[i];return se(e.subarray(32),c),p}function ue(e,r,n,o){var s,u=new Uint8Array(32),c=new Uint8Array(64),d=[t(),t(),t(),t()],p=[t(),t(),t(),t()];if(n<64)return-1;if(function(e,r){var n=t(),o=t(),s=t(),u=t(),c=t(),d=t(),p=t();return C(e[2],a),L(e[1],r),D(s,e[1]),F(u,s,l),M(s,s,e[2]),N(u,e[2],u),D(c,u),D(d,c),F(p,d,c),F(n,p,s),F(n,n,u),q(n,n),F(n,n,s),F(n,n,u),F(n,n,u),F(e[0],n,u),D(o,e[0]),F(o,o,u),j(o,s)&&F(e[0],e[0],f),D(o,e[0]),F(o,o,u),j(o,s)?-1:(U(e[0])===r[31]>>7&&M(e[0],i,e[0]),F(e[3],e[0],e[1]),0)}(p,o))return-1;for(s=0;s<n;s++)e[s]=r[s];for(s=0;s<32;s++)e[s+32]=o[s];if(Y(c,e,n),ie(c),te(d,p,c),re(p,r.subarray(32)),J(d,p),ee(u,d),n-=64,g(r,0,u,0)){for(s=0;s<n;s++)e[s]=0;return-1}for(s=0;s<n;s++)e[s]=r[s+64];return n}var le=16,ce=64,de=32,pe=64;function fe(e,t){if(32!==e.length)throw new Error("bad key size");if(24!==t.length)throw new Error("bad nonce size")}function he(){for(var e=0;e<arguments.length;e++)if(!(arguments[e]instanceof Uint8Array))throw new TypeError("unexpected type, use Uint8Array")}function ye(e){for(var t=0;t<e.length;t++)e[t]=0}e.lowlevel={crypto_core_hsalsa20:b,crypto_stream_xor:E,crypto_stream:T,crypto_stream_salsa20_xor:S,crypto_stream_salsa20:_,crypto_onetimeauth:A,crypto_onetimeauth_verify:x,crypto_verify_16:m,crypto_verify_32:g,crypto_secretbox:P,crypto_secretbox_open:O,crypto_scalarmult:K,crypto_scalarmult_base:z,crypto_box_beforenm:X,crypto_box_afternm:$,crypto_box:function(e,t,r,n,o,s){var i=new Uint8Array(32);return X(i,o,s),$(e,t,r,n,i)},crypto_box_open:function(e,t,r,n,o,s){var i=new Uint8Array(32);return X(i,o,s),Q(e,t,r,n,i)},crypto_box_keypair:H,crypto_hash:Y,crypto_sign:ae,crypto_sign_keypair:ne,crypto_sign_open:ue,crypto_secretbox_KEYBYTES:32,crypto_secretbox_NONCEBYTES:24,crypto_secretbox_ZEROBYTES:32,crypto_secretbox_BOXZEROBYTES:le,crypto_scalarmult_BYTES:32,crypto_scalarmult_SCALARBYTES:32,crypto_box_PUBLICKEYBYTES:32,crypto_box_SECRETKEYBYTES:32,crypto_box_BEFORENMBYTES:32,crypto_box_NONCEBYTES:24,crypto_box_ZEROBYTES:32,crypto_box_BOXZEROBYTES:16,crypto_sign_BYTES:ce,crypto_sign_PUBLICKEYBYTES:de,crypto_sign_SECRETKEYBYTES:pe,crypto_sign_SEEDBYTES:32,crypto_hash_BYTES:64,gf:t,D:l,L:oe,pack25519:B,unpack25519:L,M:F,A:N,S:D,Z:M,pow2523:q,add:J,set25519:C,modL:se,scalarmult:te,scalarbase:re},e.randomBytes=function(e){var t=new Uint8Array(e);return n(t,e),t},e.secretbox=function(e,t,r){he(e,t,r),fe(r,t);for(var n=new Uint8Array(32+e.length),o=new Uint8Array(n.length),s=0;s<e.length;s++)n[s+32]=e[s];return P(o,n,n.length,t,r),o.subarray(le)},e.secretbox.open=function(e,t,r){he(e,t,r),fe(r,t);for(var n=new Uint8Array(le+e.length),o=new Uint8Array(n.length),s=0;s<e.length;s++)n[s+le]=e[s];return n.length<32||0!==O(o,n,n.length,t,r)?null:o.subarray(32)},e.secretbox.keyLength=32,e.secretbox.nonceLength=24,e.secretbox.overheadLength=le,e.scalarMult=function(e,t){if(he(e,t),32!==e.length)throw new Error("bad n size");if(32!==t.length)throw new Error("bad p size");var r=new Uint8Array(32);return K(r,e,t),r},e.scalarMult.base=function(e){if(he(e),32!==e.length)throw new Error("bad n size");var t=new Uint8Array(32);return z(t,e),t},e.scalarMult.scalarLength=32,e.scalarMult.groupElementLength=32,e.box=function(t,r,n,o){var s=e.box.before(n,o);return e.secretbox(t,r,s)},e.box.before=function(e,t){he(e,t),function(e,t){if(32!==e.length)throw new Error("bad public key size");if(32!==t.length)throw new Error("bad secret key size")}(e,t);var r=new Uint8Array(32);return X(r,e,t),r},e.box.after=e.secretbox,e.box.open=function(t,r,n,o){var s=e.box.before(n,o);return e.secretbox.open(t,r,s)},e.box.open.after=e.secretbox.open,e.box.keyPair=function(){var e=new Uint8Array(32),t=new Uint8Array(32);return H(e,t),{publicKey:e,secretKey:t}},e.box.keyPair.fromSecretKey=function(e){if(he(e),32!==e.length)throw new Error("bad secret key size");var t=new Uint8Array(32);return z(t,e),{publicKey:t,secretKey:new Uint8Array(e)}},e.box.publicKeyLength=32,e.box.secretKeyLength=32,e.box.sharedKeyLength=32,e.box.nonceLength=24,e.box.overheadLength=e.secretbox.overheadLength,e.sign=function(e,t){if(he(e,t),t.length!==pe)throw new Error("bad secret key size");var r=new Uint8Array(ce+e.length);return ae(r,e,e.length,t),r},e.sign.open=function(e,t){if(he(e,t),t.length!==de)throw new Error("bad public key size");var r=new Uint8Array(e.length),n=ue(r,e,e.length,t);if(n<0)return null;for(var o=new Uint8Array(n),s=0;s<o.length;s++)o[s]=r[s];return o},e.sign.detached=function(t,r){for(var n=e.sign(t,r),o=new Uint8Array(ce),s=0;s<o.length;s++)o[s]=n[s];return o},e.sign.detached.verify=function(e,t,r){if(he(e,t,r),t.length!==ce)throw new Error("bad signature size");if(r.length!==de)throw new Error("bad public key size");var n,o=new Uint8Array(ce+e.length),s=new Uint8Array(ce+e.length);for(n=0;n<ce;n++)o[n]=t[n];for(n=0;n<e.length;n++)o[n+ce]=e[n];return ue(s,o,o.length,r)>=0},e.sign.keyPair=function(){var e=new Uint8Array(de),t=new Uint8Array(pe);return ne(e,t),{publicKey:e,secretKey:t}},e.sign.keyPair.fromSecretKey=function(e){if(he(e),e.length!==pe)throw new Error("bad secret key size");for(var t=new Uint8Array(de),r=0;r<t.length;r++)t[r]=e[32+r];return{publicKey:t,secretKey:new Uint8Array(e)}},e.sign.keyPair.fromSeed=function(e){if(he(e),32!==e.length)throw new Error("bad seed size");for(var t=new Uint8Array(de),r=new Uint8Array(pe),n=0;n<32;n++)r[n]=e[n];return ne(t,r,!0),{publicKey:t,secretKey:r}},e.sign.publicKeyLength=de,e.sign.secretKeyLength=pe,e.sign.seedLength=32,e.sign.signatureLength=ce,e.hash=function(e){he(e);var t=new Uint8Array(64);return Y(t,e,e.length),t},e.hash.hashLength=64,e.verify=function(e,t){return he(e,t),0!==e.length&&0!==t.length&&(e.length===t.length&&0===y(e,0,t,0,e.length))},e.setPRNG=function(e){n=e},function(){var t="undefined"!=typeof self?self.crypto||self.msCrypto:null;if(t&&t.getRandomValues){e.setPRNG((function(e,r){var n,o=new Uint8Array(r);for(n=0;n<r;n+=65536)t.getRandomValues(o.subarray(n,n+Math.min(r-n,65536)));for(n=0;n<r;n++)e[n]=o[n];ye(o)}))}else(t=r("?dba7"))&&t.randomBytes&&e.setPRNG((function(e,r){var n,o=t.randomBytes(r);for(n=0;n<r;n++)e[n]=o[n];ye(o)}))}()}(e.exports?e.exports:self.nacl=self.nacl||{})},"./node_modules/urijs/src/IPv6.js":function(e,t,r){var n,o;!function(s,i){"use strict";e.exports?e.exports=i():void 0===(o="function"==typeof(n=i)?n.call(t,r,t,e):n)||(e.exports=o)}(0,(function(e){"use strict";var t=e&&e.IPv6;return{best:function(e){var t,r,n=e.toLowerCase().split(":"),o=n.length,s=8;for(""===n[0]&&""===n[1]&&""===n[2]?(n.shift(),n.shift()):""===n[0]&&""===n[1]?n.shift():""===n[o-1]&&""===n[o-2]&&n.pop(),-1!==n[(o=n.length)-1].indexOf(".")&&(s=7),t=0;t<o&&""!==n[t];t++);if(t<s)for(n.splice(t,1,"0000");n.length<s;)n.splice(t,0,"0000");for(var i=0;i<s;i++){r=n[i].split("");for(var a=0;a<3&&("0"===r[0]&&r.length>1);a++)r.splice(0,1);n[i]=r.join("")}var u=-1,l=0,c=0,d=-1,p=!1;for(i=0;i<s;i++)p?"0"===n[i]?c+=1:(p=!1,c>l&&(u=d,l=c)):"0"===n[i]&&(p=!0,d=i,c=1);c>l&&(u=d,l=c),l>1&&n.splice(u,l,""),o=n.length;var f="";for(""===n[0]&&(f=":"),i=0;i<o&&(f+=n[i],i!==o-1);i++)f+=":";return""===n[o-1]&&(f+=":"),f},noConflict:function(){return e.IPv6===this&&(e.IPv6=t),this}}}))},"./node_modules/urijs/src/SecondLevelDomains.js":function(e,t,r){var n,o;!function(s,i){"use strict";e.exports?e.exports=i():void 0===(o="function"==typeof(n=i)?n.call(t,r,t,e):n)||(e.exports=o)}(0,(function(e){"use strict";var t=e&&e.SecondLevelDomains,r={list:{ac:" com gov mil net org ",ae:" ac co gov mil name net org pro sch ",af:" com edu gov net org ",al:" com edu gov mil net org ",ao:" co ed gv it og pb ",ar:" com edu gob gov int mil net org tur ",at:" ac co gv or ",au:" asn com csiro edu gov id net org ",ba:" co com edu gov mil net org rs unbi unmo unsa untz unze ",bb:" biz co com edu gov info net org store tv ",bh:" biz cc com edu gov info net org ",bn:" com edu gov net org ",bo:" com edu gob gov int mil net org tv ",br:" adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ",bs:" com edu gov net org ",bz:" du et om ov rg ",ca:" ab bc mb nb nf nl ns nt nu on pe qc sk yk ",ck:" biz co edu gen gov info net org ",cn:" ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ",co:" com edu gov mil net nom org ",cr:" ac c co ed fi go or sa ",cy:" ac biz com ekloges gov ltd name net org parliament press pro tm ",do:" art com edu gob gov mil net org sld web ",dz:" art asso com edu gov net org pol ",ec:" com edu fin gov info med mil net org pro ",eg:" com edu eun gov mil name net org sci ",er:" com edu gov ind mil net org rochest w ",es:" com edu gob nom org ",et:" biz com edu gov info name net org ",fj:" ac biz com info mil name net org pro ",fk:" ac co gov net nom org ",fr:" asso com f gouv nom prd presse tm ",gg:" co net org ",gh:" com edu gov mil org ",gn:" ac com gov net org ",gr:" com edu gov mil net org ",gt:" com edu gob ind mil net org ",gu:" com edu gov net org ",hk:" com edu gov idv net org ",hu:" 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ",id:" ac co go mil net or sch web ",il:" ac co gov idf k12 muni net org ",in:" ac co edu ernet firm gen gov i ind mil net nic org res ",iq:" com edu gov i mil net org ",ir:" ac co dnssec gov i id net org sch ",it:" edu gov ",je:" co net org ",jo:" com edu gov mil name net org sch ",jp:" ac ad co ed go gr lg ne or ",ke:" ac co go info me mobi ne or sc ",kh:" com edu gov mil net org per ",ki:" biz com de edu gov info mob net org tel ",km:" asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ",kn:" edu gov net org ",kr:" ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ",kw:" com edu gov net org ",ky:" com edu gov net org ",kz:" com edu gov mil net org ",lb:" com edu gov net org ",lk:" assn com edu gov grp hotel int ltd net ngo org sch soc web ",lr:" com edu gov net org ",lv:" asn com conf edu gov id mil net org ",ly:" com edu gov id med net org plc sch ",ma:" ac co gov m net org press ",mc:" asso tm ",me:" ac co edu gov its net org priv ",mg:" com edu gov mil nom org prd tm ",mk:" com edu gov inf name net org pro ",ml:" com edu gov net org presse ",mn:" edu gov org ",mo:" com edu gov net org ",mt:" com edu gov net org ",mv:" aero biz com coop edu gov info int mil museum name net org pro ",mw:" ac co com coop edu gov int museum net org ",mx:" com edu gob net org ",my:" com edu gov mil name net org sch ",nf:" arts com firm info net other per rec store web ",ng:" biz com edu gov mil mobi name net org sch ",ni:" ac co com edu gob mil net nom org ",np:" com edu gov mil net org ",nr:" biz com edu gov info net org ",om:" ac biz co com edu gov med mil museum net org pro sch ",pe:" com edu gob mil net nom org sld ",ph:" com edu gov i mil net ngo org ",pk:" biz com edu fam gob gok gon gop gos gov net org web ",pl:" art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ",pr:" ac biz com edu est gov info isla name net org pro prof ",ps:" com edu gov net org plo sec ",pw:" belau co ed go ne or ",ro:" arts com firm info nom nt org rec store tm www ",rs:" ac co edu gov in org ",sb:" com edu gov net org ",sc:" com edu gov net org ",sh:" co com edu gov net nom org ",sl:" com edu gov net org ",st:" co com consulado edu embaixada gov mil net org principe saotome store ",sv:" com edu gob org red ",sz:" ac co org ",tr:" av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ",tt:" aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ",tw:" club com ebiz edu game gov idv mil net org ",mu:" ac co com gov net or org ",mz:" ac co edu gov org ",na:" co com ",nz:" ac co cri geek gen govt health iwi maori mil net org parliament school ",pa:" abo ac com edu gob ing med net nom org sld ",pt:" com edu gov int net nome org publ ",py:" com edu gov mil net org ",qa:" com edu gov mil net org ",re:" asso com nom ",ru:" ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ",rw:" ac co com edu gouv gov int mil net ",sa:" com edu gov med net org pub sch ",sd:" com edu gov info med net org tv ",se:" a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ",sg:" com edu gov idn net org per ",sn:" art com edu gouv org perso univ ",sy:" com edu gov mil net news org ",th:" ac co go in mi net or ",tj:" ac biz co com edu go gov info int mil name net nic org test web ",tn:" agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ",tz:" ac co go ne or ",ua:" biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ",ug:" ac co go ne or org sc ",uk:" ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ",us:" dni fed isa kids nsn ",uy:" com edu gub mil net org ",ve:" co com edu gob info mil net org web ",vi:" co com k12 net org ",vn:" ac biz com edu gov health info int name net org pro ",ye:" co com gov ltd me net org plc ",yu:" ac co edu gov org ",za:" ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ",zm:" ac co com edu gov net org sch ",com:"ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ",net:"gb jp se uk ",org:"ae",de:"com "},has:function(e){var t=e.lastIndexOf(".");if(t<=0||t>=e.length-1)return!1;var n=e.lastIndexOf(".",t-1);if(n<=0||n>=t-1)return!1;var o=r.list[e.slice(t+1)];return!!o&&o.indexOf(" "+e.slice(n+1,t)+" ")>=0},is:function(e){var t=e.lastIndexOf(".");if(t<=0||t>=e.length-1)return!1;if(e.lastIndexOf(".",t-1)>=0)return!1;var n=r.list[e.slice(t+1)];return!!n&&n.indexOf(" "+e.slice(0,t)+" ")>=0},get:function(e){var t=e.lastIndexOf(".");if(t<=0||t>=e.length-1)return null;var n=e.lastIndexOf(".",t-1);if(n<=0||n>=t-1)return null;var o=r.list[e.slice(t+1)];return o?o.indexOf(" "+e.slice(n+1,t)+" ")<0?null:e.slice(n+1):null},noConflict:function(){return e.SecondLevelDomains===this&&(e.SecondLevelDomains=t),this}};return r}))},"./node_modules/urijs/src/URI.js":function(e,t,r){var n,o,s;!function(i,a){"use strict";e.exports?e.exports=a(r("./node_modules/urijs/src/punycode.js"),r("./node_modules/urijs/src/IPv6.js"),r("./node_modules/urijs/src/SecondLevelDomains.js")):(o=[r("./node_modules/urijs/src/punycode.js"),r("./node_modules/urijs/src/IPv6.js"),r("./node_modules/urijs/src/SecondLevelDomains.js")],void 0===(s="function"==typeof(n=a)?n.apply(t,o):n)||(e.exports=s))}(0,(function(e,t,r,n){"use strict";var o=n&&n.URI;function s(e,t){var r=arguments.length>=1;if(!(this instanceof s))return r?arguments.length>=2?new s(e,t):new s(e):new s;if(void 0===e){if(r)throw new TypeError("undefined is not a valid argument for URI");e="undefined"!=typeof location?location.href+"":""}if(null===e&&r)throw new TypeError("null is not a valid argument for URI");return this.href(e),void 0!==t?this.absoluteTo(t):this}s.version="1.19.11";var i=s.prototype,a=Object.prototype.hasOwnProperty;function u(e){return e.replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$1")}function l(e){return void 0===e?"Undefined":String(Object.prototype.toString.call(e)).slice(8,-1)}function c(e){return"Array"===l(e)}function d(e,t){var r,n,o={};if("RegExp"===l(t))o=null;else if(c(t))for(r=0,n=t.length;r<n;r++)o[t[r]]=!0;else o[t]=!0;for(r=0,n=e.length;r<n;r++){(o&&void 0!==o[e[r]]||!o&&t.test(e[r]))&&(e.splice(r,1),n--,r--)}return e}function p(e,t){var r,n;if(c(t)){for(r=0,n=t.length;r<n;r++)if(!p(e,t[r]))return!1;return!0}var o=l(t);for(r=0,n=e.length;r<n;r++)if("RegExp"===o){if("string"==typeof e[r]&&e[r].match(t))return!0}else if(e[r]===t)return!0;return!1}function f(e,t){if(!c(e)||!c(t))return!1;if(e.length!==t.length)return!1;e.sort(),t.sort();for(var r=0,n=e.length;r<n;r++)if(e[r]!==t[r])return!1;return!0}function h(e){return e.replace(/^\/+|\/+$/g,"")}function y(e){return escape(e)}function m(e){return encodeURIComponent(e).replace(/[!'()*]/g,y).replace(/\*/g,"%2A")}s._parts=function(){return{protocol:null,username:null,password:null,hostname:null,urn:null,port:null,path:null,query:null,fragment:null,preventInvalidHostname:s.preventInvalidHostname,duplicateQueryParameters:s.duplicateQueryParameters,escapeQuerySpace:s.escapeQuerySpace}},s.preventInvalidHostname=!1,s.duplicateQueryParameters=!1,s.escapeQuerySpace=!0,s.protocol_expression=/^[a-z][a-z0-9.+-]*$/i,s.idn_expression=/[^a-z0-9\._-]/i,s.punycode_expression=/(xn--)/i,s.ip4_expression=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,s.ip6_expression=/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,s.find_uri_expression=/\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?\xab\xbb\u201c\u201d\u2018\u2019]))/gi,s.findUri={start:/\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,end:/[\s\r\n]|$/,trim:/[`!()\[\]{};:'".,<>?\xab\xbb\u201c\u201d\u201e\u2018\u2019]+$/,parens:/(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g},s.leading_whitespace_expression=/^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/,s.ascii_tab_whitespace=/[\u0009\u000A\u000D]+/g,s.defaultPorts={http:"80",https:"443",ftp:"21",gopher:"70",ws:"80",wss:"443"},s.hostProtocols=["http","https"],s.invalid_hostname_characters=/[^a-zA-Z0-9\.\-:_]/,s.domAttributes={a:"href",blockquote:"cite",link:"href",base:"href",script:"src",form:"action",img:"src",area:"href",iframe:"src",embed:"src",source:"src",track:"src",input:"src",audio:"src",video:"src"},s.getDomAttribute=function(e){if(e&&e.nodeName){var t=e.nodeName.toLowerCase();if("input"!==t||"image"===e.type)return s.domAttributes[t]}},s.encode=m,s.decode=decodeURIComponent,s.iso8859=function(){s.encode=escape,s.decode=unescape},s.unicode=function(){s.encode=m,s.decode=decodeURIComponent},s.characters={pathname:{encode:{expression:/%(24|26|2B|2C|3B|3D|3A|40)/gi,map:{"%24":"$","%26":"&","%2B":"+","%2C":",","%3B":";","%3D":"=","%3A":":","%40":"@"}},decode:{expression:/[\/\?#]/g,map:{"/":"%2F","?":"%3F","#":"%23"}}},reserved:{encode:{expression:/%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/gi,map:{"%3A":":","%2F":"/","%3F":"?","%23":"#","%5B":"[","%5D":"]","%40":"@","%21":"!","%24":"$","%26":"&","%27":"'","%28":"(","%29":")","%2A":"*","%2B":"+","%2C":",","%3B":";","%3D":"="}}},urnpath:{encode:{expression:/%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/gi,map:{"%21":"!","%24":"$","%27":"'","%28":"(","%29":")","%2A":"*","%2B":"+","%2C":",","%3B":";","%3D":"=","%40":"@"}},decode:{expression:/[\/\?#:]/g,map:{"/":"%2F","?":"%3F","#":"%23",":":"%3A"}}}},s.encodeQuery=function(e,t){var r=s.encode(e+"");return void 0===t&&(t=s.escapeQuerySpace),t?r.replace(/%20/g,"+"):r},s.decodeQuery=function(e,t){e+="",void 0===t&&(t=s.escapeQuerySpace);try{return s.decode(t?e.replace(/\+/g,"%20"):e)}catch(t){return e}};var g,v={encode:"encode",decode:"decode"},b=function(e,t){return function(r){try{return s[t](r+"").replace(s.characters[e][t].expression,(function(r){return s.characters[e][t].map[r]}))}catch(e){return r}}};for(g in v)s[g+"PathSegment"]=b("pathname",v[g]),s[g+"UrnPathSegment"]=b("urnpath",v[g]);var w=function(e,t,r){return function(n){var o;o=r?function(e){return s[t](s[r](e))}:s[t];for(var i=(n+"").split(e),a=0,u=i.length;a<u;a++)i[a]=o(i[a]);return i.join(e)}};function S(e){return function(t,r){return void 0===t?this._parts[e]||"":(this._parts[e]=t||null,this.build(!r),this)}}function _(e,t){return function(r,n){return void 0===r?this._parts[e]||"":(null!==r&&(r+="").charAt(0)===t&&(r=r.substring(1)),this._parts[e]=r,this.build(!n),this)}}s.decodePath=w("/","decodePathSegment"),s.decodeUrnPath=w(":","decodeUrnPathSegment"),s.recodePath=w("/","encodePathSegment","decode"),s.recodeUrnPath=w(":","encodeUrnPathSegment","decode"),s.encodeReserved=b("reserved","encode"),s.parse=function(e,t){var r;return t||(t={preventInvalidHostname:s.preventInvalidHostname}),(r=(e=(e=e.replace(s.leading_whitespace_expression,"")).replace(s.ascii_tab_whitespace,"")).indexOf("#"))>-1&&(t.fragment=e.substring(r+1)||null,e=e.substring(0,r)),(r=e.indexOf("?"))>-1&&(t.query=e.substring(r+1)||null,e=e.substring(0,r)),"//"===(e=(e=e.replace(/^(https?|ftp|wss?)?:+[/\\]*/i,"$1://")).replace(/^[/\\]{2,}/i,"//")).substring(0,2)?(t.protocol=null,e=e.substring(2),e=s.parseAuthority(e,t)):(r=e.indexOf(":"))>-1&&(t.protocol=e.substring(0,r)||null,t.protocol&&!t.protocol.match(s.protocol_expression)?t.protocol=void 0:"//"===e.substring(r+1,r+3).replace(/\\/g,"/")?(e=e.substring(r+3),e=s.parseAuthority(e,t)):(e=e.substring(r+1),t.urn=!0)),t.path=e,t},s.parseHost=function(e,t){e||(e="");var r,n,o=(e=e.replace(/\\/g,"/")).indexOf("/");if(-1===o&&(o=e.length),"["===e.charAt(0))r=e.indexOf("]"),t.hostname=e.substring(1,r)||null,t.port=e.substring(r+2,o)||null,"/"===t.port&&(t.port=null);else{var i=e.indexOf(":"),a=e.indexOf("/"),u=e.indexOf(":",i+1);-1!==u&&(-1===a||u<a)?(t.hostname=e.substring(0,o)||null,t.port=null):(n=e.substring(0,o).split(":"),t.hostname=n[0]||null,t.port=n[1]||null)}return t.hostname&&"/"!==e.substring(o).charAt(0)&&(o++,e="/"+e),t.preventInvalidHostname&&s.ensureValidHostname(t.hostname,t.protocol),t.port&&s.ensureValidPort(t.port),e.substring(o)||"/"},s.parseAuthority=function(e,t){return e=s.parseUserinfo(e,t),s.parseHost(e,t)},s.parseUserinfo=function(e,t){var r=e;-1!==e.indexOf("\\")&&(e=e.replace(/\\/g,"/"));var n,o=e.indexOf("/"),i=e.lastIndexOf("@",o>-1?o:e.length-1);return i>-1&&(-1===o||i<o)?(n=e.substring(0,i).split(":"),t.username=n[0]?s.decode(n[0]):null,n.shift(),t.password=n[0]?s.decode(n.join(":")):null,e=r.substring(i+1)):(t.username=null,t.password=null),e},s.parseQuery=function(e,t){if(!e)return{};if(!(e=e.replace(/&+/g,"&").replace(/^\?*&*|&+$/g,"")))return{};for(var r,n,o,i={},u=e.split("&"),l=u.length,c=0;c<l;c++)r=u[c].split("="),n=s.decodeQuery(r.shift(),t),o=r.length?s.decodeQuery(r.join("="),t):null,"__proto__"!==n&&(a.call(i,n)?("string"!=typeof i[n]&&null!==i[n]||(i[n]=[i[n]]),i[n].push(o)):i[n]=o);return i},s.build=function(e){var t="",r=!1;return e.protocol&&(t+=e.protocol+":"),e.urn||!t&&!e.hostname||(t+="//",r=!0),t+=s.buildAuthority(e)||"","string"==typeof e.path&&("/"!==e.path.charAt(0)&&r&&(t+="/"),t+=e.path),"string"==typeof e.query&&e.query&&(t+="?"+e.query),"string"==typeof e.fragment&&e.fragment&&(t+="#"+e.fragment),t},s.buildHost=function(e){var t="";return e.hostname?(s.ip6_expression.test(e.hostname)?t+="["+e.hostname+"]":t+=e.hostname,e.port&&(t+=":"+e.port),t):""},s.buildAuthority=function(e){return s.buildUserinfo(e)+s.buildHost(e)},s.buildUserinfo=function(e){var t="";return e.username&&(t+=s.encode(e.username)),e.password&&(t+=":"+s.encode(e.password)),t&&(t+="@"),t},s.buildQuery=function(e,t,r){var n,o,i,u,l="";for(o in e)if("__proto__"!==o&&a.call(e,o))if(c(e[o]))for(n={},i=0,u=e[o].length;i<u;i++)void 0!==e[o][i]&&void 0===n[e[o][i]+""]&&(l+="&"+s.buildQueryParameter(o,e[o][i],r),!0!==t&&(n[e[o][i]+""]=!0));else void 0!==e[o]&&(l+="&"+s.buildQueryParameter(o,e[o],r));return l.substring(1)},s.buildQueryParameter=function(e,t,r){return s.encodeQuery(e,r)+(null!==t?"="+s.encodeQuery(t,r):"")},s.addQuery=function(e,t,r){if("object"==typeof t)for(var n in t)a.call(t,n)&&s.addQuery(e,n,t[n]);else{if("string"!=typeof t)throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");if(void 0===e[t])return void(e[t]=r);"string"==typeof e[t]&&(e[t]=[e[t]]),c(r)||(r=[r]),e[t]=(e[t]||[]).concat(r)}},s.setQuery=function(e,t,r){if("object"==typeof t)for(var n in t)a.call(t,n)&&s.setQuery(e,n,t[n]);else{if("string"!=typeof t)throw new TypeError("URI.setQuery() accepts an object, string as the name parameter");e[t]=void 0===r?null:r}},s.removeQuery=function(e,t,r){var n,o,i;if(c(t))for(n=0,o=t.length;n<o;n++)e[t[n]]=void 0;else if("RegExp"===l(t))for(i in e)t.test(i)&&(e[i]=void 0);else if("object"==typeof t)for(i in t)a.call(t,i)&&s.removeQuery(e,i,t[i]);else{if("string"!=typeof t)throw new TypeError("URI.removeQuery() accepts an object, string, RegExp as the first parameter");void 0!==r?"RegExp"===l(r)?!c(e[t])&&r.test(e[t])?e[t]=void 0:e[t]=d(e[t],r):e[t]!==String(r)||c(r)&&1!==r.length?c(e[t])&&(e[t]=d(e[t],r)):e[t]=void 0:e[t]=void 0}},s.hasQuery=function(e,t,r,n){switch(l(t)){case"String":break;case"RegExp":for(var o in e)if(a.call(e,o)&&t.test(o)&&(void 0===r||s.hasQuery(e,o,r)))return!0;return!1;case"Object":for(var i in t)if(a.call(t,i)&&!s.hasQuery(e,i,t[i]))return!1;return!0;default:throw new TypeError("URI.hasQuery() accepts a string, regular expression or object as the name parameter")}switch(l(r)){case"Undefined":return t in e;case"Boolean":return r===Boolean(c(e[t])?e[t].length:e[t]);case"Function":return!!r(e[t],t,e);case"Array":return!!c(e[t])&&(n?p:f)(e[t],r);case"RegExp":return c(e[t])?!!n&&p(e[t],r):Boolean(e[t]&&e[t].match(r));case"Number":r=String(r);case"String":return c(e[t])?!!n&&p(e[t],r):e[t]===r;default:throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter")}},s.joinPaths=function(){for(var e=[],t=[],r=0,n=0;n<arguments.length;n++){var o=new s(arguments[n]);e.push(o);for(var i=o.segment(),a=0;a<i.length;a++)"string"==typeof i[a]&&t.push(i[a]),i[a]&&r++}if(!t.length||!r)return new s("");var u=new s("").segment(t);return""!==e[0].path()&&"/"!==e[0].path().slice(0,1)||u.path("/"+u.path()),u.normalize()},s.commonPath=function(e,t){var r,n=Math.min(e.length,t.length);for(r=0;r<n;r++)if(e.charAt(r)!==t.charAt(r)){r--;break}return r<1?e.charAt(0)===t.charAt(0)&&"/"===e.charAt(0)?"/":"":("/"===e.charAt(r)&&"/"===t.charAt(r)||(r=e.substring(0,r).lastIndexOf("/")),e.substring(0,r+1))},s.withinString=function(e,t,r){r||(r={});var n=r.start||s.findUri.start,o=r.end||s.findUri.end,i=r.trim||s.findUri.trim,a=r.parens||s.findUri.parens,u=/[a-z0-9-]=["']?$/i;for(n.lastIndex=0;;){var l=n.exec(e);if(!l)break;var c=l.index;if(r.ignoreHtml){var d=e.slice(Math.max(c-3,0),c);if(d&&u.test(d))continue}for(var p=c+e.slice(c).search(o),f=e.slice(c,p),h=-1;;){var y=a.exec(f);if(!y)break;var m=y.index+y[0].length;h=Math.max(h,m)}if(!((f=h>-1?f.slice(0,h)+f.slice(h).replace(i,""):f.replace(i,"")).length<=l[0].length||r.ignore&&r.ignore.test(f))){var g=t(f,c,p=c+f.length,e);void 0!==g?(g=String(g),e=e.slice(0,c)+g+e.slice(p),n.lastIndex=c+g.length):n.lastIndex=p}}return n.lastIndex=0,e},s.ensureValidHostname=function(t,r){var n=!!t,o=!1;if(!!r&&(o=p(s.hostProtocols,r)),o&&!n)throw new TypeError("Hostname cannot be empty, if protocol is "+r);if(t&&t.match(s.invalid_hostname_characters)){if(!e)throw new TypeError('Hostname "'+t+'" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');if(e.toASCII(t).match(s.invalid_hostname_characters))throw new TypeError('Hostname "'+t+'" contains characters other than [A-Z0-9.-:_]')}},s.ensureValidPort=function(e){if(e){var t=Number(e);if(!(/^[0-9]+$/.test(t)&&t>0&&t<65536))throw new TypeError('Port "'+e+'" is not a valid port')}},s.noConflict=function(e){if(e){var t={URI:this.noConflict()};return n.URITemplate&&"function"==typeof n.URITemplate.noConflict&&(t.URITemplate=n.URITemplate.noConflict()),n.IPv6&&"function"==typeof n.IPv6.noConflict&&(t.IPv6=n.IPv6.noConflict()),n.SecondLevelDomains&&"function"==typeof n.SecondLevelDomains.noConflict&&(t.SecondLevelDomains=n.SecondLevelDomains.noConflict()),t}return n.URI===this&&(n.URI=o),this},i.build=function(e){return!0===e?this._deferred_build=!0:(void 0===e||this._deferred_build)&&(this._string=s.build(this._parts),this._deferred_build=!1),this},i.clone=function(){return new s(this)},i.valueOf=i.toString=function(){return this.build(!1)._string},i.protocol=S("protocol"),i.username=S("username"),i.password=S("password"),i.hostname=S("hostname"),i.port=S("port"),i.query=_("query","?"),i.fragment=_("fragment","#"),i.search=function(e,t){var r=this.query(e,t);return"string"==typeof r&&r.length?"?"+r:r},i.hash=function(e,t){var r=this.fragment(e,t);return"string"==typeof r&&r.length?"#"+r:r},i.pathname=function(e,t){if(void 0===e||!0===e){var r=this._parts.path||(this._parts.hostname?"/":"");return e?(this._parts.urn?s.decodeUrnPath:s.decodePath)(r):r}return this._parts.urn?this._parts.path=e?s.recodeUrnPath(e):"":this._parts.path=e?s.recodePath(e):"/",this.build(!t),this},i.path=i.pathname,i.href=function(e,t){var r;if(void 0===e)return this.toString();this._string="",this._parts=s._parts();var n=e instanceof s,o="object"==typeof e&&(e.hostname||e.path||e.pathname);e.nodeName&&(e=e[s.getDomAttribute(e)]||"",o=!1);if(!n&&o&&void 0!==e.pathname&&(e=e.toString()),"string"==typeof e||e instanceof String)this._parts=s.parse(String(e),this._parts);else{if(!n&&!o)throw new TypeError("invalid input");var i=n?e._parts:e;for(r in i)"query"!==r&&a.call(this._parts,r)&&(this._parts[r]=i[r]);i.query&&this.query(i.query,!1)}return this.build(!t),this},i.is=function(e){var t=!1,n=!1,o=!1,i=!1,a=!1,u=!1,l=!1,c=!this._parts.urn;switch(this._parts.hostname&&(c=!1,n=s.ip4_expression.test(this._parts.hostname),o=s.ip6_expression.test(this._parts.hostname),a=(i=!(t=n||o))&&r&&r.has(this._parts.hostname),u=i&&s.idn_expression.test(this._parts.hostname),l=i&&s.punycode_expression.test(this._parts.hostname)),e.toLowerCase()){case"relative":return c;case"absolute":return!c;case"domain":case"name":return i;case"sld":return a;case"ip":return t;case"ip4":case"ipv4":case"inet4":return n;case"ip6":case"ipv6":case"inet6":return o;case"idn":return u;case"url":return!this._parts.urn;case"urn":return!!this._parts.urn;case"punycode":return l}return null};var T=i.protocol,E=i.port,k=i.hostname;i.protocol=function(e,t){if(e&&!(e=e.replace(/:(\/\/)?$/,"")).match(s.protocol_expression))throw new TypeError('Protocol "'+e+"\" contains characters other than [A-Z0-9.+-] or doesn't start with [A-Z]");return T.call(this,e,t)},i.scheme=i.protocol,i.port=function(e,t){return this._parts.urn?void 0===e?"":this:(void 0!==e&&(0===e&&(e=null),e&&(":"===(e+="").charAt(0)&&(e=e.substring(1)),s.ensureValidPort(e))),E.call(this,e,t))},i.hostname=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0!==e){var r={preventInvalidHostname:this._parts.preventInvalidHostname};if("/"!==s.parseHost(e,r))throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-]');e=r.hostname,this._parts.preventInvalidHostname&&s.ensureValidHostname(e,this._parts.protocol)}return k.call(this,e,t)},i.origin=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e){var r=this.protocol();return this.authority()?(r?r+"://":"")+this.authority():""}var n=s(e);return this.protocol(n.protocol()).authority(n.authority()).build(!t),this},i.host=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e)return this._parts.hostname?s.buildHost(this._parts):"";if("/"!==s.parseHost(e,this._parts))throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-]');return this.build(!t),this},i.authority=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e)return this._parts.hostname?s.buildAuthority(this._parts):"";if("/"!==s.parseAuthority(e,this._parts))throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-]');return this.build(!t),this},i.userinfo=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e){var r=s.buildUserinfo(this._parts);return r?r.substring(0,r.length-1):r}return"@"!==e[e.length-1]&&(e+="@"),s.parseUserinfo(e,this._parts),this.build(!t),this},i.resource=function(e,t){var r;return void 0===e?this.path()+this.search()+this.hash():(r=s.parse(e),this._parts.path=r.path,this._parts.query=r.query,this._parts.fragment=r.fragment,this.build(!t),this)},i.subdomain=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e){if(!this._parts.hostname||this.is("IP"))return"";var r=this._parts.hostname.length-this.domain().length-1;return this._parts.hostname.substring(0,r)||""}var n=this._parts.hostname.length-this.domain().length,o=this._parts.hostname.substring(0,n),i=new RegExp("^"+u(o));if(e&&"."!==e.charAt(e.length-1)&&(e+="."),-1!==e.indexOf(":"))throw new TypeError("Domains cannot contain colons");return e&&s.ensureValidHostname(e,this._parts.protocol),this._parts.hostname=this._parts.hostname.replace(i,e),this.build(!t),this},i.domain=function(e,t){if(this._parts.urn)return void 0===e?"":this;if("boolean"==typeof e&&(t=e,e=void 0),void 0===e){if(!this._parts.hostname||this.is("IP"))return"";var r=this._parts.hostname.match(/\./g);if(r&&r.length<2)return this._parts.hostname;var n=this._parts.hostname.length-this.tld(t).length-1;return n=this._parts.hostname.lastIndexOf(".",n-1)+1,this._parts.hostname.substring(n)||""}if(!e)throw new TypeError("cannot set domain empty");if(-1!==e.indexOf(":"))throw new TypeError("Domains cannot contain colons");if(s.ensureValidHostname(e,this._parts.protocol),!this._parts.hostname||this.is("IP"))this._parts.hostname=e;else{var o=new RegExp(u(this.domain())+"$");this._parts.hostname=this._parts.hostname.replace(o,e)}return this.build(!t),this},i.tld=function(e,t){if(this._parts.urn)return void 0===e?"":this;if("boolean"==typeof e&&(t=e,e=void 0),void 0===e){if(!this._parts.hostname||this.is("IP"))return"";var n=this._parts.hostname.lastIndexOf("."),o=this._parts.hostname.substring(n+1);return!0!==t&&r&&r.list[o.toLowerCase()]&&r.get(this._parts.hostname)||o}var s;if(!e)throw new TypeError("cannot set TLD empty");if(e.match(/[^a-zA-Z0-9-]/)){if(!r||!r.is(e))throw new TypeError('TLD "'+e+'" contains characters other than [A-Z0-9]');s=new RegExp(u(this.tld())+"$"),this._parts.hostname=this._parts.hostname.replace(s,e)}else{if(!this._parts.hostname||this.is("IP"))throw new ReferenceError("cannot set TLD on non-domain host");s=new RegExp(u(this.tld())+"$"),this._parts.hostname=this._parts.hostname.replace(s,e)}return this.build(!t),this},i.directory=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e||!0===e){if(!this._parts.path&&!this._parts.hostname)return"";if("/"===this._parts.path)return"/";var r=this._parts.path.length-this.filename().length-1,n=this._parts.path.substring(0,r)||(this._parts.hostname?"/":"");return e?s.decodePath(n):n}var o=this._parts.path.length-this.filename().length,i=this._parts.path.substring(0,o),a=new RegExp("^"+u(i));return this.is("relative")||(e||(e="/"),"/"!==e.charAt(0)&&(e="/"+e)),e&&"/"!==e.charAt(e.length-1)&&(e+="/"),e=s.recodePath(e),this._parts.path=this._parts.path.replace(a,e),this.build(!t),this},i.filename=function(e,t){if(this._parts.urn)return void 0===e?"":this;if("string"!=typeof e){if(!this._parts.path||"/"===this._parts.path)return"";var r=this._parts.path.lastIndexOf("/"),n=this._parts.path.substring(r+1);return e?s.decodePathSegment(n):n}var o=!1;"/"===e.charAt(0)&&(e=e.substring(1)),e.match(/\.?\//)&&(o=!0);var i=new RegExp(u(this.filename())+"$");return e=s.recodePath(e),this._parts.path=this._parts.path.replace(i,e),o?this.normalizePath(t):this.build(!t),this},i.suffix=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e||!0===e){if(!this._parts.path||"/"===this._parts.path)return"";var r,n,o=this.filename(),i=o.lastIndexOf(".");return-1===i?"":(r=o.substring(i+1),n=/^[a-z0-9%]+$/i.test(r)?r:"",e?s.decodePathSegment(n):n)}"."===e.charAt(0)&&(e=e.substring(1));var a,l=this.suffix();if(l)a=e?new RegExp(u(l)+"$"):new RegExp(u("."+l)+"$");else{if(!e)return this;this._parts.path+="."+s.recodePath(e)}return a&&(e=s.recodePath(e),this._parts.path=this._parts.path.replace(a,e)),this.build(!t),this},i.segment=function(e,t,r){var n=this._parts.urn?":":"/",o=this.path(),s="/"===o.substring(0,1),i=o.split(n);if(void 0!==e&&"number"!=typeof e&&(r=t,t=e,e=void 0),void 0!==e&&"number"!=typeof e)throw new Error('Bad segment "'+e+'", must be 0-based integer');if(s&&i.shift(),e<0&&(e=Math.max(i.length+e,0)),void 0===t)return void 0===e?i:i[e];if(null===e||void 0===i[e])if(c(t)){i=[];for(var a=0,u=t.length;a<u;a++)(t[a].length||i.length&&i[i.length-1].length)&&(i.length&&!i[i.length-1].length&&i.pop(),i.push(h(t[a])))}else(t||"string"==typeof t)&&(t=h(t),""===i[i.length-1]?i[i.length-1]=t:i.push(t));else t?i[e]=h(t):i.splice(e,1);return s&&i.unshift(""),this.path(i.join(n),r)},i.segmentCoded=function(e,t,r){var n,o,i;if("number"!=typeof e&&(r=t,t=e,e=void 0),void 0===t){if(c(n=this.segment(e,t,r)))for(o=0,i=n.length;o<i;o++)n[o]=s.decode(n[o]);else n=void 0!==n?s.decode(n):void 0;return n}if(c(t))for(o=0,i=t.length;o<i;o++)t[o]=s.encode(t[o]);else t="string"==typeof t||t instanceof String?s.encode(t):t;return this.segment(e,t,r)};var A=i.query;return i.query=function(e,t){if(!0===e)return s.parseQuery(this._parts.query,this._parts.escapeQuerySpace);if("function"==typeof e){var r=s.parseQuery(this._parts.query,this._parts.escapeQuerySpace),n=e.call(this,r);return this._parts.query=s.buildQuery(n||r,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),this.build(!t),this}return void 0!==e&&"string"!=typeof e?(this._parts.query=s.buildQuery(e,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),this.build(!t),this):A.call(this,e,t)},i.setQuery=function(e,t,r){var n=s.parseQuery(this._parts.query,this._parts.escapeQuerySpace);if("string"==typeof e||e instanceof String)n[e]=void 0!==t?t:null;else{if("object"!=typeof e)throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");for(var o in e)a.call(e,o)&&(n[o]=e[o])}return this._parts.query=s.buildQuery(n,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof e&&(r=t),this.build(!r),this},i.addQuery=function(e,t,r){var n=s.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return s.addQuery(n,e,void 0===t?null:t),this._parts.query=s.buildQuery(n,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof e&&(r=t),this.build(!r),this},i.removeQuery=function(e,t,r){var n=s.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return s.removeQuery(n,e,t),this._parts.query=s.buildQuery(n,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof e&&(r=t),this.build(!r),this},i.hasQuery=function(e,t,r){var n=s.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return s.hasQuery(n,e,t,r)},i.setSearch=i.setQuery,i.addSearch=i.addQuery,i.removeSearch=i.removeQuery,i.hasSearch=i.hasQuery,i.normalize=function(){return this._parts.urn?this.normalizeProtocol(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build():this.normalizeProtocol(!1).normalizeHostname(!1).normalizePort(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build()},i.normalizeProtocol=function(e){return"string"==typeof this._parts.protocol&&(this._parts.protocol=this._parts.protocol.toLowerCase(),this.build(!e)),this},i.normalizeHostname=function(r){return this._parts.hostname&&(this.is("IDN")&&e?this._parts.hostname=e.toASCII(this._parts.hostname):this.is("IPv6")&&t&&(this._parts.hostname=t.best(this._parts.hostname)),this._parts.hostname=this._parts.hostname.toLowerCase(),this.build(!r)),this},i.normalizePort=function(e){return"string"==typeof this._parts.protocol&&this._parts.port===s.defaultPorts[this._parts.protocol]&&(this._parts.port=null,this.build(!e)),this},i.normalizePath=function(e){var t,r=this._parts.path;if(!r)return this;if(this._parts.urn)return this._parts.path=s.recodeUrnPath(this._parts.path),this.build(!e),this;if("/"===this._parts.path)return this;var n,o,i="";for("/"!==(r=s.recodePath(r)).charAt(0)&&(t=!0,r="/"+r),"/.."!==r.slice(-3)&&"/."!==r.slice(-2)||(r+="/"),r=r.replace(/(\/(\.\/)+)|(\/\.$)/g,"/").replace(/\/{2,}/g,"/"),t&&(i=r.substring(1).match(/^(\.\.\/)+/)||"")&&(i=i[0]);-1!==(n=r.search(/\/\.\.(\/|$)/));)0!==n?(-1===(o=r.substring(0,n).lastIndexOf("/"))&&(o=n),r=r.substring(0,o)+r.substring(n+3)):r=r.substring(3);return t&&this.is("relative")&&(r=i+r.substring(1)),this._parts.path=r,this.build(!e),this},i.normalizePathname=i.normalizePath,i.normalizeQuery=function(e){return"string"==typeof this._parts.query&&(this._parts.query.length?this.query(s.parseQuery(this._parts.query,this._parts.escapeQuerySpace)):this._parts.query=null,this.build(!e)),this},i.normalizeFragment=function(e){return this._parts.fragment||(this._parts.fragment=null,this.build(!e)),this},i.normalizeSearch=i.normalizeQuery,i.normalizeHash=i.normalizeFragment,i.iso8859=function(){var e=s.encode,t=s.decode;s.encode=escape,s.decode=decodeURIComponent;try{this.normalize()}finally{s.encode=e,s.decode=t}return this},i.unicode=function(){var e=s.encode,t=s.decode;s.encode=m,s.decode=unescape;try{this.normalize()}finally{s.encode=e,s.decode=t}return this},i.readable=function(){var t=this.clone();t.username("").password("").normalize();var r="";if(t._parts.protocol&&(r+=t._parts.protocol+"://"),t._parts.hostname&&(t.is("punycode")&&e?(r+=e.toUnicode(t._parts.hostname),t._parts.port&&(r+=":"+t._parts.port)):r+=t.host()),t._parts.hostname&&t._parts.path&&"/"!==t._parts.path.charAt(0)&&(r+="/"),r+=t.path(!0),t._parts.query){for(var n="",o=0,i=t._parts.query.split("&"),a=i.length;o<a;o++){var u=(i[o]||"").split("=");n+="&"+s.decodeQuery(u[0],this._parts.escapeQuerySpace).replace(/&/g,"%26"),void 0!==u[1]&&(n+="="+s.decodeQuery(u[1],this._parts.escapeQuerySpace).replace(/&/g,"%26"))}r+="?"+n.substring(1)}return r+=s.decodeQuery(t.hash(),!0)},i.absoluteTo=function(e){var t,r,n,o=this.clone(),i=["protocol","username","password","hostname","port"];if(this._parts.urn)throw new Error("URNs do not have any generally defined hierarchical components");if(e instanceof s||(e=new s(e)),o._parts.protocol)return o;if(o._parts.protocol=e._parts.protocol,this._parts.hostname)return o;for(r=0;n=i[r];r++)o._parts[n]=e._parts[n];return o._parts.path?(".."===o._parts.path.substring(-2)&&(o._parts.path+="/"),"/"!==o.path().charAt(0)&&(t=(t=e.directory())||(0===e.path().indexOf("/")?"/":""),o._parts.path=(t?t+"/":"")+o._parts.path,o.normalizePath())):(o._parts.path=e._parts.path,o._parts.query||(o._parts.query=e._parts.query)),o.build(),o},i.relativeTo=function(e){var t,r,n,o,i,a=this.clone().normalize();if(a._parts.urn)throw new Error("URNs do not have any generally defined hierarchical components");if(e=new s(e).normalize(),t=a._parts,r=e._parts,o=a.path(),i=e.path(),"/"!==o.charAt(0))throw new Error("URI is already relative");if("/"!==i.charAt(0))throw new Error("Cannot calculate a URI relative to another relative URI");if(t.protocol===r.protocol&&(t.protocol=null),t.username!==r.username||t.password!==r.password)return a.build();if(null!==t.protocol||null!==t.username||null!==t.password)return a.build();if(t.hostname!==r.hostname||t.port!==r.port)return a.build();if(t.hostname=null,t.port=null,o===i)return t.path="",a.build();if(!(n=s.commonPath(o,i)))return a.build();var u=r.path.substring(n.length).replace(/[^\/]*$/,"").replace(/.*?\//g,"../");return t.path=u+t.path.substring(n.length)||"./",a.build()},i.equals=function(e){var t,r,n,o,i,u=this.clone(),l=new s(e),d={};if(u.normalize(),l.normalize(),u.toString()===l.toString())return!0;if(n=u.query(),o=l.query(),u.query(""),l.query(""),u.toString()!==l.toString())return!1;if(n.length!==o.length)return!1;for(i in t=s.parseQuery(n,this._parts.escapeQuerySpace),r=s.parseQuery(o,this._parts.escapeQuerySpace),t)if(a.call(t,i)){if(c(t[i])){if(!f(t[i],r[i]))return!1}else if(t[i]!==r[i])return!1;d[i]=!0}for(i in r)if(a.call(r,i)&&!d[i])return!1;return!0},i.preventInvalidHostname=function(e){return this._parts.preventInvalidHostname=!!e,this},i.duplicateQueryParameters=function(e){return this._parts.duplicateQueryParameters=!!e,this},i.escapeQuerySpace=function(e){return this._parts.escapeQuerySpace=!!e,this},s}))},"./node_modules/urijs/src/URITemplate.js":function(e,t,r){var n,o,s;!function(i,a){"use strict";e.exports?e.exports=a(r("./node_modules/urijs/src/URI.js")):(o=[r("./node_modules/urijs/src/URI.js")],void 0===(s="function"==typeof(n=a)?n.apply(t,o):n)||(e.exports=s))}(0,(function(e,t){"use strict";var r=t&&t.URITemplate,n=Object.prototype.hasOwnProperty;function o(e){return o._cache[e]?o._cache[e]:this instanceof o?(this.expression=e,o._cache[e]=this,this):new o(e)}function s(e){this.data=e,this.cache={}}var i=o.prototype,a={"":{prefix:"",separator:",",named:!1,empty_name_separator:!1,encode:"encode"},"+":{prefix:"",separator:",",named:!1,empty_name_separator:!1,encode:"encodeReserved"},"#":{prefix:"#",separator:",",named:!1,empty_name_separator:!1,encode:"encodeReserved"},".":{prefix:".",separator:".",named:!1,empty_name_separator:!1,encode:"encode"},"/":{prefix:"/",separator:"/",named:!1,empty_name_separator:!1,encode:"encode"},";":{prefix:";",separator:";",named:!0,empty_name_separator:!1,encode:"encode"},"?":{prefix:"?",separator:"&",named:!0,empty_name_separator:!0,encode:"encode"},"&":{prefix:"&",separator:"&",named:!0,empty_name_separator:!0,encode:"encode"}};return o._cache={},o.EXPRESSION_PATTERN=/\{([^a-zA-Z0-9%_]?)([^\}]+)(\}|$)/g,o.VARIABLE_PATTERN=/^([^*:.](?:\.?[^*:.])*)((\*)|:(\d+))?$/,o.VARIABLE_NAME_PATTERN=/[^a-zA-Z0-9%_.]/,o.LITERAL_PATTERN=/[<>{}"`^| \\]/,o.expand=function(e,t,r){var n,s,i,u=a[e.operator],l=u.named?"Named":"Unnamed",c=e.variables,d=[];for(i=0;s=c[i];i++){if(0===(n=t.get(s.name)).type&&r&&r.strict)throw new Error('Missing expansion value for variable "'+s.name+'"');if(n.val.length){if(n.type>1&&s.maxlength)throw new Error('Invalid expression: Prefix modifier not applicable to variable "'+s.name+'"');d.push(o["expand"+l](n,u,s.explode,s.explode&&u.separator||",",s.maxlength,s.name))}else n.type&&d.push("")}return d.length?u.prefix+d.join(u.separator):""},o.expandNamed=function(t,r,n,o,s,i){var a,u,l,c="",d=r.encode,p=r.empty_name_separator,f=!t[d].length,h=2===t.type?"":e[d](i);for(u=0,l=t.val.length;u<l;u++)s?(a=e[d](t.val[u][1].substring(0,s)),2===t.type&&(h=e[d](t.val[u][0].substring(0,s)))):f?(a=e[d](t.val[u][1]),2===t.type?(h=e[d](t.val[u][0]),t[d].push([h,a])):t[d].push([void 0,a])):(a=t[d][u][1],2===t.type&&(h=t[d][u][0])),c&&(c+=o),n?c+=h+(p||a?"=":"")+a:(u||(c+=e[d](i)+(p||a?"=":"")),2===t.type&&(c+=h+","),c+=a);return c},o.expandUnnamed=function(t,r,n,o,s){var i,a,u,l="",c=r.encode,d=r.empty_name_separator,p=!t[c].length;for(a=0,u=t.val.length;a<u;a++)s?i=e[c](t.val[a][1].substring(0,s)):p?(i=e[c](t.val[a][1]),t[c].push([2===t.type?e[c](t.val[a][0]):void 0,i])):i=t[c][a][1],l&&(l+=o),2===t.type&&(l+=s?e[c](t.val[a][0].substring(0,s)):t[c][a][0],l+=n?d||i?"=":"":","),l+=i;return l},o.noConflict=function(){return t.URITemplate===o&&(t.URITemplate=r),o},i.expand=function(e,t){var r="";this.parts&&this.parts.length||this.parse(),e instanceof s||(e=new s(e));for(var n=0,i=this.parts.length;n<i;n++)r+="string"==typeof this.parts[n]?this.parts[n]:o.expand(this.parts[n],e,t);return r},i.parse=function(){var e,t,r,n=this.expression,s=o.EXPRESSION_PATTERN,i=o.VARIABLE_PATTERN,u=o.VARIABLE_NAME_PATTERN,l=o.LITERAL_PATTERN,c=[],d=0,p=function(e){if(e.match(l))throw new Error('Invalid Literal "'+e+'"');return e};for(s.lastIndex=0;;){if(null===(t=s.exec(n))){c.push(p(n.substring(d)));break}if(c.push(p(n.substring(d,t.index))),d=t.index+t[0].length,!a[t[1]])throw new Error('Unknown Operator "'+t[1]+'" in "'+t[0]+'"');if(!t[3])throw new Error('Unclosed Expression "'+t[0]+'"');for(var f=0,h=(e=t[2].split(",")).length;f<h;f++){if(null===(r=e[f].match(i)))throw new Error('Invalid Variable "'+e[f]+'" in "'+t[0]+'"');if(r[1].match(u))throw new Error('Invalid Variable Name "'+r[1]+'" in "'+t[0]+'"');e[f]={name:r[1],explode:!!r[3],maxlength:r[4]&&parseInt(r[4],10)}}if(!e.length)throw new Error('Expression Missing Variable(s) "'+t[0]+'"');c.push({expression:t[0],operator:t[1],variables:e})}return c.length||c.push(p(n)),this.parts=c,this},s.prototype.get=function(e){var t,r,o,s=this.data,i={type:0,val:[],encode:[],encodeReserved:[]};if(void 0!==this.cache[e])return this.cache[e];if(this.cache[e]=i,null==(o="[object Function]"===String(Object.prototype.toString.call(s))?s(e):"[object Function]"===String(Object.prototype.toString.call(s[e]))?s[e](e):s[e]))return i;if("[object Array]"===String(Object.prototype.toString.call(o))){for(t=0,r=o.length;t<r;t++)void 0!==o[t]&&null!==o[t]&&i.val.push([void 0,String(o[t])]);i.val.length&&(i.type=3)}else if("[object Object]"===String(Object.prototype.toString.call(o))){for(t in o)n.call(o,t)&&void 0!==o[t]&&null!==o[t]&&i.val.push([t,String(o[t])]);i.val.length&&(i.type=2)}else i.type=1,i.val.push([void 0,String(o)]);return i},e.expand=function(t,r){var n=new o(t).expand(r);return new e(n)},o}))},"./node_modules/urijs/src/punycode.js":function(e,t,r){var n;e=r.nmd(e),function(){t&&t.nodeType,e&&e.nodeType;var o="object"==typeof r.g&&r.g;o.global!==o&&o.window!==o&&o.self;var s,i=2147483647,a=36,u=/^xn--/,l=/[^\x20-\x7E]/,c=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function h(e){throw new RangeError(d[e])}function y(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function m(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+y((e=e.replace(c,".")).split("."),t).join(".")}function g(e){for(var t,r,n=[],o=0,s=e.length;o<s;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<s?56320==(64512&(r=e.charCodeAt(o++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),o--):n.push(t);return n}function v(e){return y(e,(function(e){var t="";return e>65535&&(t+=f((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=f(e)})).join("")}function b(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function w(e,t,r){var n=0;for(e=r?p(e/700):e>>1,e+=p(e/t);e>455;n+=a)e=p(e/35);return p(n+36*e/(e+38))}function S(e){var t,r,n,o,s,u,l,c,d,f,y,m=[],g=e.length,b=0,S=128,_=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&h("not-basic"),m.push(e.charCodeAt(n));for(o=r>0?r+1:0;o<g;){for(s=b,u=1,l=a;o>=g&&h("invalid-input"),((c=(y=e.charCodeAt(o++))-48<10?y-22:y-65<26?y-65:y-97<26?y-97:a)>=a||c>p((i-b)/u))&&h("overflow"),b+=c*u,!(c<(d=l<=_?1:l>=_+26?26:l-_));l+=a)u>p(i/(f=a-d))&&h("overflow"),u*=f;_=w(b-s,t=m.length+1,0==s),p(b/t)>i-S&&h("overflow"),S+=p(b/t),b%=t,m.splice(b++,0,S)}return v(m)}function _(e){var t,r,n,o,s,u,l,c,d,y,m,v,S,_,T,E=[];for(v=(e=g(e)).length,t=128,r=0,s=72,u=0;u<v;++u)(m=e[u])<128&&E.push(f(m));for(n=o=E.length,o&&E.push("-");n<v;){for(l=i,u=0;u<v;++u)(m=e[u])>=t&&m<l&&(l=m);for(l-t>p((i-r)/(S=n+1))&&h("overflow"),r+=(l-t)*S,t=l,u=0;u<v;++u)if((m=e[u])<t&&++r>i&&h("overflow"),m==t){for(c=r,d=a;!(c<(y=d<=s?1:d>=s+26?26:d-s));d+=a)T=c-y,_=a-y,E.push(f(b(y+T%_,0))),c=p(T/_);E.push(f(b(c,0))),s=w(r,S,n==o),r=0,++n}++r,++t}return E.join("")}s={version:"1.3.2",ucs2:{decode:g,encode:v},decode:S,encode:_,toASCII:function(e){return m(e,(function(e){return l.test(e)?"xn--"+_(e):e}))},toUnicode:function(e){return m(e,(function(e){return u.test(e)?S(e.slice(4).toLowerCase()):e}))}},void 0===(n=function(){return s}.call(t,r,t,e))||(e.exports=n)}()},"?dba7":()=>{},"./node_modules/bignumber.js/bignumber.mjs":(e,t,r)=>{"use strict";r.r(t),r.d(t,{BigNumber:()=>S,default:()=>_});var n=/^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,o=Math.ceil,s=Math.floor,i="[BigNumber Error] ",a=i+"Number primitive has more than 15 significant digits: ",u=1e14,l=14,c=9007199254740991,d=[1,10,100,1e3,1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12,1e13],p=1e7,f=1e9;function h(e){var t=0|e;return e>0||e===t?t:t-1}function y(e){for(var t,r,n=1,o=e.length,s=e[0]+"";n<o;){for(t=e[n++]+"",r=l-t.length;r--;t="0"+t);s+=t}for(o=s.length;48===s.charCodeAt(--o););return s.slice(0,o+1||1)}function m(e,t){var r,n,o=e.c,s=t.c,i=e.s,a=t.s,u=e.e,l=t.e;if(!i||!a)return null;if(r=o&&!o[0],n=s&&!s[0],r||n)return r?n?0:-a:i;if(i!=a)return i;if(r=i<0,n=u==l,!o||!s)return n?0:!o^r?1:-1;if(!n)return u>l^r?1:-1;for(a=(u=o.length)<(l=s.length)?u:l,i=0;i<a;i++)if(o[i]!=s[i])return o[i]>s[i]^r?1:-1;return u==l?0:u>l^r?1:-1}function g(e,t,r,n){if(e<t||e>r||e!==s(e))throw Error(i+(n||"Argument")+("number"==typeof e?e<t||e>r?" out of range: ":" not an integer: ":" not a primitive number: ")+String(e))}function v(e){var t=e.c.length-1;return h(e.e/l)==t&&e.c[t]%2!=0}function b(e,t){return(e.length>1?e.charAt(0)+"."+e.slice(1):e)+(t<0?"e":"e+")+t}function w(e,t,r){var n,o;if(t<0){for(o=r+".";++t;o+=r);e=o+e}else if(++t>(n=e.length)){for(o=r,t-=n;--t;o+=r);e+=o}else t<n&&(e=e.slice(0,t)+"."+e.slice(t));return e}var S=function e(t){var r,S,_,T,E,k,A,x,P,O,C=z.prototype={constructor:z,toString:null,valueOf:null},I=new z(1),R=20,B=4,j=-7,U=21,L=-1e7,N=1e7,M=!1,F=1,D=0,V={prefix:"",groupSize:3,secondaryGroupSize:0,groupSeparator:",",decimalSeparator:".",fractionGroupSize:0,fractionGroupSeparator:"\xa0",suffix:""},q="0123456789abcdefghijklmnopqrstuvwxyz",K=!0;function z(e,t){var r,o,i,u,d,p,f,h,y=this;if(!(y instanceof z))return new z(e,t);if(null==t){if(e&&!0===e._isBigNumber)return y.s=e.s,void(!e.c||e.e>N?y.c=y.e=null:e.e<L?y.c=[y.e=0]:(y.e=e.e,y.c=e.c.slice()));if((p="number"==typeof e)&&0*e==0){if(y.s=1/e<0?(e=-e,-1):1,e===~~e){for(u=0,d=e;d>=10;d/=10,u++);return void(u>N?y.c=y.e=null:(y.e=u,y.c=[e]))}h=String(e)}else{if(!n.test(h=String(e)))return _(y,h,p);y.s=45==h.charCodeAt(0)?(h=h.slice(1),-1):1}(u=h.indexOf("."))>-1&&(h=h.replace(".","")),(d=h.search(/e/i))>0?(u<0&&(u=d),u+=+h.slice(d+1),h=h.substring(0,d)):u<0&&(u=h.length)}else{if(g(t,2,q.length,"Base"),10==t&&K)return Q(y=new z(e),R+y.e+1,B);if(h=String(e),p="number"==typeof e){if(0*e!=0)return _(y,h,p,t);if(y.s=1/e<0?(h=h.slice(1),-1):1,z.DEBUG&&h.replace(/^0\.0*|\./,"").length>15)throw Error(a+e)}else y.s=45===h.charCodeAt(0)?(h=h.slice(1),-1):1;for(r=q.slice(0,t),u=d=0,f=h.length;d<f;d++)if(r.indexOf(o=h.charAt(d))<0){if("."==o){if(d>u){u=f;continue}}else if(!i&&(h==h.toUpperCase()&&(h=h.toLowerCase())||h==h.toLowerCase()&&(h=h.toUpperCase()))){i=!0,d=-1,u=0;continue}return _(y,String(e),p,t)}p=!1,(u=(h=S(h,t,10,y.s)).indexOf("."))>-1?h=h.replace(".",""):u=h.length}for(d=0;48===h.charCodeAt(d);d++);for(f=h.length;48===h.charCodeAt(--f););if(h=h.slice(d,++f)){if(f-=d,p&&z.DEBUG&&f>15&&(e>c||e!==s(e)))throw Error(a+y.s*e);if((u=u-d-1)>N)y.c=y.e=null;else if(u<L)y.c=[y.e=0];else{if(y.e=u,y.c=[],d=(u+1)%l,u<0&&(d+=l),d<f){for(d&&y.c.push(+h.slice(0,d)),f-=l;d<f;)y.c.push(+h.slice(d,d+=l));d=l-(h=h.slice(d)).length}else d-=f;for(;d--;h+="0");y.c.push(+h)}}else y.c=[y.e=0]}function H(e,t,r,n){var o,s,i,a,u;if(null==r?r=B:g(r,0,8),!e.c)return e.toString();if(o=e.c[0],i=e.e,null==t)u=y(e.c),u=1==n||2==n&&(i<=j||i>=U)?b(u,i):w(u,i,"0");else if(s=(e=Q(new z(e),t,r)).e,a=(u=y(e.c)).length,1==n||2==n&&(t<=s||s<=j)){for(;a<t;u+="0",a++);u=b(u,s)}else if(t-=i,u=w(u,s,"0"),s+1>a){if(--t>0)for(u+=".";t--;u+="0");}else if((t+=s-a)>0)for(s+1==a&&(u+=".");t--;u+="0");return e.s<0&&o?"-"+u:u}function X(e,t){for(var r,n,o=1,s=new z(e[0]);o<e.length;o++)(!(n=new z(e[o])).s||(r=m(s,n))===t||0===r&&s.s===t)&&(s=n);return s}function $(e,t,r){for(var n=1,o=t.length;!t[--o];t.pop());for(o=t[0];o>=10;o/=10,n++);return(r=n+r*l-1)>N?e.c=e.e=null:r<L?e.c=[e.e=0]:(e.e=r,e.c=t),e}function Q(e,t,r,n){var i,a,c,p,f,h,y,m=e.c,g=d;if(m){e:{for(i=1,p=m[0];p>=10;p/=10,i++);if((a=t-i)<0)a+=l,c=t,f=m[h=0],y=s(f/g[i-c-1]%10);else if((h=o((a+1)/l))>=m.length){if(!n)break e;for(;m.length<=h;m.push(0));f=y=0,i=1,c=(a%=l)-l+1}else{for(f=p=m[h],i=1;p>=10;p/=10,i++);y=(c=(a%=l)-l+i)<0?0:s(f/g[i-c-1]%10)}if(n=n||t<0||null!=m[h+1]||(c<0?f:f%g[i-c-1]),n=r<4?(y||n)&&(0==r||r==(e.s<0?3:2)):y>5||5==y&&(4==r||n||6==r&&(a>0?c>0?f/g[i-c]:0:m[h-1])%10&1||r==(e.s<0?8:7)),t<1||!m[0])return m.length=0,n?(t-=e.e+1,m[0]=g[(l-t%l)%l],e.e=-t||0):m[0]=e.e=0,e;if(0==a?(m.length=h,p=1,h--):(m.length=h+1,p=g[l-a],m[h]=c>0?s(f/g[i-c]%g[c])*p:0),n)for(;;){if(0==h){for(a=1,c=m[0];c>=10;c/=10,a++);for(c=m[0]+=p,p=1;c>=10;c/=10,p++);a!=p&&(e.e++,m[0]==u&&(m[0]=1));break}if(m[h]+=p,m[h]!=u)break;m[h--]=0,p=1}for(a=m.length;0===m[--a];m.pop());}e.e>N?e.c=e.e=null:e.e<L&&(e.c=[e.e=0])}return e}function W(e){var t,r=e.e;return null===r?e.toString():(t=y(e.c),t=r<=j||r>=U?b(t,r):w(t,r,"0"),e.s<0?"-"+t:t)}return z.clone=e,z.ROUND_UP=0,z.ROUND_DOWN=1,z.ROUND_CEIL=2,z.ROUND_FLOOR=3,z.ROUND_HALF_UP=4,z.ROUND_HALF_DOWN=5,z.ROUND_HALF_EVEN=6,z.ROUND_HALF_CEIL=7,z.ROUND_HALF_FLOOR=8,z.EUCLID=9,z.config=z.set=function(e){var t,r;if(null!=e){if("object"!=typeof e)throw Error(i+"Object expected: "+e);if(e.hasOwnProperty(t="DECIMAL_PLACES")&&(g(r=e[t],0,f,t),R=r),e.hasOwnProperty(t="ROUNDING_MODE")&&(g(r=e[t],0,8,t),B=r),e.hasOwnProperty(t="EXPONENTIAL_AT")&&((r=e[t])&&r.pop?(g(r[0],-f,0,t),g(r[1],0,f,t),j=r[0],U=r[1]):(g(r,-f,f,t),j=-(U=r<0?-r:r))),e.hasOwnProperty(t="RANGE"))if((r=e[t])&&r.pop)g(r[0],-f,-1,t),g(r[1],1,f,t),L=r[0],N=r[1];else{if(g(r,-f,f,t),!r)throw Error(i+t+" cannot be zero: "+r);L=-(N=r<0?-r:r)}if(e.hasOwnProperty(t="CRYPTO")){if((r=e[t])!==!!r)throw Error(i+t+" not true or false: "+r);if(r){if("undefined"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw M=!r,Error(i+"crypto unavailable");M=r}else M=r}if(e.hasOwnProperty(t="MODULO_MODE")&&(g(r=e[t],0,9,t),F=r),e.hasOwnProperty(t="POW_PRECISION")&&(g(r=e[t],0,f,t),D=r),e.hasOwnProperty(t="FORMAT")){if("object"!=typeof(r=e[t]))throw Error(i+t+" not an object: "+r);V=r}if(e.hasOwnProperty(t="ALPHABET")){if("string"!=typeof(r=e[t])||/^.?$|[+\-.\s]|(.).*\1/.test(r))throw Error(i+t+" invalid: "+r);K="0123456789"==r.slice(0,10),q=r}}return{DECIMAL_PLACES:R,ROUNDING_MODE:B,EXPONENTIAL_AT:[j,U],RANGE:[L,N],CRYPTO:M,MODULO_MODE:F,POW_PRECISION:D,FORMAT:V,ALPHABET:q}},z.isBigNumber=function(e){if(!e||!0!==e._isBigNumber)return!1;if(!z.DEBUG)return!0;var t,r,n=e.c,o=e.e,a=e.s;e:if("[object Array]"=={}.toString.call(n)){if((1===a||-1===a)&&o>=-f&&o<=f&&o===s(o)){if(0===n[0]){if(0===o&&1===n.length)return!0;break e}if((t=(o+1)%l)<1&&(t+=l),String(n[0]).length==t){for(t=0;t<n.length;t++)if((r=n[t])<0||r>=u||r!==s(r))break e;if(0!==r)return!0}}}else if(null===n&&null===o&&(null===a||1===a||-1===a))return!0;throw Error(i+"Invalid BigNumber: "+e)},z.maximum=z.max=function(){return X(arguments,-1)},z.minimum=z.min=function(){return X(arguments,1)},z.random=(T=9007199254740992,E=Math.random()*T&2097151?function(){return s(Math.random()*T)}:function(){return 8388608*(1073741824*Math.random()|0)+(8388608*Math.random()|0)},function(e){var t,r,n,a,u,c=0,p=[],h=new z(I);if(null==e?e=R:g(e,0,f),a=o(e/l),M)if(crypto.getRandomValues){for(t=crypto.getRandomValues(new Uint32Array(a*=2));c<a;)(u=131072*t[c]+(t[c+1]>>>11))>=9e15?(r=crypto.getRandomValues(new Uint32Array(2)),t[c]=r[0],t[c+1]=r[1]):(p.push(u%1e14),c+=2);c=a/2}else{if(!crypto.randomBytes)throw M=!1,Error(i+"crypto unavailable");for(t=crypto.randomBytes(a*=7);c<a;)(u=281474976710656*(31&t[c])+1099511627776*t[c+1]+4294967296*t[c+2]+16777216*t[c+3]+(t[c+4]<<16)+(t[c+5]<<8)+t[c+6])>=9e15?crypto.randomBytes(7).copy(t,c):(p.push(u%1e14),c+=7);c=a/7}if(!M)for(;c<a;)(u=E())<9e15&&(p[c++]=u%1e14);for(a=p[--c],e%=l,a&&e&&(u=d[l-e],p[c]=s(a/u)*u);0===p[c];p.pop(),c--);if(c<0)p=[n=0];else{for(n=-1;0===p[0];p.splice(0,1),n-=l);for(c=1,u=p[0];u>=10;u/=10,c++);c<l&&(n-=l-c)}return h.e=n,h.c=p,h}),z.sum=function(){for(var e=1,t=arguments,r=new z(t[0]);e<t.length;)r=r.plus(t[e++]);return r},S=function(){var e="0123456789";function t(e,t,r,n){for(var o,s,i=[0],a=0,u=e.length;a<u;){for(s=i.length;s--;i[s]*=t);for(i[0]+=n.indexOf(e.charAt(a++)),o=0;o<i.length;o++)i[o]>r-1&&(null==i[o+1]&&(i[o+1]=0),i[o+1]+=i[o]/r|0,i[o]%=r)}return i.reverse()}return function(n,o,s,i,a){var u,l,c,d,p,f,h,m,g=n.indexOf("."),v=R,b=B;for(g>=0&&(d=D,D=0,n=n.replace(".",""),f=(m=new z(o)).pow(n.length-g),D=d,m.c=t(w(y(f.c),f.e,"0"),10,s,e),m.e=m.c.length),c=d=(h=t(n,o,s,a?(u=q,e):(u=e,q))).length;0==h[--d];h.pop());if(!h[0])return u.charAt(0);if(g<0?--c:(f.c=h,f.e=c,f.s=i,h=(f=r(f,m,v,b,s)).c,p=f.r,c=f.e),g=h[l=c+v+1],d=s/2,p=p||l<0||null!=h[l+1],p=b<4?(null!=g||p)&&(0==b||b==(f.s<0?3:2)):g>d||g==d&&(4==b||p||6==b&&1&h[l-1]||b==(f.s<0?8:7)),l<1||!h[0])n=p?w(u.charAt(1),-v,u.charAt(0)):u.charAt(0);else{if(h.length=l,p)for(--s;++h[--l]>s;)h[l]=0,l||(++c,h=[1].concat(h));for(d=h.length;!h[--d];);for(g=0,n="";g<=d;n+=u.charAt(h[g++]));n=w(n,c,u.charAt(0))}return n}}(),r=function(){function e(e,t,r){var n,o,s,i,a=0,u=e.length,l=t%p,c=t/p|0;for(e=e.slice();u--;)a=((o=l*(s=e[u]%p)+(n=c*s+(i=e[u]/p|0)*l)%p*p+a)/r|0)+(n/p|0)+c*i,e[u]=o%r;return a&&(e=[a].concat(e)),e}function t(e,t,r,n){var o,s;if(r!=n)s=r>n?1:-1;else for(o=s=0;o<r;o++)if(e[o]!=t[o]){s=e[o]>t[o]?1:-1;break}return s}function r(e,t,r,n){for(var o=0;r--;)e[r]-=o,o=e[r]<t[r]?1:0,e[r]=o*n+e[r]-t[r];for(;!e[0]&&e.length>1;e.splice(0,1));}return function(n,o,i,a,c){var d,p,f,y,m,g,v,b,w,S,_,T,E,k,A,x,P,O=n.s==o.s?1:-1,C=n.c,I=o.c;if(!(C&&C[0]&&I&&I[0]))return new z(n.s&&o.s&&(C?!I||C[0]!=I[0]:I)?C&&0==C[0]||!I?0*O:O/0:NaN);for(w=(b=new z(O)).c=[],O=i+(p=n.e-o.e)+1,c||(c=u,p=h(n.e/l)-h(o.e/l),O=O/l|0),f=0;I[f]==(C[f]||0);f++);if(I[f]>(C[f]||0)&&p--,O<0)w.push(1),y=!0;else{for(k=C.length,x=I.length,f=0,O+=2,(m=s(c/(I[0]+1)))>1&&(I=e(I,m,c),C=e(C,m,c),x=I.length,k=C.length),E=x,_=(S=C.slice(0,x)).length;_<x;S[_++]=0);P=I.slice(),P=[0].concat(P),A=I[0],I[1]>=c/2&&A++;do{if(m=0,(d=t(I,S,x,_))<0){if(T=S[0],x!=_&&(T=T*c+(S[1]||0)),(m=s(T/A))>1)for(m>=c&&(m=c-1),v=(g=e(I,m,c)).length,_=S.length;1==t(g,S,v,_);)m--,r(g,x<v?P:I,v,c),v=g.length,d=1;else 0==m&&(d=m=1),v=(g=I.slice()).length;if(v<_&&(g=[0].concat(g)),r(S,g,_,c),_=S.length,-1==d)for(;t(I,S,x,_)<1;)m++,r(S,x<_?P:I,_,c),_=S.length}else 0===d&&(m++,S=[0]);w[f++]=m,S[0]?S[_++]=C[E]||0:(S=[C[E]],_=1)}while((E++<k||null!=S[0])&&O--);y=null!=S[0],w[0]||w.splice(0,1)}if(c==u){for(f=1,O=w[0];O>=10;O/=10,f++);Q(b,i+(b.e=f+p*l-1)+1,a,y)}else b.e=p,b.r=+y;return b}}(),k=/^(-?)0([xbo])(?=\w[\w.]*$)/i,A=/^([^.]+)\.$/,x=/^\.([^.]+)$/,P=/^-?(Infinity|NaN)$/,O=/^\s*\+(?=[\w.])|^\s+|\s+$/g,_=function(e,t,r,n){var o,s=r?t:t.replace(O,"");if(P.test(s))e.s=isNaN(s)?null:s<0?-1:1;else{if(!r&&(s=s.replace(k,(function(e,t,r){return o="x"==(r=r.toLowerCase())?16:"b"==r?2:8,n&&n!=o?e:t})),n&&(o=n,s=s.replace(A,"$1").replace(x,"0.$1")),t!=s))return new z(s,o);if(z.DEBUG)throw Error(i+"Not a"+(n?" base "+n:"")+" number: "+t);e.s=null}e.c=e.e=null},C.absoluteValue=C.abs=function(){var e=new z(this);return e.s<0&&(e.s=1),e},C.comparedTo=function(e,t){return m(this,new z(e,t))},C.decimalPlaces=C.dp=function(e,t){var r,n,o,s=this;if(null!=e)return g(e,0,f),null==t?t=B:g(t,0,8),Q(new z(s),e+s.e+1,t);if(!(r=s.c))return null;if(n=((o=r.length-1)-h(this.e/l))*l,o=r[o])for(;o%10==0;o/=10,n--);return n<0&&(n=0),n},C.dividedBy=C.div=function(e,t){return r(this,new z(e,t),R,B)},C.dividedToIntegerBy=C.idiv=function(e,t){return r(this,new z(e,t),0,1)},C.exponentiatedBy=C.pow=function(e,t){var r,n,a,u,c,d,p,f,h=this;if((e=new z(e)).c&&!e.isInteger())throw Error(i+"Exponent not an integer: "+W(e));if(null!=t&&(t=new z(t)),c=e.e>14,!h.c||!h.c[0]||1==h.c[0]&&!h.e&&1==h.c.length||!e.c||!e.c[0])return f=new z(Math.pow(+W(h),c?e.s*(2-v(e)):+W(e))),t?f.mod(t):f;if(d=e.s<0,t){if(t.c?!t.c[0]:!t.s)return new z(NaN);(n=!d&&h.isInteger()&&t.isInteger())&&(h=h.mod(t))}else{if(e.e>9&&(h.e>0||h.e<-1||(0==h.e?h.c[0]>1||c&&h.c[1]>=24e7:h.c[0]<8e13||c&&h.c[0]<=9999975e7)))return u=h.s<0&&v(e)?-0:0,h.e>-1&&(u=1/u),new z(d?1/u:u);D&&(u=o(D/l+2))}for(c?(r=new z(.5),d&&(e.s=1),p=v(e)):p=(a=Math.abs(+W(e)))%2,f=new z(I);;){if(p){if(!(f=f.times(h)).c)break;u?f.c.length>u&&(f.c.length=u):n&&(f=f.mod(t))}if(a){if(0===(a=s(a/2)))break;p=a%2}else if(Q(e=e.times(r),e.e+1,1),e.e>14)p=v(e);else{if(0===(a=+W(e)))break;p=a%2}h=h.times(h),u?h.c&&h.c.length>u&&(h.c.length=u):n&&(h=h.mod(t))}return n?f:(d&&(f=I.div(f)),t?f.mod(t):u?Q(f,D,B,undefined):f)},C.integerValue=function(e){var t=new z(this);return null==e?e=B:g(e,0,8),Q(t,t.e+1,e)},C.isEqualTo=C.eq=function(e,t){return 0===m(this,new z(e,t))},C.isFinite=function(){return!!this.c},C.isGreaterThan=C.gt=function(e,t){return m(this,new z(e,t))>0},C.isGreaterThanOrEqualTo=C.gte=function(e,t){return 1===(t=m(this,new z(e,t)))||0===t},C.isInteger=function(){return!!this.c&&h(this.e/l)>this.c.length-2},C.isLessThan=C.lt=function(e,t){return m(this,new z(e,t))<0},C.isLessThanOrEqualTo=C.lte=function(e,t){return-1===(t=m(this,new z(e,t)))||0===t},C.isNaN=function(){return!this.s},C.isNegative=function(){return this.s<0},C.isPositive=function(){return this.s>0},C.isZero=function(){return!!this.c&&0==this.c[0]},C.minus=function(e,t){var r,n,o,s,i=this,a=i.s;if(t=(e=new z(e,t)).s,!a||!t)return new z(NaN);if(a!=t)return e.s=-t,i.plus(e);var c=i.e/l,d=e.e/l,p=i.c,f=e.c;if(!c||!d){if(!p||!f)return p?(e.s=-t,e):new z(f?i:NaN);if(!p[0]||!f[0])return f[0]?(e.s=-t,e):new z(p[0]?i:3==B?-0:0)}if(c=h(c),d=h(d),p=p.slice(),a=c-d){for((s=a<0)?(a=-a,o=p):(d=c,o=f),o.reverse(),t=a;t--;o.push(0));o.reverse()}else for(n=(s=(a=p.length)<(t=f.length))?a:t,a=t=0;t<n;t++)if(p[t]!=f[t]){s=p[t]<f[t];break}if(s&&(o=p,p=f,f=o,e.s=-e.s),(t=(n=f.length)-(r=p.length))>0)for(;t--;p[r++]=0);for(t=u-1;n>a;){if(p[--n]<f[n]){for(r=n;r&&!p[--r];p[r]=t);--p[r],p[n]+=u}p[n]-=f[n]}for(;0==p[0];p.splice(0,1),--d);return p[0]?$(e,p,d):(e.s=3==B?-1:1,e.c=[e.e=0],e)},C.modulo=C.mod=function(e,t){var n,o,s=this;return e=new z(e,t),!s.c||!e.s||e.c&&!e.c[0]?new z(NaN):!e.c||s.c&&!s.c[0]?new z(s):(9==F?(o=e.s,e.s=1,n=r(s,e,0,3),e.s=o,n.s*=o):n=r(s,e,0,F),(e=s.minus(n.times(e))).c[0]||1!=F||(e.s=s.s),e)},C.multipliedBy=C.times=function(e,t){var r,n,o,s,i,a,c,d,f,y,m,g,v,b,w,S=this,_=S.c,T=(e=new z(e,t)).c;if(!(_&&T&&_[0]&&T[0]))return!S.s||!e.s||_&&!_[0]&&!T||T&&!T[0]&&!_?e.c=e.e=e.s=null:(e.s*=S.s,_&&T?(e.c=[0],e.e=0):e.c=e.e=null),e;for(n=h(S.e/l)+h(e.e/l),e.s*=S.s,(c=_.length)<(y=T.length)&&(v=_,_=T,T=v,o=c,c=y,y=o),o=c+y,v=[];o--;v.push(0));for(b=u,w=p,o=y;--o>=0;){for(r=0,m=T[o]%w,g=T[o]/w|0,s=o+(i=c);s>o;)r=((d=m*(d=_[--i]%w)+(a=g*d+(f=_[i]/w|0)*m)%w*w+v[s]+r)/b|0)+(a/w|0)+g*f,v[s--]=d%b;v[s]=r}return r?++n:v.splice(0,1),$(e,v,n)},C.negated=function(){var e=new z(this);return e.s=-e.s||null,e},C.plus=function(e,t){var r,n=this,o=n.s;if(t=(e=new z(e,t)).s,!o||!t)return new z(NaN);if(o!=t)return e.s=-t,n.minus(e);var s=n.e/l,i=e.e/l,a=n.c,c=e.c;if(!s||!i){if(!a||!c)return new z(o/0);if(!a[0]||!c[0])return c[0]?e:new z(a[0]?n:0*o)}if(s=h(s),i=h(i),a=a.slice(),o=s-i){for(o>0?(i=s,r=c):(o=-o,r=a),r.reverse();o--;r.push(0));r.reverse()}for((o=a.length)-(t=c.length)<0&&(r=c,c=a,a=r,t=o),o=0;t;)o=(a[--t]=a[t]+c[t]+o)/u|0,a[t]=u===a[t]?0:a[t]%u;return o&&(a=[o].concat(a),++i),$(e,a,i)},C.precision=C.sd=function(e,t){var r,n,o,s=this;if(null!=e&&e!==!!e)return g(e,1,f),null==t?t=B:g(t,0,8),Q(new z(s),e,t);if(!(r=s.c))return null;if(n=(o=r.length-1)*l+1,o=r[o]){for(;o%10==0;o/=10,n--);for(o=r[0];o>=10;o/=10,n++);}return e&&s.e+1>n&&(n=s.e+1),n},C.shiftedBy=function(e){return g(e,-9007199254740991,c),this.times("1e"+e)},C.squareRoot=C.sqrt=function(){var e,t,n,o,s,i=this,a=i.c,u=i.s,l=i.e,c=R+4,d=new z("0.5");if(1!==u||!a||!a[0])return new z(!u||u<0&&(!a||a[0])?NaN:a?i:1/0);if(0==(u=Math.sqrt(+W(i)))||u==1/0?(((t=y(a)).length+l)%2==0&&(t+="0"),u=Math.sqrt(+t),l=h((l+1)/2)-(l<0||l%2),n=new z(t=u==1/0?"5e"+l:(t=u.toExponential()).slice(0,t.indexOf("e")+1)+l)):n=new z(u+""),n.c[0])for((u=(l=n.e)+c)<3&&(u=0);;)if(s=n,n=d.times(s.plus(r(i,s,c,1))),y(s.c).slice(0,u)===(t=y(n.c)).slice(0,u)){if(n.e<l&&--u,"9999"!=(t=t.slice(u-3,u+1))&&(o||"4999"!=t)){+t&&(+t.slice(1)||"5"!=t.charAt(0))||(Q(n,n.e+R+2,1),e=!n.times(n).eq(i));break}if(!o&&(Q(s,s.e+R+2,0),s.times(s).eq(i))){n=s;break}c+=4,u+=4,o=1}return Q(n,n.e+R+1,B,e)},C.toExponential=function(e,t){return null!=e&&(g(e,0,f),e++),H(this,e,t,1)},C.toFixed=function(e,t){return null!=e&&(g(e,0,f),e=e+this.e+1),H(this,e,t)},C.toFormat=function(e,t,r){var n,o=this;if(null==r)null!=e&&t&&"object"==typeof t?(r=t,t=null):e&&"object"==typeof e?(r=e,e=t=null):r=V;else if("object"!=typeof r)throw Error(i+"Argument not an object: "+r);if(n=o.toFixed(e,t),o.c){var s,a=n.split("."),u=+r.groupSize,l=+r.secondaryGroupSize,c=r.groupSeparator||"",d=a[0],p=a[1],f=o.s<0,h=f?d.slice(1):d,y=h.length;if(l&&(s=u,u=l,l=s,y-=s),u>0&&y>0){for(s=y%u||u,d=h.substr(0,s);s<y;s+=u)d+=c+h.substr(s,u);l>0&&(d+=c+h.slice(s)),f&&(d="-"+d)}n=p?d+(r.decimalSeparator||"")+((l=+r.fractionGroupSize)?p.replace(new RegExp("\\d{"+l+"}\\B","g"),"$&"+(r.fractionGroupSeparator||"")):p):d}return(r.prefix||"")+n+(r.suffix||"")},C.toFraction=function(e){var t,n,o,s,a,u,c,p,f,h,m,g,v=this,b=v.c;if(null!=e&&(!(c=new z(e)).isInteger()&&(c.c||1!==c.s)||c.lt(I)))throw Error(i+"Argument "+(c.isInteger()?"out of range: ":"not an integer: ")+W(c));if(!b)return new z(v);for(t=new z(I),f=n=new z(I),o=p=new z(I),g=y(b),a=t.e=g.length-v.e-1,t.c[0]=d[(u=a%l)<0?l+u:u],e=!e||c.comparedTo(t)>0?a>0?t:f:c,u=N,N=1/0,c=new z(g),p.c[0]=0;h=r(c,t,0,1),1!=(s=n.plus(h.times(o))).comparedTo(e);)n=o,o=s,f=p.plus(h.times(s=f)),p=s,t=c.minus(h.times(s=t)),c=s;return s=r(e.minus(n),o,0,1),p=p.plus(s.times(f)),n=n.plus(s.times(o)),p.s=f.s=v.s,m=r(f,o,a*=2,B).minus(v).abs().comparedTo(r(p,n,a,B).minus(v).abs())<1?[f,o]:[p,n],N=u,m},C.toNumber=function(){return+W(this)},C.toPrecision=function(e,t){return null!=e&&g(e,1,f),H(this,e,t,2)},C.toString=function(e){var t,r=this,n=r.s,o=r.e;return null===o?n?(t="Infinity",n<0&&(t="-"+t)):t="NaN":(null==e?t=o<=j||o>=U?b(y(r.c),o):w(y(r.c),o,"0"):10===e&&K?t=w(y((r=Q(new z(r),R+o+1,B)).c),r.e,"0"):(g(e,2,q.length,"Base"),t=S(w(y(r.c),o,"0"),10,e,n,!0)),n<0&&r.c[0]&&(t="-"+t)),t},C.valueOf=C.toJSON=function(){return W(this)},C._isBigNumber=!0,C[Symbol.toStringTag]="BigNumber",C[Symbol.for("nodejs.util.inspect.custom")]=C.valueOf,null!=t&&z.set(t),z}();const _=S},"./node_modules/feaxios/dist/index.mjs":(e,t,r)=>{"use strict";async function n(e,t){const r={config:e};return r.status=t.status,r.statusText=t.statusText,r.headers=t.headers,"stream"===e.responseType?(r.data=t.body,r):t[e.responseType||"text"]().then((n=>{e.transformResponse?(Array.isArray(e.transformResponse)?e.transformResponse.map((r=>n=r.call(e,n,t?.headers,t?.status))):n=e.transformResponse(n,t?.headers,t?.status),r.data=n):(r.data=n,r.data=JSON.parse(n))})).catch(Object).then((()=>r))}function o(e){let t=e.url||"";return e.baseURL&&e.url&&(t=e.url.replace(/^(?!.*\/\/)\/?/,`${e.baseURL}/`)),e.params&&Object.keys(e.params).length>0&&e.url&&(t+=(~e.url.indexOf("?")?"&":"?")+(e.paramsSerializer?e.paramsSerializer(e.params):new URLSearchParams(e.params))),t}function s(e,t){const r={...t,...e};if(t?.params&&e?.params&&(r.params={...t?.params,...e?.params}),t?.headers&&e?.headers){r.headers=new Headers(t.headers||{});new Headers(e.headers||{}).forEach(((e,t)=>{r.headers.set(t,e)}))}return r}function i(e,t){const r=t.get("content-type");return r?"application/x-www-form-urlencoded"!==r||e instanceof URLSearchParams?"application/json"===r&&"object"==typeof e&&(e=JSON.stringify(e)):e=new URLSearchParams(e):"string"==typeof e?t.set("content-type","text/plain"):e instanceof URLSearchParams?t.set("content-type","application/x-www-form-urlencoded"):e instanceof Blob||e instanceof ArrayBuffer||ArrayBuffer.isView(e)?t.set("content-type","application/octet-stream"):"object"==typeof e&&"function"!=typeof e.append&&"function"!=typeof e.text&&(e=JSON.stringify(e),t.set("content-type","application/json")),e}async function a(e,t,r,u,l,p){"string"==typeof e?(t=t||{}).url=e:t=e||{};const f=s(t,r||{});if(f.fetchOptions=f.fetchOptions||{},f.timeout=f.timeout||0,f.headers=new Headers(f.headers||{}),f.transformRequest=f.transformRequest??i,p=p||f.data,f.transformRequest&&p&&(Array.isArray(f.transformRequest)?f.transformRequest.map((e=>p=e.call(f,p,f.headers))):p=f.transformRequest(p,f.headers)),f.url=o(f),f.method=u||f.method||"get",l&&l.request.handlers.length>0){const e=l.request.handlers.filter((e=>!e?.runWhen||"function"==typeof e.runWhen&&e.runWhen(f))).flatMap((e=>[e.fulfilled,e.rejected]));let t=f;for(let r=0,n=e.length;r<n;r+=2){const n=e[r],o=e[r+1];try{n&&(t=n(t))}catch(e){o&&o?.(e);break}}}const h=function(e,t){const r={...t,...e};t?.headers&&e?.headers&&(r.headers=new Headers(t.headers||{}),new Headers(e.headers||{}).forEach(((e,t)=>{r.headers.set(t,e)})));return r}({method:f.method?.toUpperCase(),body:p,headers:f.headers,credentials:f.withCredentials?"include":void 0,signal:f.signal},f.fetchOptions);let y=async function(e,t){let r=null;if("any"in AbortSignal){const r=[];e.timeout&&r.push(AbortSignal.timeout(e.timeout)),e.signal&&r.push(e.signal),r.length>0&&(t.signal=AbortSignal.any(r))}else e.timeout&&(t.signal=AbortSignal.timeout(e.timeout));try{return r=await fetch(e.url,t),(e.validateStatus?e.validateStatus(r.status):r.ok)?await n(e,r):Promise.reject(new c(`Request failed with status code ${r?.status}`,[c.ERR_BAD_REQUEST,c.ERR_BAD_RESPONSE][Math.floor(r?.status/100)-4],e,new Request(e.url,t),await n(e,r)))}catch(t){if("AbortError"===t.name||"TimeoutError"===t.name){const r="TimeoutError"===t.name;return Promise.reject(r?new c(e.timeoutErrorMessage||`timeout of ${e.timeout} ms exceeded`,c.ECONNABORTED,e,a):new d(null,e))}return Promise.reject(new c(t.message,void 0,e,a,void 0))}}(f,h);if(l&&l.response.handlers.length>0){const e=l.response.handlers.flatMap((e=>[e.fulfilled,e.rejected]));for(let t=0,r=e.length;t<r;t+=2)y=y.then(e[t],e[t+1])}return y}r.r(t),r.d(t,{AxiosError:()=>c,CanceledError:()=>d,default:()=>h,isAxiosError:()=>p});var u=class{handlers=[];constructor(){this.handlers=[]}use=(e,t,r)=>(this.handlers.push({fulfilled:e,rejected:t,runWhen:r?.runWhen}),this.handlers.length-1);eject=e=>{this.handlers[e]&&(this.handlers[e]=null)};clear=()=>{this.handlers=[]}};function l(e){e=e||{};const t={request:new u,response:new u},r=(r,n)=>a(r,n,e,void 0,t);return r.defaults=e,r.interceptors=t,r.getUri=t=>o(s(t||{},e)),r.request=r=>a(r,void 0,e,void 0,t),["get","delete","head","options"].forEach((n=>{r[n]=(r,o)=>a(r,o,e,n,t)})),["post","put","patch"].forEach((n=>{r[n]=(r,o,s)=>a(r,s,e,n,t,o)})),["postForm","putForm","patchForm"].forEach((n=>{r[n]=(r,o,s)=>((s=s||{}).headers=new Headers(s.headers||{}),s.headers.set("content-type","application/x-www-form-urlencoded"),a(r,s,e,n.replace("Form",""),t,o))})),r}var c=class extends Error{config;code;request;response;status;isAxiosError;constructor(e,t,r,n,o){super(e),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.name="AxiosError",this.code=t,this.config=r,this.request=n,this.response=o,this.isAxiosError=!0}static ERR_BAD_OPTION_VALUE="ERR_BAD_OPTION_VALUE";static ERR_BAD_OPTION="ERR_BAD_OPTION";static ERR_NETWORK="ERR_NETWORK";static ERR_BAD_RESPONSE="ERR_BAD_RESPONSE";static ERR_BAD_REQUEST="ERR_BAD_REQUEST";static ERR_INVALID_URL="ERR_INVALID_URL";static ERR_CANCELED="ERR_CANCELED";static ECONNABORTED="ECONNABORTED";static ETIMEDOUT="ETIMEDOUT"},d=class extends c{constructor(e,t,r){super(e||"canceled",c.ERR_CANCELED,t,r),this.name="CanceledError"}};function p(e){return null!==e&&"object"==typeof e&&e.isAxiosError}var f=l();f.create=e=>l(e);var h=f}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.loaded=!0,s.exports}return r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),r("./src/browser.ts")})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,